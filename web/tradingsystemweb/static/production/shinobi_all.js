shinobi.seoMarkUpBuilder = {
	'baseURL': '/page/blogpost/',
	'JSON': [{
		'baseurl': '/page/blogpost/',
		'pagename': 'Bài viết',
		'markuprender': 'shinobi.articleMarkUp.build'
	}],

	'getJSON': function () {
		var request = {};
		request.baseurl = baseURL;

		shinobi.api.request('/api/Api/getJSON', JSON.stringify(request),
			function (response) {
				var jsonArr = JSON.parse(response);
				shinobi.seoMarkUpBuilder.JSON = jsonArr;
			});
	},

	'render': function () {
		// shinobi.seoMarkUpBuilder.getJSON();

		var jsonArr = shinobi.seoMarkUpBuilder.JSON;

		var pathName = window.location.pathname;

		for (var i = 0; i < jsonArr.length; i++) {
			var item = jsonArr[i];

			if (pathName.includes(item.baseurl)) {
				if (!item.markuprender || item.markuprender == ''
					|| item.markuprender == null) {

					shinobi.seoMarkUpBuilder.defaultRender();
				} else {

					eval(item.markuprender)();
				}

			}
		}

	},

	'defaultRender': function () {

	},

	'build': function () {

		shinobi.seoMarkUpBuilder.render();
	}

};
shinobi.api = {
    request: function(url, param, callback, options) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                var data = JSON.parse(xhttp.responseText);
                if (!options ||
                    (options && !options.hasOwnProperty("responseHandleFunction"))
                ) {
                    if (data.result === "success") {
                        callback(data.content);
                    } else if (data.result === "notify") {
                        shinobi.notification.notification.info(data.content);
                    } else {
                        var showCotent =
                            data.hasOwnProperty("content") && data["content"].trim() != "" ?
                            data["content"] :
                            data["errorcode"];

                        ["content", "errorcode"].forEach(function(attribute) {
                            if (
                                data[attribute].trim() != "" &&
                                !data[attribute].startsWith("ERROR_") &&
                                !data[attribute].startsWith("PAGECODE_")
                            ) {
                                showCotent = data[attribute];
                            }
                        });

                        shinobi.notification.notification.error(showCotent);
                    }
                } else {
                    if (typeof options.responseHandleFunction == "function") {
                        options.responseHandleFunction({
                            data: data,
                            url: url,
                            request: param,
                            callback: callback,
                            options: options,
                        });
                    }
                }
            } else {
                if (this.readyState == 4) {
                    if (options && options.errorCallback) {
                        options.errorCallback(this.status);
                    } else {
                        console.log('response api code', this.status, url);
                    }
                }

            }
        };
        xhttp.open("POST", url, true);
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp.send(param);
    },
};shinobi.areasplinechart = (function() {
	/*
	 * categories : [ 'Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas' ]
	 */
	/*
	 * [ { name : 'John', data : [ 5, 3, 4, 7, 2 ] }, { name : 'Jane', data : [
	 * 2, 2, 3, 2, 1 ] }, { name : 'Joe', data : [ 3, 4, 4, 2, 5 ] } ]
	 */
	// private static variable
	// constructor
	var constructor = function(chartId, options) {
		this.data = [];
		this.title = '';
		this.name = '';
		this.categories = [];
		this.options = (options) ? options : null;
		this.createAreaSplineChart = function(chartId, categories, data) {
			this.containerId = chartId;
			this.categories = categories;
			this.data = data;
			this.renderChart();
		}
		this.setData = function(data) {
			this.data = data;
		}
		this.setName = function(name) {
			this.name = name;
		}
		this.renderChart = function() {
			Highcharts.chart(this.containerId, {
				chart : {
					type : 'areaspline',
					height : (this.options == null) ? 400 : (this.options.height == null)
							? 400
							: this.options.height,
				},
				title : {
					text : ''
				},
				xAxis : {
					categories : this.categories
				},
				yAxis : {
					title : false
				},
				exporting : {
					enabled : false
				},
				credits : {
					enabled : false
				},
				series : this.data
			});
		}
		// public static method
		constructor.staticmethod = {
			'hello' : function() {
			}
		}
	}
	return constructor;
})();
shinobi.areastacksplinechart = (function() {

	/*
	 * categories : [ 'Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas' ]
	 */

	/*
	 * [ { name : 'John', data : [ 5, 3, 4, 7, 2 ] }, { name : 'Jane', data : [
	 * 2, 2, 3, 2, 1 ] }, { name : 'Joe', data : [ 3, 4, 4, 2, 5 ] } ]
	 */

	// private static variable
	// constructor
	var constructor = function(chartId) {

		this.data = [];

		this.title = '';

		this.name = '';

		this.categories = [];

		this.createAreaStackSplineChart = function(chartId, categories, data) {

			this.containerId = chartId;

			this.categories = categories;

			this.data = data;

			this.renderChart();

		}

		this.setData = function(data) {

			this.data = data;
		}

		this.setName = function(name) {

			this.name = name;
		}
		this.renderChart = function() {

			Highcharts.chart(this.containerId, {
				chart : {
					type : 'areaspline'
				},
				title : {
					text : ''
				},
				xAxis : {
					categories : this.categories
				},
				yAxis : {
					title : false
				},
				exporting : {
					enabled : false
				},
				tooltip : {
					split : true,
				},
				credits : {
					enabled : false
				},
				plotOptions : {
					areaspline : {
						stacking : 'normal'
					}
				},
				series : this.data
			});

		}

		// public static method
		constructor.staticmethod = {
			'hello' : function() {

			}
		}
	}

	return constructor;
})();
shinobi.articleMarkUp = {
	'title' : 'Aladin | Nền tảng kết nối cộng đồng nhà đầu tư chứng khoán chuyên nghiệp',
	'gaid' : "UA-119675169-1",
	'headLine' : '',
	'postURL' : '',
	'image' : 'image.aladin.finance/aladin.finance.public.image/783d7f463d1a8269ab447d3593641cae/HVN.png',
	'datePublished' : new Date(),
	'dateModified' : new Date(),
	'authorName' : '',
	'authorImageURL' : '',
	'publisherName' : 'Aladin | aladin.finance',
	'publisherLogoURL' : 'https://image.aladin.finance/aladin.finance.public.image/c73f7e23e7ccb4d33744cd03cfc8a18f/Aladin-Logo-test.png',
	'description' : '',

	'buildArticleMarkupScript' : function() {
		var content = '';

		content += '<script type="application/ld+json">{';
		content += '"@context": "https://schema.org", "@type": "NewsArticle",';
		content += '"mainEntityOfPage": {"@type": "WebPage", "@id": "'
				+ shinobi.articleMarkUp.postURL + '"},';
		content += '"headline": "' + shinobi.articleMarkUp.title + '",';
		content += '"image": ["' + shinobi.articleMarkUp.image + '"],';
		content += '"datePublished": "' + shinobi.articleMarkUp.datePublished
				+ '",';
		content += '"dateModified": "' + shinobi.articleMarkUp.dateModified
				+ '",';
		content += '"author": {"@type": "Person", "name": "'
				+ shinobi.articleMarkUp.authorName + '",';
		content += '"image": {"@type": "ImageObject", "url": "'
				+ shinobi.articleMarkUp.authorImageURL + '"}},';
		content += '"publisher": {"@type": "Organization", "name": "'
				+ shinobi.articleMarkUp.publisherName + '",';
		content += '"logo": {"@type": "ImageObject", "url": "'
				+ shinobi.articleMarkUp.publisherLogoURL + '"}},';
		content += '"description": "' + shinobi.articleMarkUp.description
				+ '"}';
		content += '</script>';

		return content;
	},

	'addGA' : function() {
		ga("create", shinobi.articleMarkUp.gaid, "auto");
		ga("send", "pageview");
	},

	'buildArticleMarkUp' : function() {

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var postUrl = pathNameSplit[pathNameSplit.length - 1];

		var request = {};

		request.posturl = blogPostPageUrl + postUrl;

		// shinobi.api.request('/api/BlogOverviewApi/getTraderPostDetail', JSON

		shinobi.api.request('/api/BlogOverviewApi/getPreViewContent', JSON
				.stringify(request), function(response) {

			var jsonArr = JSON.parse(response);

			shinobi.articleMarkUp.getAuthorInfo(jsonArr.createduser,
					function() {
						shinobi.articleMarkUp.setNewParam(jsonArr);

						shinobi.articleMarkUp.applyToHead();

						shinobi.articleMarkUp.addGA();
					});
		});
	},

	'getAuthorInfo' : function(userName, callback) {
		var request = {};
		request.username = userName;
		shinobi.api.request('/api/UserApi/getAllUserInfo', JSON
				.stringify(request), function(response) {

			var jsonArr = JSON.parse(response);

			shinobi.articleMarkUp.authorImageURL = jsonArr.avatarlink;
			shinobi.articleMarkUp.authorName = jsonArr.firstname + " "
					+ jsonArr.lastname;

			callback();
		});
	},

	'setNewParam' : function(data) {

		if (data.posttitle.includes('"')) {
			shinobi.articleMarkUp.title = data.posttitle.replace(/"/g, '\\"');
		} else {
			shinobi.articleMarkUp.title = data.posttitle;
		}

		shinobi.articleMarkUp.dateModified = data.lastmodifieddate;
		shinobi.articleMarkUp.datePublished = data.createddate;
		shinobi.articleMarkUp.image = data.thumpnailurl;
		shinobi.articleMarkUp.postURL = 'https://www.aladin.finance'
				+ data.posturl;

	},

	'applyToHead' : function() {
		var headContent = document.head.innerHTML;

		headContent = headContent
				+ shinobi.articleMarkUp.buildArticleMarkupScript();
		document.head.innerHTML = headContent;

	},

	'build' : function() {

		shinobi.articleMarkUp.buildArticleMarkUp();
	}

}
shinobi.autocomplete = (function () {
  var constructor = function (selector, options) {
    this.autoCompleteObject = "";
    this.input = "";
    this.selector = selector;
    this.onUpdate = function (results, selectedIndex) {
      console.log(`${results.length} results`);
      if (selectedIndex > -1) {
        console.log(`Selected: ${results[selectedIndex]}`);
      }
    };
    this.getResultValue = function (result) {
      // return result.name
    };
    this.autoSelect = true;
    // this.containerSelector = selector.replace('#', "").replace('.', "") + "autoComplete";
    this.containerSelector =
      "shinobiAutoComplete" + shinobi.util.sha256(selector);
    this.options = options;
    this.onSearch = function (input, resolve) {
      return [];
    };
    this.renderResult = function (result, props) {
      return `<li ${props}> ${JSON.stringify(result)}</li>`;
    };
    this.onSubmit = function (result, object) {
      object.autoCompleteObject.input.value = JSON.stringify(result);
    };
    this.loadOptions = function () {
      var object = this;
      if (options.hasOwnProperty("onSearch")) {
        object.onSearch = options.onSearch;
      }
      if (options.hasOwnProperty("renderResult")) {
        object.renderResult = options.renderResult;
      }
      if (options.hasOwnProperty("onSubmit")) {
        object.onSubmit = options.onSubmit;
      }
      if (options.hasOwnProperty("onUpdate")) {
        object.onUpdate = options.onUpdate;
      }
      if (options.hasOwnProperty("autoSelect")) {
        object.autoSelect = options.autoSelect;
      }
    };

    this.createObject = function () {
      var object = this;
      object.autoCompleteObject = new Autocomplete(
        "#" + object.containerSelector,
        {
          search: (input) => {
            if (input.trim() != "" || (options.hasOwnProperty('emptySearch') && options['emptySearch'])) {
              return new Promise((resolve) => {
                object.onSearch(input.trim(), resolve);
                // var request = {};
                // request.searchkey = input.trim();
                // shinobi.api.request(shinobi.coreapi.loggedUserApi + 'searchUser', JSON.stringify(request), function (re) {
                //     var arrJson = JSON.parse(re);
                //     var data = arrJson;
                //     resolve(data);
                // });
              });
            } else {
              return [];
            }
          },
          renderResult: function (result, props) {
            return object.renderResult(result, props);
          },
          onSubmit: function (result) {
            object.onSubmit(result, object);
          },
          autoSelect: object.autoSelect,
          onUpdate: function (results, selectedIndex) {
            object.onUpdate(results, selectedIndex, object);
          },
        }
      );
    };

    this.createStructure = function (callback) {
      var object = this;
      object.input = document.querySelector(this.selector);
      if (!object.input.parentElement.classList.contains("autocomplete")) {
        var container = document.createElement("div");
        container.setAttribute("class", "autocomplete");
        container.setAttribute("id", this.containerSelector);
        container.innerHTML = `<ul class="autocomplete-result-list"></ul>`;
        object.input.classList.add("autocomplete-input");
        object.input.setAttribute("autocomplete", "nope");
        object.input.setAttribute("autocorrect", "off");
        // object.input.setAttribute("name", object.containerSelector);
        object.input.value = "";
        object.input.parentElement.replaceChild(container, object.input);
        container.insertBefore(object.input, container.firstElementChild);
        container.appendChild(object.input);

        var formContainer = document.createElement("form");
        formContainer.setAttribute("autocomplete", "off");
        formContainer.setAttribute("onSubmit", "return false;");
        container.parentElement.replaceChild(formContainer, container);
        formContainer.appendChild(container);
      }
      callback();
    };
    this.loadAll = function () {
      var object = this;
      this.loadOptions();
      this.createStructure(function () {
        object.createObject();
      });
    };

    this.loadAll();
  };

  // public static method
  constructor.staticmethod = {
    hello: function () { },
  };

  return constructor;
})();
shinobi.cacheapi = {
	cache : {},
	request : function(url, param, callback, option) {
		var cacheKey = url + '_' + JSON.stringify(param);
		if (shinobi.cacheapi.cache.hasOwnProperty(cacheKey)) {
			var currentCacheData = shinobi.cacheapi.cache[cacheKey];
			(currentCacheData == false) ? setTimeout(function() {
				shinobi.cacheapi.request(url, param, callback)
			}, 10) : callback(shinobi.cacheapi.cache[cacheKey]);

		} else {
			shinobi.cacheapi.cache[cacheKey] = false;
			shinobi.api.request(url, param, function(response) {
				shinobi.cacheapi.cache[cacheKey] = response;

				if (option && option.hasOwnProperty('cacheExpired')) {
					setTimeout(function() {
						delete shinobi.cacheapi.cache[cacheKey];
					}, option['cacheExpired'])
				}
				callback(response);
			});
		}
	},
	clearKey : function(url, param, option) {
		var tempSymbol = '_';
		var cacheKey = url + tempSymbol;
		if (param) {
			cacheKey += JSON.stringify(param);
			if (shinobi.cacheapi.cache.hasOwnProperty(cacheKey)) {
				delete shinobi.cacheapi.cache[cacheKey];
			}
		} else {
			var listKeyRef = Object.keys(shinobi.cacheapi.cache).filter(
					function(item) {
						return item.includes(url + tempSymbol);
					});

			listKeyRef.forEach(function(key) {
				delete shinobi.cacheapi.cache[key];

			})
		}

	},
	clear : function() {
		shinobi.cacheapi.cache = {};
	},

};shinobi.chartadapter = {

	'convertDataPieChart': function (data) {

		var returnData = [];

		var dataObject = data[0];

		var xNameArr = dataObject.xname;
		var value = dataObject.value;

		var dataLength = value.length;

		for (var i = 0; i < dataLength; i++) {

			var chartObject = {};

			chartObject.name = xNameArr[i];
			chartObject.y = parseInt(value[i]);

			returnData.push(chartObject);
		}

		return returnData;

	},

	'convertDataStockChart': function (data) {

		// series: [ {
		// name : 'Temperature',
		// data : [ [ 1317888000000, 372.5101 ], [ 1317888060000, 372.4 ],
		// [ 1317888120000, 372.16 ], [ 1317888180000, 371.62 ],
		// [ 1317888240000, 371.75 ], [ 1317888300000, 372 ] ],
		//
		// tooltip : {
		// valueDecimals : 1,
		// valueSuffix : '°C'
		// }
		// } ]

		var returnData = [];

		var dataObject = data.chartdata[0];

		var xname = dataObject.xname;
		var value = dataObject.value;

		var length = xname.length;

		for (var i = 0; i < length; i++) {

			var tempArray = [];

			tempArray.push(Number(xname[i]));
			tempArray.push(Number(value[i]));

			returnData.push(tempArray);

		}

		return returnData;

	},

	'convertDataSimpleChart': function (data) {

		var dataObject = data.chartdata[0];

		var dataChart = [];

		var valueList = dataObject.value;
		var xNameList = dataObject.xname;

		// var minValue = Math.min(...valueList);
		// var rootValue = Math.trunc(minValue*0.99);

		var tradeDemoCapitalValue = valueList[0];
		// var rootValue = Math.trunc(tradeDemoCapitalValue * 0.99);
		var rootValue = tradeDemoCapitalValue;

		var length = valueList.length;

		for (var i = 0; i < length; i++) {

			// var tempObject = [];

			var currentValue = Number(valueList[i]) - rootValue;

			// tempObject.push(Number(xNameList[i]));

			// tempObject.push(currentValue);

			// dataChart.push(tempObject);
			dataChart.push(currentValue);
		}

		return dataChart;

	},

	'convertDataColumnChart': function (data) {

		var returnObject = {};

		var dataObject = data.chartdata;

		returnObject.categories = [];

		returnObject.data = [];

		var dataLength = dataObject.length;

		if (dataLength == 0) {

			return returnObject;
		}

		var feeNameList = dataObject[0].yname;

		var feeNameListLength = feeNameList.length;

		for (var i = 0; i < feeNameListLength; i++) {

			var tempObject = {};

			tempObject.name = feeNameList[i];

			tempObject.data = [];

			for (var j = 0; j < dataLength; j++) {

				returnObject.categories.push(dataObject[j].xname[0]);

				tempObject.data.push(Number(dataObject[j].value[i]));

			}

			// reverse data in object
			tempObject.data = tempObject.data.reverse();

			returnObject.data.push(tempObject);
		}

		// reverse category in object
		returnObject.categories = returnObject.categories.reverse();

		return returnObject;

	},

	'convertOneObjectDataColumnChart': function (data) {

		var returnObject = {};
		returnObject.data = [];

		var chartDataArray = data.chartdata;

		for (var h = 0; h < chartDataArray.length; h++) {

			var dataObject = data.chartdata[h];

			var dateMilisecond = dataObject.xname;
			var dateArray = [];

			for (var j = 0; j < dateMilisecond.length; j++) {

				var currentDateValue = new Date(Number(dateMilisecond[j]));

				var formatDate = shinobi.util.getFormatDate(
					currentDateValue, {
					format: 'dd-MM-yyyy hh:mm'
				});

				dateArray.push(formatDate);
			}

			returnObject.categories = dateArray;

			var valueList = dataObject.value;

			var valueListLength = valueList.length;

			var tempObject = {};

			tempObject.name = dataObject.yname[0];

			tempObject.data = [];

			for (var i = 0; i < valueListLength; i++) {

				tempObject.data.push(Number(valueList[i]));

			}

			returnObject.data.push(tempObject);
		}

		return returnObject;

	},

};if (typeof CKEDITOR == "object") {

	CKEDITOR.editorConfig = function(config) {
		config.language = 'vi';
		config.height = 300;
		config.toolbarCanCollapse = true;
		config.allowedContent = true;
		config.bodyClass = 'content column';
		config.contentsCss = 'https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css';
	};
};if (typeof CKEDITOR == "object") {
	CKEDITOR.editorConfig = function(config) {
		config.language = 'vi';
		config.height = 300;
		config.toolbarCanCollapse = true;
		config.allowedContent = true;
		config.bodyClass = 'document-editor content has-padding-1-rem';
		config.contentsCss = '/static/production/shinobi_2.css';
	}
};shinobi.coreapi = {
    logo: '<span class="title is-2">CFV</span>',
    lotteryResultApi: "/api/LotteryResultApi/",
    lotteryStatisticApi: "/api/LotteryStatisticApi/",
    userApi: "/api/UserApi/",
    menuNotiApi: "/authenapi/MenuNotiApi/",
    productApi: "/api/ProductApi/",
    getSessionIdApi: "/authenapi/userapi/",

    getLoggedUser: function () {
        shinobi.coreapi.checkAuthen();
    },
    checkAuthen: function (callback) {
        var request = {};
        shinobi.cacheapi.request(shinobi.coreapi.userApi + "checkAuthen", JSON.stringify(request), function (response) {
            var data = JSON.parse(response);

            if (typeof callback == "function") {
                data ? callback(data["username"]) : callback(false);
            }
        });
    },
    checkNotCacheAuthen: function (callback) {
        var request = {};
        shinobi.api.request(shinobi.coreapi.userApi + "checkAuthen", JSON.stringify(request), function (response) {
            var data = JSON.parse(response);

            if (typeof callback == "function") {
                data ? callback(data["username"]) : callback(false);
            }
        });
    },

    requestAuthen: function (callback) {
        shinobi.coreapi.checkAuthen(function (username) {
            if (typeof callback == "function") {
                username ? callback(username) : shinobi.notification.notification.error("Vui lòng đăng nhập để thao tác");
            }
        });
    },
    reCheckAuthen: function (callback) {
        var key = shinobi.coreapi.userApi + "checkAuthen";
        if (typeof shinobi.cacheapi.cache == "object") {
            shinobi.cacheapi.clearKey(key);
        }
        shinobi.coreapi.checkAuthen(callback);
    },
    getSessionId: function (callback) {
        var request = {};
        shinobi.api.request(shinobi.coreapi.systemUserApi + "getSessionId", JSON.stringify(request), function (response) {
            if (typeof callback == "function") {
                var data = JSON.parse(response);
                if (data.hasOwnProperty("sessionid")) {
                    data["sessionid"] != -1 ? callback(data["sessionid"]) : callback(false);
                } else {
                    callback(false);
                }
            }
        });
    },
    getUserInfo: function (callback) {
        shinobi.coreapi.checkAuthen(function (username) {
            var userInfoRequest = {
                username: username,
            };
            shinobi.cacheapi.request(
                shinobi.coreapi.userApi + "getAllUserInfo",
                JSON.stringify(userInfoRequest),
                function (response) {
                    if (typeof callback == "function") {
                        callback(response);
                    }
                }
            );
        });
    },
    getLoggedUserInfo: function (callback) {
        shinobi.coreapi.checkAuthen(function (username) {
            var userInfoRequest = {
                username: username,
            };
            shinobi.cacheapi.request(
                shinobi.coreapi.loggedUserApi + "getAllUserInfo",
                JSON.stringify(userInfoRequest),
                function (response) {
                    if (typeof callback == "function") {
                        callback(response);
                    }
                }
            );
        });
    },
};shinobi.datalist = (function() {

    // private static variable
    var paginationClass = ".table-pagination";

    var prevPaginationClass = ".shinobi-pagination-prev";
    var curPagePaginationClass = ".shinobi-pagination-curpage";
    var nextPaginationClass = ".shinobi-pagination-next";
    var pageTotalClass = ".shinobi-page-total";
    var recordPerPageClass = ".shinobi-recordperpage";
    var detailIdKey = "snb-detailid";
    var colnameAttribute = "snb-colname";
    var colcontrolAttribute = "snb-header-control";
    var sortAttribute = "snb-sort";

    var sortDescIcon = "<i class='fas fa-sort-down'></i>";
    var sortAscIcon = "<i class='fas fa-sort-up'></i>";
    var sortIcon = "<i class='fas fa-sort'></i>";

    // constructor
    var constructor = function(tableid) {

        this.loadingContainer = '';

        this.url = "";

        this.colNames = [];

        this.filters = [];

        this.staticfilters = [];

        this.sorts = [];

        this.paramsList = '';

        this.staticsorts = [];

        this.renders = [];

        this.tableRows = [];

        this.pageNum = 1;

        this.recordPerPage = 10;

        this.pageTotal = 10;

        this.rowTotal = 10;

        this.tableNode = document.getElementById(tableid);

        this.tableContainerNode = this.tableNode.parentNode;

        this.sampleNode = this.tableNode.querySelector("[snb-datalist-parent=" + this.tableNode
            .getAttribute("snb-datalist-node") +
            "]");

        this.pageNumNode = this.tableContainerNode
            .querySelector(curPagePaginationClass);

        this.recordPerPageNode = this.tableContainerNode
            .querySelector(recordPerPageClass);

        this.getColnames = function() {
            var table = document.getElementById(tableid);

            var colNames = table.querySelectorAll("[" + colnameAttribute + "]");

            var headerColnames = [];
            for (var i = 0; i < colNames.length; i++) {
                var colElem = colNames[i];
                headerColnames[i] = colElem.getAttribute(colnameAttribute);
            }

            return headerColnames;
        };

        this.registerSorts = function() {
            var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute +
                "]");

            for (var i = 0; i < sortElems.length; i++) {
                var sortElem = sortElems[i];

                this.registerSort(sortElem);
            }
        };

        this.registerPagination = function() {

            var parentNode = this.tableNode.parentNode;

            this.paginationContainer = parentNode
                .querySelector(paginationClass);
        };

        this.updatePagination = function(data) {

            shinobi.mapping.renderElement(this.paginationContainer, JSON
                .parse(data));

            if (JSON.parse(data).pageNum) {

                var currentPage = this.paginationContainer
                    .querySelectorAll(curPagePaginationClass)[0];
                if (JSON.parse(data).pageTotal == 0) {

                    currentPage.value = 0;

                } else {

                    currentPage.value = JSON.parse(data).pageNum;

                }
            }

        };

        this.registerSort = function(sortElem) {

            var table = this;

            sortElem.addEventListener("click", function() {
                var currentSortValue = this.getAttribute(sortAttribute);

                var colName = this.parentNode.getAttribute(colnameAttribute);

                if ("" === currentSortValue) {
                    this.setAttribute(sortAttribute, "asc");
                    this.innerHTML = sortAscIcon;
                    this.classList.add("is-visible");
                } else if ("asc" === currentSortValue) {
                    this.setAttribute(sortAttribute, "desc");
                    this.innerHTML = sortDescIcon;
                    this.classList.add("is-visible");
                } else {
                    this.setAttribute(sortAttribute, "");
                    this.innerHTML = sortIcon;
                    this.classList.remove("is-visible");
                }

                table.reloadApi(table.pageNum);

            });

        };

        this.getSorts = function() {
            this.sorts = [];

            this.sorts = this.sorts.concat(this.staticsorts);

            var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute +
                "]");

            for (var i = 0; i < sortElems.length; i++) {
                var sortElem = sortElems[i];

                var colName = sortElem.parentNode
                    .getAttribute(colnameAttribute);
                var currentSortValue = sortElem.getAttribute(sortAttribute);

                if ("" !== currentSortValue) {
                    var sort = {};
                    sort.colname = colName;
                    sort.value = currentSortValue;

                    this.sorts.push(sort);
                }

            }

        };

        this.registerHeaders = function() {
            var tableElem = document.getElementById(tableid);
            var headers = tableElem.querySelectorAll("[" + colcontrolAttribute +
                "]");

            for (var i = 0; i < headers.length; i++) {
                var header = headers[i];

                this.registerHeader(header);
            }
        };

        this.registerHeader = function(header) {
            var title = header.innerHTML;

            var table = this;

            header.addEventListener("dblclick", function() {

                var childNode = this.childNodes[0];

                if (childNode.nodeType == 3) {

                    if (this.querySelector("input") !== null) {
                        // this.innerHTML = title;
                        table.removeFilterControls(this);

                        table.resetPageNum();

                        table.reloadApi(table.pageNum);

                        return;
                    }

                    var select = document.createElement("select");
                    table.addFilterToElement(select, this);

                    var input = document.createElement("input");
                    input.setAttribute("type", "text");
                    input.setAttribute("value", "");
                    input.style.width = this.offsetWidth + "px";

                    // this.removeChild(this.childNodes[0]);
                    this.appendChild(document.createElement("br"));
                    this.appendChild(select);
                    this.appendChild(input);
                }
            });

            header.addEventListener("keyup", function(event) {
                if (event.keyCode === 13) {
                    var currentvalue = this.querySelector("input").value;

                    if (currentvalue == "") {
                        // this.innerHTML = title;
                        table.removeFilterControls(this);
                    }

                    table.resetPageNum();

                    table.reloadApi(table.pageNum);

                }
            });

        };

        this.removeFilterControls = function(elem) {
            var br = elem.querySelector("br");
            var select = elem.querySelector("select");
            var input = elem.querySelector("input");

            elem.removeChild(br);
            elem.removeChild(select);
            elem.removeChild(input);
        };

        this.resetPageNum = function() {
            this.pageNum = 1;
            this.pageNumNode.value = 1;
        };

        this.addFilterToElement = function(select, node) {

            var datatype = node.getAttribute("snb-datatype");

            var textArr = [];
            var valueArr = [];

            if (datatype === "number") {
                textArr = ["=", ">", ">=", "<", "<="];
                valueArr = ["equal", ">", ">=", "<", "<="];
            } else {
                textArr = ["=", "like"];
                valueArr = ["equal", "like"];
            }

            for (var i = 0; i < textArr.length; i++) {
                var option = document.createElement("option");
                option.text = textArr[i];
                option.value = valueArr[i];
                select.appendChild(option);
            }

        };

        this.registerRecordPerPage = function() {
            var table = this;

            this.recordPerPageNode.addEventListener("change", function() {
                table.resetPageNum();
                table.reloadApi(table.pageNum);
            });
        };

        this.registerPrevPagination = function() {

            var parentNode = this.tableNode.parentNode;

            var prevPagination = parentNode.querySelector(prevPaginationClass);

            var table = this;

            prevPagination.addEventListener("click", function() {
                var currentPageNode = parentNode
                    .querySelector(curPagePaginationClass);
                var currentPage = currentPageNode.value;

                if (currentPage > 1) {
                    var pageNum = currentPage - 1;

                    currentPageNode.value = pageNum;

                    table.reloadApi(pageNum);
                }

            });

        };

        this.registerNextPagination = function() {
            var parentNode = this.tableNode.parentNode;

            var nextPagination = parentNode.querySelector(nextPaginationClass);

            var table = this;

            nextPagination.addEventListener("click", function() {
                var currentPageNode = parentNode
                    .querySelector(curPagePaginationClass);
                var currentPage = Number(currentPageNode.value);

                if (currentPage < table.pageTotal) {
                    var pageNum = currentPage + 1;
                    currentPageNode.value = pageNum;

                    table.reloadApi(pageNum);
                }
            });
        };

        this.registerCurrentPageEvent = function() {
            var parentNode = this.tableNode.parentNode;

            var currentPageNode = parentNode
                .querySelector(curPagePaginationClass);

            var table = this;
            currentPageNode.addEventListener("keyup", function(event) {
                if (event.keyCode === 13) {
                    var curPageNum = Number(currentPageNode.value);

                    if (curPageNum > 0 && curPageNum <= table.pageTotal) {
                        table.reloadApi(curPageNum);
                    }
                }
            });

        };

        this.registerPagination();

        this.registerPrevPagination();
        this.registerNextPagination();
        this.registerCurrentPageEvent();
        this.registerRecordPerPage();

        this.viewDetailPanelId = "";

        // public instance method
        this.renderTable = function(list, callback, options) {


            var table = this;
            var containerNodeValue = this.tableNode
                .getAttribute("snb-datalist-node");


            // if (childNode) {
            // 	table.sampleNode = childNode;
            // }

            table.clear();

            var childNode = this.tableNode
                .querySelector("[snb-datalist-parent=" + containerNodeValue +
                    "]");

            if (childNode) {
                table.tableNode.removeChild(childNode);
            }
            childNode = table.sampleNode;
            var currentlength = 0;
            if (options && options.hasOwnProperty('lazyload') && options.lazyload == true) {
                var lazyloadSplitDataLength = (options.hasOwnProperty('lazyloadSplitDataLength')) ? options.lazyloadSplitDataLength : 20;
                var lazySplitDataInterval = (options.hasOwnProperty('lazySplitDataInterval')) ? options.lazySplitDataInterval : 20;

                table.insertListInterval = setInterval(function() {
                    var listData;
                    if (list.length < lazyloadSplitDataLength) {
                        listData = list;
                        list = [];
                    } else {
                        listData = list.splice(0, lazyloadSplitDataLength);
                    }
                    currentlength += listData.length;
                    table.renderTableListData(listData, childNode, options);

                    if (list.length == 0) {
                        clearInterval(table.insertListInterval);
                    }

                }, lazySplitDataInterval);

            } else {

                table.renderTableListData(list, childNode);
            }

            if (list.length == 0) {
                table.tableNode.innerHTML = '<i>Chưa có dữ liệu</i>';
            }

            // this.updatePageTotal();

            if (typeof callback === 'function') {
                callback();
            }

        };

        this.renderTableListData = function(list, childNode, options) {
            for (var i = 0; i < list.length; i++) {
                var clonedNode = childNode.cloneNode(true);
                var json = list[i];
                clonedNode.setAttribute("rowid", i);
                shinobi.mapping.renderElement(clonedNode, json);
                if (options && options.hasOwnProperty('insertType')) {
                    if (options['insertType'] == 'start') {
                        this.tableNode.insertBefore(clonedNode, this.tableNode.firstElementChild);
                    } else {
                        this.tableNode.appendChild(clonedNode);
                    }
                } else {
                    this.tableNode.appendChild(clonedNode);
                }
            }
        };

        this.initLoadApi = function(url, request, callback) {
            if (this.tableNode.tagName == 'TBODY') {
                this.loadingContainer = this.tableContainerNode;
            } else {
                this.loadingContainer = this.tableNode;
            }
            this.loadingContainer.classList.add('snb-datalist-item-container');
            var table = this;
            request.pageNum = 1;

            this.filters = this.filters.concat(this.staticfilters);
            this.sorts = this.sorts.concat(this.staticsorts);

            request.filters = this.filters;
            request.sorts = this.sorts;

            if (this.paramsList != '') {

                request.paramsList = this.paramsList;
            }

            table.loading();

            shinobi.api.request(url, JSON.stringify(request), function(data) {
                var content = JSON.parse(data);

                var tableContent = content.data;

                table.url = url;
                table.rowTotal = content.rowTotal;
                table.pageNum = content.pageNum;
                table.recordPerPage = content.recordPerPage;
                table.pageTotal = content.pageTotal;
                table.tableRows = tableContent;

                table.loaded();

                table.renderTable(tableContent, callback);

                table.updatePagination(data);
            });
        };

        this.reloadApi = function(pageNum, callback) {

            var table = this;

            this.getTableFilters();
            this.getSorts();
            this.recordPerPage = this.recordPerPageNode.value;

            var request = {};
            request.recordPerPage = this.recordPerPage;
            request.pageNum = (pageNum) ? pageNum : this.pageNum;
            request.filters = this.filters;
            request.sorts = this.sorts;

            if (this.paramsList != '') {

                request.paramsList = this.paramsList;
            }
            // add loading animation when call api
            // table.clear();
            table.loading();
            shinobi.api.request(this.url, JSON.stringify(request), function(
                data) {
                var content = JSON.parse(data);
                var tableContent = content.data;
                table.rowTotal = content.rowTotal;
                table.pageNum = content.pageNum;
                table.recordPerPage = content.recordPerPage;
                table.pageTotal = content.pageTotal;
                table.tableRows = tableContent;

                if (table.pageNum <= table.pageTotal ||
                    (table.pageTotal == 0 && table.pageNum == 1)) {
                    table.loaded();
                    table.renderTable(tableContent, callback);

                    table.updatePagination(data);

                } else {
                    table.reloadApi(table.pageTotal);
                }

            });
        };

        this.loading = function() {
            if (this.sampleNode != '') {
                this.sampleNode.classList.add('is-hidden');
            }

            this.changeState('loading');
        };
        this.loaded = function() {
            if (this.sampleNode != '') {
                this.sampleNode.classList.remove('is-hidden');
            }
            this.changeState('loaded');
        };

        this.changeState = function(action) {
            var buttonPrimary = document.querySelector('.button.is-primary');
            var primaryColor = (buttonPrimary) ? shinobi.util.getComputedProperty(buttonPrimary, 'background-color') : '#555';
            var style = document.createElement('style');
            style.setAttribute('class', 'table-node-loading-inline-style');
            style.innerHTML = `.is-borderless{
				border: none;
			}
			@-webkit-keyframes spin {
				0% {
					-webkit-transform: rotate(0deg);
				}
		
				100% {
					-webkit-transform: rotate(360deg);
				}
			}
		
			@keyframes spin {
				0% {
					transform: rotate(0deg);
				}
		
				100% {
					transform: rotate(360deg);
				}
			}
		
			.snb-datalist-item-container.is-loading {
				position: relative;
				min-height: 5rem;
			}
		
			.snb-datalist-item-container.is-loading::before {
				position: absolute;
				content: '';
				width: 100%;
				height: 100%;
				background: #ddd;
				z-index: 1;
				opacity: 0.3;
			}
		
			.snb-datalist-item-container.is-loading::after {
				position: absolute;
				content: '';
				border: 7px solid white;
				border-radius: 50%;
				border-top: 7px solid ${primaryColor};
				width: 4rem;
				height: 4rem;
				-webkit-animation: spin 2s linear infinite;
				animation: spin 1s linear infinite;
				left: calc(48% - 8px);
				top: calc(48% - 8px);
				z-index: 2;
			}
			`;

            var table = this;
            // var listClass = ['button', 'is-loading', 'is-primary',
            // 	'is-borderless', 'is-outlined'];
            table.tableNode.appendChild(style);
            if (action == 'loading') {
                table.loadingContainer.classList
                    .add('is-loading');
            } else {
                table.loadingContainer.classList
                    .remove('is-loading');
            }
            // listClass.forEach(function (classItem) {

            // 	(action == 'loading') ? table.tableNode.classList
            // 		.add(classItem) : table.tableNode.classList
            // 			.remove(classItem);
            // });

        };

        // public instance method
        this.clear = function() {

            clearInterval(this.insertListInterval);

            var node = this.tableNode;
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }

            node.appendChild(this.sampleNode);

        };

        this.updatePageTotal = function() {

            var parentNode = this.tableNode.parentNode;
            var pageTotalNode = parentNode.querySelector(pageTotalClass);

            pageTotalNode.innerHTML = this.pageTotal;

            if (this.pageNum > this.pageTotal) {
                this.pageNum = this.pageTotal;

                var pageNumNode = parentNode
                    .querySelector(curPagePaginationClass);
                pageNumNode.value = this.pageNum;
            }
        }

        // public instance method
        this.getRowObject = function(rowid) {
            return this.tableRows[rowid];
        };

        this.getTableFilters = function() {
            var table = document.getElementById(tableid);
            var headerFilters = table
                .querySelectorAll("[snb-header-control] > input");

            this.filters = [];

            this.filters = this.filters.concat(this.staticfilters);

            this.pageNum = 1;

            for (var i = 0; i < headerFilters.length; i++) {
                var inputElem = headerFilters[i];
                var currentvalue = inputElem.value;
                var parentNode = inputElem.parentNode;

                var select = parentNode.querySelector("select");
                var operator = select.options[select.selectedIndex].value;

                var filter = {};
                filter.colname = parentNode.getAttribute(colnameAttribute);
                filter.operator = operator;
                filter.value = currentvalue;

                if (currentvalue !== "") {
                    this.filters.push(filter);
                }

            }

        };

        // public instance method
        this.viewDetailRender = function(cell, rowindex, colindex, tableRows) {
            var button = document.createElement("a");
            button.setAttribute("class", "button is-small");
            button.innerHTML = "<span class='icon'> <i class='fa fa-search'></i></span>";
            cell.appendChild(button);

            var rowid = cell.getAttribute("rowid");

            var rowNode = cell.parentNode;

            var viewDetailPanelId = rowNode.getAttribute(detailIdKey);

            var rowObject = tableRows[rowid];

            button.addEventListener("click", function() {

                shinobi.mapping.render("#" + viewDetailPanelId, JSON
                    .stringify(rowObject));

            });
        }; // end viewDetailRender

    }; // end constructor

    // public static method
    constructor.staticmethod = {
        'hello': function() {

        }
    }

    return constructor;
})();shinobi.dynamicchart = (function () {

	// systax map data #{{key-json}}

	var constructor = function (chartId, options) {

		this.options = options;
		this.configChartId = '';
		this.chartId = chartId;
		this.isLoadChartData = false;
		this.chartData = {};
		this.isLoadConfigData = false;
		this.structureContent = {};
		this.chartStructure = "";
		this.chartStructureContent = {};
		this.configData = {};
		this.callback = '';
		this.chartRenderObject = {
			credits: {
				enabled: false
			},
		};

		this.loadOptions = function () {

			if (this.options.configChartId) {
				this.configChartId = this.options.configChartId;
			}

			if (this.options.callback) {
				this.callback = this.options.callback;
			}

			this.loadDataChart();

		};

		this.loadDataChart = function () {

			var chart = this;

			if (this.options.getData) {
				this.isLoadChartData = false;
				var url = this.options.getData.url;
				var request = JSON.stringify(this.options.getData.request);
				var callback = this.options.getData.callback;
				shinobi.api.request(url, request, function (response) {

					callback(response, function (chartData) {

						chart.isLoadChartData = true;
						chart.chartData = chartData;
					});

				});

			}

			this.loadConfigChart();

		};

		this.loadConfigChart = function () {

			var chart = this;
			var options = this.options;

			if (options.getConfig) {

				var loadConfigChartInterval = setInterval(
					function () {

						if (chart.isLoadChartData == true) {

							clearInterval(loadConfigChartInterval);

							chart.isLoadConfigData = false;
							var url = options.getConfig.url;
							var request = JSON
								.stringify(options.getConfig.request);
							var callback = options.getConfig.callback;
							shinobi.cacheapi
								.request(
									url,
									request,
									function (response) {

										// callback(response,
										// function(configData) {
										//
										// chart.isLoadConfigData =
										// true;
										// chart.configData =
										// configData;
										// });

										callback(
											response,
											function (
												structureContent) {

												chart.isLoadConfigData = true;
												chart.structureContent = structureContent;
											});

									});
						}

					}, 100);

			}

			this.renderChart();

		};

		this.renderChart = function () {

			var chart = this;

			var renderChartInterval = setInterval(function () {

				if (chart.isLoadChartData == true
					&& chart.isLoadConfigData == true) {

					clearInterval(renderChartInterval);

					chart.buildRenderChartObject();

					chart.reRender();

					if (typeof chart.createChartCallback == 'function') {

						chart.createChartCallback();
					}

				}
			}, 100);

		};

		this.reRender = function () {

			var chart = this;

			Highcharts.chart(chart.chartId, chart.chartRenderObject);

		};

		this.buildRenderChartObject = function () {

			var chart = this;

			this.chartStructure = this.structureContent['charttemplatecontent'];
			this.chartStructureContent = JSON
				.parse(this.structureContent['chartdetailcontent']);

			this.configData = this.chartStructure;

			this.fillStructureContent();

			chart.fillConfigAttributeValue();

			chart.fillRenderObjectConfigAttribute();

		};

		this.convertStringFunctionToFuntion = function (data) {

			var chart = this;

			var entries = Object.entries(data);

			for (var i = 0; i < entries.length; i++) {

				var key = entries[i][0];
				var value = entries[i][1];

				if (typeof value == 'object') {
					data[key] = chart.convertStringFunctionToFuntion(value);
				} else {

					if (typeof value == 'string'
						&& value.indexOf("function()") > -1)
						data[key] = eval("(" + value + ")");
				}

			}

			return data;

		};

		this.fillStructureContent = function () {

			var chart = this;

			// this.fillAttributeValue(chart.configData);

			var matchRegex = /\@{{.*?\}}/g;
			var replaceRegex = /[@{{}}]/g;

			var listMatch = chart.configData.match(matchRegex);
			if (listMatch) {

				for (var j = 0; j < listMatch.length; j++) {

					var mappingValueKey = listMatch[j]
						.replace(replaceRegex, "");

					var mappingValue = chart.chartStructureContent[mappingValueKey];

					mappingValue = chart.getMappingValue(mappingValue);

					chart.configData = chart.configData.replace(new RegExp(
						listMatch[j], 'g'), mappingValue);

				}
			}

		};

		this.fillConfigAttributeValue = function () {

			var chart = this;

			// this.fillAttributeValue(chart.configData);

			var matchRegex = /\#{{.*?\}}/g;
			var replaceRegex = /[#{{}}]/g;

			var listMatch = chart.configData.match(matchRegex);
			if (listMatch) {

				for (var j = 0; j < listMatch.length; j++) {

					var mappingValueKey = listMatch[j]
						.replace(replaceRegex, "");

					var mappingValue = chart.chartData[mappingValueKey];

					mappingValue = chart.getMappingValue(mappingValue);

					chart.configData = chart.configData.replace(new RegExp(
						listMatch[j], 'g'), mappingValue);

				}
			}

		};

		this.getMappingValue = function (input) {

			var mappingValueType = typeof input;
			var result;

			switch (mappingValueType) {

				case 'string':
					result = '\"' + input + '\"';
					break;
				case 'object':
					result = JSON.stringify(input);
					break;
				default:
					break;
			}

			return result;
		};

		this.fillAttributeValue = function (object) {

			var chart = this;

			if (typeof object == 'object') {

				var entries = Object.entries(object);

				for (var i = 0; i < entries.length; i++) {

					var key = entries[i][0];
					var value = entries[i][1];
					var typeValue = typeof value;

					switch (typeValue) {

						case 'object':
							chart.fillAttributeValue(object[key]);
							break;

						case 'string':

							var matchRegex = /\#{{.*?\}}/g;
							var replaceRegex = /[#{{}}]/g;

							var listMatch = value.match(matchRegex);

							if (listMatch && listMatch.length == 1
								&& value == listMatch[0]) {

								var mappingValueKey = listMatch[0].replace(
									replaceRegex, "");

								object[key] = chart.chartData[mappingValueKey];
							} else if (listMatch) {

								for (var j = 0; j < listMatch.length; j++) {

									mappingValueKey = listMatch[j].replace(
										replaceRegex, "");

									var mappingValue = chart.chartData[mappingValueKey];

									value = value.replace(new RegExp(listMatch[j],
										'g'), mappingValue);

									object[key] = value;
								}
							}

							break;

						default:
							break;
					}
				}

			}

		};

		this.fillRenderObjectConfigAttribute = function () {

			var data = JSON.parse(this.configData);

			var fullChartConfig = this.convertStringFunctionToFuntion(data)

			var entries = Object.entries(fullChartConfig);

			for (var i = 0; i < entries.length; i++) {

				this.chartRenderObject[entries[i][0]] = entries[i][1];

			}

			// this
			// .convertStringFunctionToFuntion(
			// data,
			// function(fullChartConfig) {
			//
			// var entries = Object.entries(fullChartConfig);
			//
			// // var entries =
			// // Object.entries(this.configData);
			//
			// for (var i = 0; i < entries.length; i++) {
			//
			// this.chartRenderObject[entries[i][0]] = entries[i][1];
			//
			// }
			// });

		};

		this.createChart = function (callback) {
			this.loadOptions();

			this.createChartCallback = callback;

		};

	};

	return constructor;
})();var publicAccountLink = '/page/account/';
var ratingDetailLink = '/page/ratingdetail/';
var blogPostPageUrl = '/page/blogpost/';
var adminPostCheckPageUrl = '/system/adminpostcheckdetail/';
var beginDateDatalist = '2019-01-01';
var endDateDatalist = '2100-01-01';
var blogIconImageLink = '/static/image/blogicon.svg';
var copyTradeIconImageLink = '/static/image/copytradeicon.svg';
var aladinLogo = '/static/image/aladin.svg';
var groupAvatar = 'https://image.aladin.finance/aladin.finance.public.file/517da259fc9feb05f65994fb850f09e4/groupchatavatar.png';
var format = function (value) {
	return Number(value).format(0, 3, ',', '.');
};
var formatInputTagDatalist = function (elem, value) {
	elem.value = format(value);
};
var formatNumberTable = function (cell, row, col, allData) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	formatInputTagDatalist(cell, value);
};
var cancelModal = function (id) {
	var modal = document.getElementById(id);
	modal.classList.remove('is-active');
};
var renderPriceOrderTable = function (cell, row, col) {
};
var renderRoomAvatarDataList = function (elem, value) {
	if (value.trim() == '') {
		elem.setAttribute('src', groupAvatar);
	} else {
		elem.setAttribute('src', value);
	}
};
var getCheckBoxList = function (elem) {
	var key = elem.getAttribute('snb-key');
	var attr = elem.getAttribute('snb-value-attr');
	var listCheckBox = document.querySelectorAll('[snb-key=' + key + ']');
	var result = [];
	for (var i = 0; i < listCheckBox.length; i++) {
		if (listCheckBox[i].checked
			&& listCheckBox[i].getAttribute('type') == 'checkbox') {
			result.push(listCheckBox[i].getAttribute(attr));
		}
	}
	return result.toString();
};
var getNation = function (elem) {
	var select = elem.getElementsByTagName('select')[0];
	return select.value;
};
var renderProvinceList = function (id, callback) {
	var container = document.getElementById(id);
	shinobi.aladinUtil.removeAllChild(container);
	var request = {};
	shinobi.api.request("/api/VietNamLocationNameApi/getAllVietNamProvince",
		JSON.stringify(request), function (response) {
			var jsonArr = JSON.parse(response);
			for (var i = 0; i < jsonArr.length; i++) {
				var option = document.createElement("option");
				option.setAttribute('value', jsonArr[i].provinceid);
				option.innerHTML = jsonArr[i].provincename;
				container.appendChild(option);
			}
			container.value = '79';
			if (typeof callback == 'function') {
				callback();
			}
		});
	return container;
};
var getCheckRadio = function (elem) {
	var attr = elem.getAttribute('snb-value-attr');
	if (elem.checked) {
		return elem.getAttribute(attr);
	}
};
var removeAllChild = function (elem, callback) {
	while (elem.firstChild) {
		elem.removeChild(elem.firstChild);
	}
	if (callback) {
		callback();
	}
};
var getAllUserInfo = function (request, callback) {
	var key = request.username.toString();
	if (!shinobi.global) {
		shinobi.global = {};
	}
	if (!shinobi.global.getAllUserInfo) {
		shinobi.global.getAllUserInfo = {};
	}
	if (!shinobi.global.getAllUserInfo[key]) {
		if (shinobi.global.getAllUserInfo[key] == false) {
			setTimeout(function () {
				getAllUserInfo(request, callback);
			}, 10);
		} else {
			shinobi.global.getAllUserInfo[key] = false;
			shinobi.api.request('/api/UserApi/getAllUserInfo', JSON
				.stringify(request), function (response) {
					shinobi.global.getAllUserInfo[key] = response;
					callback(response);
				})
		}
	} else {
		callback(shinobi.global.getAllUserInfo[key]);
	}
};
var displayResultSelect = function (selectId) {
	var x = document.getElementById(selectId);
	var txt = [];
	var i;
	for (i = 0; i < x.length; i++) {
		txt.push(x.options[i].value);
	}
	return txt;
}
var customRecordPerPagePagination = function (container, recordNum) {
	var selectRecordNum = container
		.getElementsByClassName('shinobi-recordperpage')[0];
	var listOptionSelect = selectRecordNum.getElementsByTagName('option');
	for (var i = 0; i < listOptionSelect.length; i++) {
		var j = parseInt(i) + 1;
		var currentPageNum = j * recordNum;
		listOptionSelect[i].innerHTML = currentPageNum;
		listOptionSelect[i].value = currentPageNum;
	}
};
var renderStockCompanyDeleteStaffButton = function (elem, value) {
	var id = value;
	var userName = elem.querySelectorAll('[snb-key=username]')[0].innerHTML;
	var loggedUserName = window.localStorage.getItem('loggedUserName');
	if (userName == loggedUserName) {
		elem.innerHTML = '';
	} else {
		elem.onclick = function () {
			er
				.confirm(function () {
					var request = {};
					request.id = id;
					shinobi.api
						.request(
							'/authenapi/StockComStaffManagementApi/deleteStaffFromGroup',
							JSON.stringify(request),
							function (response) {
								if (response == 'update success') {
									shinobi.notification.notification
										.info('Cập nhật thành công');
									elem.parentNode.remove();
								}
							});
				});
		}
	}
};
var gotoPublicPage = function (elem, data) {
	if (data.homepageurl) {
		var accountLink = publicAccountLink + data.homepageurl;
		elem.classList.add('has-redirect');
		elem.onclick = function () {
			window.location.href = accountLink;
		}
	}
};
var renderHasFee = function (cell, rowIndex, colIndex, allData) {
	var rowData = allData[rowIndex];
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var cellContent = '';
	// check data has post amount attribute
	if (value == 'false') {
		cellContent = shinobi.language.free;
	} else {
		if (rowData.hasOwnProperty('feeamount') == true) {
			cellContent = shinobi.aladinUtil
				.formatNumberValue(rowData.feeamount)
				+ ' đ';
		} else {
			cellContent = 'Có phí';
		}
	}
	cell.innerHTML = cellContent;
};
var renderPostType = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var cellContent = '';
	cellContent = shinobi.aladinUtil.convertPostTypeToVn(value);
	cell.innerHTML = cellContent;
};
var renderFullName = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var cellContent = '';
	cellContent = value;
	cell.innerHTML = cellContent;
};
var renderFirstNameLastName = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	removeAllChild(cell, function () {
		buildFirstNameLastNameDatalist(cell, value);
	});
};
var renderStockCompanyTreeTable = function (elem, value) {
	var level = value;
	var classLevel = 'level-' + level;
	elem.classList.add(classLevel);
	if (level == 1) {
		elem.parentNode.parentNode.parentNode.classList.remove('is-hidden');
	}
	var openButton = elem.parentNode.getElementsByClassName('open-button')[0];
	var closeButton = elem.parentNode.getElementsByClassName('close-button')[0];
	if (level == 2) {
		openButton.classList.add('is-hidden');
		closeButton.classList.add('is-hidden');
	}
	var tBody = document.getElementById('dataTable');
	openButton.onclick = function () {
		var childrenId = this.getAttribute('childrenid');
		this.classList.add('is-hidden');
		closeButton.classList.remove('is-hidden');
		var listChildren = tBody.querySelectorAll('[snb-key=parentid]');
		for (var i = 0; i < listChildren.length; i++) {
			if (listChildren[i].innerHTML == childrenId) {
				listChildren[i].parentNode.classList.remove('is-hidden');
			}
		}
	}
	closeButton.onclick = function () {
		var childrenId = this.getAttribute('childrenid');
		this.classList.add('is-hidden');
		openButton.classList.remove('is-hidden');
		var listChildren = tBody.querySelectorAll('[snb-key=parentid]');
		for (var i = 0; i < listChildren.length; i++) {
			if (listChildren[i].innerHTML == childrenId) {
				listChildren[i].parentNode.classList.add('is-hidden');
				var childrenCloseButton = listChildren[i].parentNode
					.getElementsByClassName('close-button')[0];
				childrenCloseButton.click();
				var childrenOpenButton = listChildren[i].parentNode
					.getElementsByClassName('open-button')[0];
				childrenOpenButton.classList.add('is-hidden');
			}
		}
	}
};
var renderStockCompanyTraderRegistrationInfo = function (elem, value) {
	var data = JSON.parse(value);
	var key = elem.getAttribute('snb-key-subkey');
	if (data[key]) {
		elem.innerHTML = data[key];
	}
};
var renderPostTitle = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var rowData = allData[rowIndex];
	var a = document.createElement('a');
	a.setAttribute('class', 'has-link');
	a.innerHTML = value;
	cell.appendChild(a);
	if (rowData.hasOwnProperty('posturl')) {
		a.setAttribute('href', rowData.posturl);
	}
};
var renderCheckRadio = function (elem, value) {
	var attr = elem.getAttribute('snb-value-attr');
	var checkedElem = document.querySelectorAll('[' + attr + '=' + value + ']')[0];
	checkedElem.checked = true;
};
var seenDetailOpenAccountForm = function (elem, value) {
	elem.onclick = function () {
		shinobi.stockcomrealaccountregistrationrender
			.getDetailData(
				value,
				function (data) {
					var openAccountDetailModal = document
						.getElementById('openAccountDetailModal');
					openAccountDetailModal.classList.add('is-active');
					shinobi.mapping.render('#openAccountDetailModal',
						JSON.stringify(data));
					document
						.getElementById('acceptPoliciesOpenTradingAccount').checked = true;
				});
	}
};
var renderCheckBoxList = function (elem, value) {
	var attr = elem.getAttribute('snb-value-attr');
	var listChecked = value.split(',');
	for (var i = 0; i < listChecked.length; i++) {
		var checkedElem = document.querySelectorAll('[' + attr + '='
			+ listChecked[i] + ']')[0];
		checkedElem.checked = true;
	}
};
var renderNation = function (elem, value) {
	var select = elem.getElementsByTagName('select')[0];
	select.value = value;
};
var removeOpenAccountFormButton = function (elem, value) {
	elem.onclick = function () {
		shinobi.stockcomrealaccountregistrationrender
			.showConfirmRemoveModal(function (statuscomment) {
				shinobi.stockcomrealaccountregistrationrender
					.sendRequestUpdate(elem, value, 'FAIL',
						statuscomment);
			});
	}
};
var acceptOpenAccountFormButton = function (elem, value) {
	elem.onclick = function () {
		er.confirm(function () {
			shinobi.stockcomrealaccountregistrationrender.sendRequestUpdate(
				elem, value, 'FINISHED', '');
		});
	}
};
var renderDate = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var contentCell = shinobi.aladinUtil.getFormatDate(value, 'dd-mm-yyyy');
	cell.setAttribute('class', 'date-time');
	cell.innerHTML = contentCell;
};
var renderFormatDate = function (elem, value) {
	var format = elem.getAttribute('snb-format');
	var contentCell = shinobi.aladinUtil.getFormatDate(value, format);
	elem.classList.add('date-time');
	elem.innerHTML = contentCell;
};
var renderDateTime = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var contentCell = shinobi.aladinUtil.getFormatDate(value,
		'dd-mm-yyyy hh:mm');
	cell.setAttribute('class', 'date-time');
	cell.innerHTML = contentCell;
};
var getExpiredDate = function (elem, value) {
	var returnContent = shinobi.aladinUtil.remainDateWithCurrentDate(value);
	return returnContent;
};
var renderJoinDateDatalist = function (elem, value) {
	elem.innerHTML = getExpiredDate(elem, value);
};
var renderExpireddateDatalist = function (elem, value) {
	if (value) {
		elem.innerHTML = '<p>Còn ' + getExpiredDate(elem, value)
			+ ' ngày nữa</p>';
	} else {
		elem.innerHTML = 'Dịch vụ miễn phí ';
	}
};
var convertRatingPointToStar = function (elem, value) {
	elem.innerHTML = value / 2;
};
var buildRating = function (elem, value) {
	elem.classList.add('is-flex');
	value = value / 2;
	var starIconHtmlString = '<span class="icon is-small has-text-warning"><i class="fas fa-star"></i></span>';
	var noneStarIconHtmlString = '<span class="icon is-small has-text-light"><i class="fas fa-star"></i></span>';
	var numberRating = value;
	if (value > 5) {
		numberRating = 5;
	}
	if (value < 0 || value == 0) {
		numberRating = 0;
	}
	var contentRating = '';
	for (var i = 0; i < numberRating; i++) {
		contentRating += starIconHtmlString;
	}
	for (var j = 0; j < (5 - numberRating); j++) {
		contentRating += noneStarIconHtmlString;
	}
	elem.innerHTML = contentRating;
};
var convertFequency = function (value) {
	var elemContent;
	switch (value) {
		case 'MONTHLY':
			elemContent = '1 Tháng';
			break;
		case 'QUATERLY':
			elemContent = '3 Tháng';
			break;
		case 'HALF_YEAR':
			elemContent = '6 Tháng';
			break;
		case 'ANNUALLY':
			elemContent = '12 Tháng';
			break;
		default:
			break;
	}
	return elemContent;
};
var renderFequencyDatalist = function (elem, value) {
	var elemContent = convertFequency(value);
	elem.innerHTML = elemContent;
};
var renderInfoButton = function (elem, value) {
	var a = document.createElement('a');
	a.setAttribute('class', 'button is-info is-small ');
	a.innerHTML = value;
	elem.appendChild(a);
};
var addUserOriginLogo = function (elem, data) {
	if (data.userorigin
		&& !elem.parentNode.parentNode.querySelector('.table-logo')
		&& data.userorigin != 'ALADIN_MEMBER'
		&& data.isshoworiginavatar == true) {
		var url = aladinLogo;
		var p = document.createElement('p');
		p.setAttribute('class', 'stock-company-image ');
		elem.parentNode.appendChild(p);
		elem.parentNode.classList.add('stock-company-chat-avatar-container');
		var img = document.createElement('img');
		p.appendChild(img);
		img.setAttribute('class', 'table-logo');
		switch (data.userorigin) {
			case 'DAS_STOCK_COMPANY':
				url = '/static/image/daslogo.png';
				break;
			default:
				break;
		}
		img.setAttribute('src', url);
	}
};
var buildAvatarDatalist = function (elem, value) {
	var p = document.createElement('p');
	if (elem.parentElement) {
		elem.parentElement.insertBefore(p, elem);
		p.appendChild(elem);
	}
	if (value == 'system') {
		elem.setAttribute('src', '/static/image/aladin.svg');
	} else {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api
		// .request(
		// '/api/UserApi/getAllUserInfo',
		// JSON.stringify(request),
		// function(response) {
		getAllUserInfo(
			request,
			function (response) {
				data = JSON.parse(response);
				if (data.avatarlink) {
					value = data.avatarlink;
				} else {
					value = 'https://image.aladin.finance/aladin.finance.public.file/517da259fc9feb05f65994fb850f09e4/useravatar.jpg';
				}
				elem.parentNode.classList.add('has-text-centered');
				elem.setAttribute('src', value);
				elem.setAttribute('title', data.firstname + ' '
					+ data.lastname);
				addUserOriginLogo(elem, data);
				gotoPublicPage(elem, data);
			});
	}
};
var getHeaderRenderKey = function (cell, row, col) {
	var table = cell.parentElement.parentElement.parentElement;
	var header = table.getElementsByTagName('thead')[0];
	if (header) {
		var headerCell = header.rows[0].cells[col];
		if (headerCell.hasAttribute('snb-colname')) {
			return headerCell.getAttribute('snb-colname');
		} else {
			return null;
		}
	} else {
		return null;
	}
};
var buildNickIdTable = function (cell, row, col, all) {
	var key = getHeaderRenderKey(cell, row, col);
	cell.innerHTML = '<div snb-key="' + key
		+ '" snb-render="buildNickIdDatalist"></div>';
	shinobi.mapping.renderElement(cell, all[row]);
};
var buildConnectButton = function (cell, rowIndex, colIndex, allData) {
	var currentData = allData[rowIndex];
	var a = document.createElement('a');
	a.setAttribute('class', 'button is-link is-small');
	a.innerHTML = 'Tiếp cận';
	shinobi.aladinUtil.removeAllChild(cell);
	cell.appendChild(a);
	shinobi.investorlistingrender.addEventFollowButton(a, currentData.username)
};
var renderCellTable = function (cell, rowIndex, colIndex, allData) {
	shinobi.fragmenttraderfollowerrender
		.renderCellFollowerTable(cell, colIndex);
};
var renderLimitButton = function (cell, rowIndex, colIndex) {
	var customerUsername = cell.innerHTML;
	cell.innerHTML = "";
	shinobi.fragmenttraderfollowerrender.renderLimitButtonFunction(cell,
		rowIndex, colIndex, customerUsername);
};
var formatNumber = function (cell, rowIndex, colIndex) {
	shinobi.aladinUtil.formatNumberRender(cell, rowIndex, colIndex);
};
var buildNickIdDatalist = function (elem, value) {
	if (value != 'system') {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api.request('/api/UserApi/getAllUserInfo',
		// JSON.stringify(request), function(
		// response) {
		getAllUserInfo(
			request,
			function (response) {
				data = JSON.parse(response);
				var chatSpan = document.createElement('span');
				chatSpan
					.setAttribute('class',
						'icon has-text-orange create-public-chat-icon tooltip is-hidden');
				chatSpan.setAttribute('data-tooltip', 'Trò chuyện');
				chatSpan.innerHTML = '<i class="far fa-comment-dots fa-lg"></i>';
				er.buildPublicChat(chatSpan, data.id);
				elem.appendChild(chatSpan);
				var span = document.createElement('span');
				span.classList.add('id-nick-container');
				span.innerHTML = '#' + data.id;
				elem.appendChild(span);
				// gotoPublicPage(elem, data);
			});
	}
};
var buildAvatarDatalistNoHref = function (elem, value) {
	var p = document.createElement('p');
	p.classList.add('margin-right-1rem');
	if (elem.parentElement) {
		elem.parentElement.insertBefore(p, elem);
		p.appendChild(elem);
	}
	if (value == 'system') {
		elem.setAttribute('src', '/static/image/aladin.svg');
	} else {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api
		// .request(
		// '/api/UserApi/getAllUserInfo',
		// JSON.stringify(request),
		// function(response) {
		getAllUserInfo(
			request,
			function (response) {
				data = JSON.parse(response);
				data = JSON.parse(response);
				if (data.avatarlink) {
					value = data.avatarlink;
				} else {
					value = 'https://image.aladin.finance/aladin.finance.public.file/517da259fc9feb05f65994fb850f09e4/useravatar.jpg';
				}
				elem.setAttribute('src', value);
				elem.setAttribute('title', data.firstname + ' '
					+ data.lastname);
				addUserOriginLogo(elem, data);
			});
	}
};
var buildHomePageUrlDatalist = function (elem, value) {
	var userName = value;
	var request = {};
	request.username = userName;
	var data;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		data = JSON.parse(response);
		if (data.homepageurl) {
			var accountLink = publicAccountLink + data.homepageurl;
			elem.innerHTML = window.location.host + accountLink;
			elem.onclick = function () {
				window.location.href = accountLink;
			}
		}
	});
};
var buildFirstNameLastNameDatalist = function (elem, value) {
	if (value != 'system') {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api.request('/api/UserApi/getAllUserInfo',
		// JSON.stringify(request), function(
		// response) {
		getAllUserInfo(request, function (response) {
			data = JSON.parse(response);
			data = JSON.parse(response);
			var fullName = data.firstname + ' ' + data.lastname;
			elem.innerHTML = fullName;
			gotoPublicPage(elem, data);
		});
	}
};
var renderStockCompanyUpgradeRequestCommandButton = function (elem, value) {
	elem.onclick = function () {
		er.confirm(function () {
			var functionApi = elem.getAttribute('snb-function');
			var requestid = value;
			var api = "/authenapi/RequestUpgradeTraderOfStockCompanyApi/"
				+ functionApi;
			var request = {};
			request.requestid = requestid;
			shinobi.api.request(api, JSON.stringify(request),
				function (response) {
					if (response == 'update success') {
						shinobi.notification.notification
							.info('Cập nhật thành công');
						shinobi.stockcomtradersregistrationrender.datalist1
							.reloadApi(1);
					}
				});
		});
	}
};
var renderStockCompanyCustomerManagementButton = function (elem, value) {
	var link = '/private/stockcomtradersmanagementcustomer/' + value;
	elem.setAttribute('href', link);
};
var renderGoToPublicPageDatalist = function (elem, value) {
	var userName = value;
	var request = {};
	request.username = userName;
	var data;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		data = JSON.parse(response);
		gotoPublicPage(elem, data);
	});
};
var buildFirstNameLastNameDatalistNoHref = function (elem, value) {
	var userName = value;
	var request = {};
	request.username = userName;
	var data;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		data = JSON.parse(response);
		var fullName = data.firstname + ' ' + data.lastname;
		elem.innerHTML = fullName;
	});
};
var renderAvatar = function (cell, rowIndex, colIndex) {
	var value = cell.innerHTML;
	removeAllChild(cell, function () {
		var imge = document.createElement('img');
		imge.setAttribute('class', 'table-avatar');
		cell.appendChild(imge);
		buildAvatarDatalist(imge, value);
	});
};
var renderInvestingStrategy = function (elem, value) {
	if (value.trim() == '') {
		elem.innerHTML = 'Hiện chưa có!';
	} else {
		if (value.length > 400) {
			elem.innerHTML = value.slice(0, 400) + '...';
			var a = document.createElement('a');
			a.setAttribute('class', 'local-color');
			a.innerHTML = '[Xem thêm]';
			elem.appendChild(a);
		} else {
			elem.innerHTML = value;
		}
	}
};
var renderInvestingPeriodDataList = function (elem, value) {
	switch (value.trim()) {
		case 'MONTH_1':
			elem.innerHTML = '1 Tháng';
			break;
		case 'MONTH_1_3':
			elem.innerHTML = '1-3 Tháng';
			break;
		case 'MONTH_3_6':
			elem.innerHTML = '3-6 Tháng';
			break;
		case 'MONTH_6_12':
			elem.innerHTML = '6-12 Tháng';
			break;
		case 'YEAR_1_3':
			elem.innerHTML = '1-3 Năm';
			break;
		case 'YEAR_OVER_3':
			elem.innerHTML = 'Hơn 3 Năm';
			break;
		default:
			break;
	}
};
var renderInvestingPeriod = function (cell, rowIndex, colIndex) {
	var value = cell.innerHTML;
	removeAllChild(cell);
	renderInvestingPeriodDataList(cell, value);
};
var renderFormatNumber = function (cell, rowIndex, colIndex) {
	cell.innerHTML = Number(cell.innerHTML).format(0, 3, ',', '.');
};
var renderInvestingRisk = function (cell, rowIndex, colIndex) {
	var beginCell = '<div class="level width-50" ><input class="slider slider-width level-item" step="1" min="1" max="10" value="';
	var betweenCell = '" type="range" disabled="disabled"><span class="slider-value-padding level-item"> ';
	var endCell = '/10</span></div>';
	var valueCell = cell.innerHTML;
	cell.innerHTML = beginCell + valueCell + betweenCell + valueCell + endCell;
};
var renderHomePageUrl = function (elem, value) {
	var accountUrl = publicAccountLink + value;
	elem.setAttribute('href', accountUrl);
	elem.innerHTML = window.location.host + accountUrl;
};
var autoRedirectMobile = function () {
	var userAgent = navigator.userAgent || navigator.vendor || window.opera;
	// Windows Phone must come first because its UA also contains
	// "Android"
	if (/android/i.test(userAgent)) {
		window.location.href = "https://play.google.com/store/apps/details?id=com.aladinmobile.aladin";
	}
	// iOS detection from: http://stackoverflow.com/a/9039885/177710
	if (/iPhone|iPod/.test(userAgent) && !window.MSStream) {
		window.location.href = "https://apps.apple.com/app/id1474783146";
	}
};
var setHrefElem = function (elem, link) {
	elem.style.cursor = "pointer";
	var title = elem.innerHTML;
	if (title) {
		elem.setAttribute('title', title.replace(/\s+/g, " "));
	}
	elem.onclick = function () {
		window.location.href = link;
	}
};
var renderHref = function (elem, value, attr) {
	var link = value;
	setHrefElem(elem, link);
};
var renderHrefWithUserType = function (elem, value, attr) {
	var userType = window.localStorage.getItem('loggedUserType');
	var link;
	if (userType == 'stock_com_admin') {
		link = '/private/stockcom' + value;
	} else {
		link = '/private/' + userType + value;
	}
	if (elem.hasAttribute('rs-hidden-with')) {
		var userTypeHidden = elem.getAttribute('rs-hidden-with');
		if (userType == userTypeHidden) {
			elem.classList.add('is-hidden');
		}
	}
	if (elem.hasAttribute('rs-parent-show-with')) {
		var userTypeShow = elem.getAttribute('rs-parent-show-with');
		if (userType == userTypeShow) {
			elem.parentNode.classList.remove('is-hidden');
		}
	}
	setHrefElem(elem, link);
};
var renderDashboardLastOrderAvatar = function (elem, value, attr) {
	var userName;
	if (value == 1 || value == 2) {
		userName = window.localStorage.getItem('loggedUserName');
	} else {
		userName = value;
	}
	buildAvatarDatalist(elem, userName);
};
var renderDashboardLastOrderFullName = function (elem, value) {
	var userName;
	if (value == 1 || value == 2) {
		userName = window.localStorage.getItem('loggedUserName');
	} else {
		userName = value;
	}
	buildFirstNameLastNameDatalist(elem, userName);
};
var renderOrderSideDataList = function (elem, value) {
	var elemContent = '';
	if (value == 'S') {
		elemContent = 'Bán';
	} else {
		elemContent = 'Mua';
	}
	elem.innerHTML = elemContent;
};
var getNumberOfSessionBack = function (rankingtype) {
	var returnValue = 1;
	switch (rankingtype) {
		case 'ONE_DAY':
			returnValue = 1;
			break;
		case 'ONE_WEEK':
			returnValue = 5;
			break;
		case 'ONE_MONTH':
			returnValue = 20;
			break;
		case 'THREE_MONTH':
			returnValue = 60;
			break;
		case 'SIX_MONTH':
			returnValue = 120;
			break;
		case 'ALL_TIME':
			returnValue = 100000;
			break;
		default:
			break;
	}
	return returnValue;
};
var renderChartAnalysisSimpleDatalist = function (elem, value) {
	var userName = value;
	var chartParams = {};
	chartParams.account__0__String = userName;
	chartParams.numberofsessionback__1__int = Number(
		Number(getNumberOfSessionBack(shinobi.investortraderlistingcontentheaderrender.currentTab)) + 1)
		.toString();
	var request = {};
	request.chartParams = chartParams;
	shinobi.api
		.request('/api/AladinChartApi/getChartData/ACCOUNT_ASSET_CHART',
			JSON.stringify(request), function (response) {
				var jsonArr = JSON.parse(response);
				var data = jsonArr;
				var dataChart = shinobi.chartadapter
					.convertDataSimpleChart(data);
				var chart = new shinobi.overviewareachart(elem);
				chart.createOverviewAreaChart(elem, '8rem', '12rem',
					dataChart);
			});
};
var customStylePagination = function (paginationContainer) {
	var pagiContainerParent = paginationContainer.parentNode;
	var style = pagiContainerParent.getAttribute('pagi-style');
	var setRecordContainer = paginationContainer
		.getElementsByClassName('set-pagination-record-number-container')[0];
	switch (style) {
		// case 'mini':
		// setRecordContainer.classList.add('is-hidden');
		// break;
		default:
			break;
	}
};
var renderChexbox = function (cell, row, col, all) {
	var value = cell.innerHTML;
	cell.innerHTML = "";
	var elem = document.createElement('p');
	elem.setAttribute('class', 'has-text-centered');
	if (["PENDING", "PARTIAL_MATCHED"].includes(value)) {
		var checkbox = document.createElement('input');
		checkbox.setAttribute('type', 'checkbox');
		checkbox.setAttribute('snb-key-checkbox', all[row].systemorderid);
		elem.appendChild(checkbox);
		cell.appendChild(elem);
	}
};
var getUserInfo = function (callback) {
	var url = "/authenapi/SystemUserApi/getInfoLogin";
	var request = {};
	shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
		console.log(res);
		res = JSON.parse(res);
		if (callback) {
			callback(res);
		}
	});
};
var getUserInfoNotCache = function (callback) {
	var url = "/authenapi/SystemUserApi/getInfoLogin";
	var request = {};
	shinobi.capi.request(url, JSON.stringify(request), function (res) {
		console.log(res);
		res = JSON.parse(res);
		if (callback) {
			callback(res);
		}
	});
};
var getRecordNumber = function (paginationContainerId) {
	var containerId;
	var paginationContainer;
	if (paginationContainerId) {
		var container = document.getElementById(paginationContainerId);
		paginationContainer = container.nextElementSibling
			.getElementsByClassName('table-pagination')[0];
	} else {
		containerId = 'table-pagination';
		paginationContainer = document.getElementById(containerId);
	}
	var parentNodePaginationContainer = paginationContainer.parentNode;
	var recordNum;
	var recodeNumAttr = 'record-num';
	if (parentNodePaginationContainer.hasAttribute(recodeNumAttr)) {
		recordNum = parentNodePaginationContainer.getAttribute(recodeNumAttr);
	} else {
		var recordNumSelect = paginationContainer
			.getElementsByClassName('shinobi-recordperpage')[0];
		recordNum = recordNumSelect.value;
	}
	customRecordPerPagePagination(paginationContainer, recordNum);
	customStylePagination(paginationContainer);
	return recordNum;
};
var setHrefHomePageUrl = function (elem, homePageUrl) {
	var ratingDetailPageLink = ratingDetailLink + homePageUrl;
	renderHref(elem, ratingDetailPageLink);
};
var renderDetailRatingPage = function (elem, value) {
	elem.innerHTML = 'Chi tiết đánh giá';
	elem.classList.add('has-link');
	setHrefHomePageUrl(elem, value);
};
var renderDashboardRatingDetailLink = function (elem, value, attr) {
	var homePageUrl = window.localStorage.getItem('loggedUserHomePage');
	setHrefHomePageUrl(elem, homePageUrl);
};
var addColorElem = function (elem, value, attr) {
	var valueElem = elem.innerHTML;
	if (value > 0) {
		elem.innerHTML = `<span class="up-value">${valueElem}</span>`
	}
	if (value == 0) {
		elem.innerHTML = `<span class="unchange-value">${valueElem}</span>`
	}
	if (value < 0) {
		elem.innerHTML = `<span class="down-value">${valueElem}</span>`
	}
};
var renderPercent = function (elem, value, attr) {
	elem.innerHTML = value + '%';
	addColorElem(elem, value, attr);
};
var renderPercentNoColor = function (elem, value, attr) {
	elem.innerHTML = value + '%';
};
var renderProfitPercent = function (elem, value, attr) {
	renderPercent(elem, value, attr);
};
renderProfitpercent100NoColorTable = function (cell, row, col, all) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	cell.classList.add('has-text-right');
	renderProfitpercent100NoColor(cell, value, all[row])
};
var renderProfitpercent100Table = function (cell, row, col, all) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	cell.classList.add('has-text-right');
	renderProfitpercent100(cell, value, all[row])
};
var renderProfitpercent100 = function (elem, value, attr) {
	var profit = Math.round(Number(value) * 10000) / 100;
	renderPercent(elem, profit, attr);
};
var renderProfitpercent100NoColor = function (elem, value, attr) {
	var profit = Math.round(Number(value) * 10000) / 100;
	renderPercentNoColor(elem, profit, attr);
};
var renderformatNumberDatalist = function (elem, value, attr) {
	elem.classList.add('has-text-right');
	elem.innerHTML = format(value);
};
var renderProfit = function (elem, value, attr) {
	elem.innerHTML = format(value);
	addColorElem(elem, value, attr);
};
var renderProfitPercentTable = function (cell, rowIndex, colIndex) {
	cell.classList.add('has-text-right');
	var value = cell.innerHTML;
	removeAllChild(cell);
	renderProfitPercent(cell, value);
};
var renderOrderType = function (cell, row, col, all) {
	var value = cell.innerHTML;
	var listOrderType = {
		LO: 'Lệnh thường',
		CONDITION: 'Lệnh điều kiện',
		CANCEL: 'Hủy lệnh',
		EDIT: 'Sửa lệnh '
	}
	cell.classList.add('has-text-left');
	if (listOrderType[value]) {
		cell.innerHTML = listOrderType[value];
	} else {
		cell.innerHTML = value;
	}
};
var renderOrderTypeDatalist = function (elem, value, all) {
	var listOrderType = {
		LO: 'Lệnh thường',
		CONDITION: 'Lệnh điều kiện',
		CANCEL: 'Hủy lệnh',
		EDIT: 'Sửa lệnh '
	}
	elem.classList.add('has-text-left');
	if (listOrderType[value]) {
		elem.innerHTML = listOrderType[value];
	} else {
		elem.innerHTML = value;
	}
};
var renderNumberPriceTable = function (cell, row, col, all) {
	var value = cell.innerHTML;
	renderNumberPrice(cell, value, all[row]);
};
var renderNumberPrice = function (elem, value, all) {
	elem.parentNode.classList.add('has-text-right');
	elem.innerHTML = value;
};
var renderOrderBuy = function (cell, row, col, all) {
	cell.classList.add('has-text-centered')
	var value = cell.innerHTML;
	var listOrderType = {
		'BUY': 'Mua',
		'SELL': 'Bán',

	};

	if (listOrderType[value]) {
		cell.innerHTML = listOrderType[value];
	} else {

		cell.innerHTML = value;
	}
};
var getListStockSymbol = function (selector) {
	var selectorSearchStock = '#searchstocsympol';
	if (selector) {
		selectorSearchStock = selector;
	}
	console.log('selector', selector);
	var input = document.querySelector(selectorSearchStock);
	input.addEventListener('input', function () {
		input.value = input.value.toUpperCase();
	});

	new shinobi.autocomplete(selectorSearchStock, {
		onSearch: (input, resolve) => {
			if (input.length < 1) { return [] }
			var url = "/api/PriceBoardApi/findDataList";
			var request = {
				"recordPerPage": "20",
				"pageNum": 1,
				"filters": [{ 'colname': 'stocksymbol', 'operator': 'like', 'value': input }]
			}

			shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
				var array = JSON.parse(res).data;
				resolve(array);
			});
		},
		autoSelect: true,
		onSubmit: result => {
			document.querySelector(selectorSearchStock).value = result.stocksymbol.toUpperCase();
		},
		getResultValue: result => {
			return result.stocksymbol.toUpperCase();
		},

		renderResult: (result, props) => {
			return `
          <li ${props}>
              <div class="title has-text-primary is-size-5">
             ${result.stocksymbol}
              </div>
              <div class="subtitle">${result.securityname}</div>
          </li>`
		},
	});
};
var renderOrderTypeStatus = function (cell, row, col, all) {
	cell.classList.add('has-text-left');
	var value = cell.innerHTML;
	var listOrderType = {
		'NEW': 'Mới',
		'INPROCESS': 'Đang xử lý',
		'SUCCESS': 'Thành công',
		'PENDING': 'Chờ khớp',
		'MATCHED': 'Đã khớp',
		'EDITED': 'Đã sửa',
		'CANCELED': 'Đã hủy',
		'ERROR': 'Lỗi'

	};

	if (listOrderType[value]) {
		cell.innerHTML = listOrderType[value];
	} else {

		cell.innerHTML = value;
	}
};
var renderStockPriceDatalist = function (elem, value) {
	elem.innerHTML = value / 1000;
};
var renderStockPriceTable = function (cell, row, col, all) {
	renderStockPriceDatalist(cell, cell.innerHTML);
};
var renderProfitTable = function (cell, rowIndex, colIndex) {
	var value = cell.innerHTML;
	removeAllChild(cell);
	renderProfit(cell, value);
};
var getUserNameInUrl = function (callback) {
	var pathnameListItem = window.location.pathname.split('/');
	var nick = pathnameListItem[pathnameListItem.length - 1];
	var getUserNameRequest = {};
	getUserNameRequest.pageurl = nick;
	var returnValue;
	shinobi.api.request('/api/UserApi/getUsernameFromHomePage', JSON
		.stringify(getUserNameRequest), function (response) {
			var jsonArr = JSON.parse(response);
			if (jsonArr.username) {
				window.localStorage.setItem('currentUserDetail', jsonArr.username);
				callback(jsonArr.username);
			} else {
				shinobi.notification.notification
					.error('Không tìm thấy người dùng!');
				return false;
			}
			return returnValue;
		});
};
var getPathnameSplitIndex = function (index) {
	var pathName = window.location.pathname;
	var pathNameSplit = pathName.split('/');
	var content;
	if (index < 0) {
		content = pathNameSplit[pathNameSplit.length + index];
	}
	if (index == "length") {
		content = pathNameSplit.length;
	}
	if (index > 0) {
		content = pathNameSplit[index];
	}
	return content;
};
var renderPublicUserAssetInfo = function (querySelectorPatern, traderName) {
	var request = {};
	request.username = traderName;
	shinobi.api.request('/api/ViewUserPublicAssetApi/getUserPublicAssetInfo',
		JSON.stringify(request), function (response) {
			var jsonArr = JSON.parse(response);
			var data = JSON.stringify(jsonArr);
			shinobi.mapping.render(querySelectorPatern, data);
		});
};
var renderPublicUserInfo = function (querySelectorPatern, traderName) {
	var request = {};
	request.username = traderName;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		var jsonArr = JSON.parse(response);
		var data = JSON.stringify(jsonArr);
		shinobi.mapping.render(querySelectorPatern, data);
	});
};
var getPublicUserInfo = function (traderName, callback) {
	var request = {};
	request.username = traderName;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		var jsonArr = JSON.parse(response);
		if (typeof callback == 'function') {
			callback(jsonArr);
		}
	})
};
var changeFeeType = function (value) {
	var content;
	switch (value) {
		case 'isfollowcopytrade':
		case 'COPY_TRADE':
			content = 'Copy trade';
			break;
		case 'TRAINING':
			content = 'Đào tạo';
			break;
		case 'isfollowblog':
		case 'INVESTING_BLOG':
			content = 'Blog đầu tư';
			break;
		case 'EVENT':
			content = 'Sự kiện';
			break;
		case 'ORTHER':
			content = 'Phí khác';
			break;
		case 'TRADER_POST_FEE':
			content = 'Phí bài viết';
			break;
		case 'COPY_TRADE_FREQUENT_FEE':
			content = 'Phí CopyTrade';
			break;
		default:
			content = 'Phí dịch vụ không xác định';
			break;
	}
	return content;
};
var changeOrderStatus = function (value) {
	var content;
	switch (value) {
		case 'INPROCESS':
			content = 'Copy trade';
			break;
		case 'TRAINING':
			content = 'Đào tạo';
			break;
		case 'isfollowblog':
		case 'INVESTING_BLOG':
			content = 'Blog đầu tư';
			break;
		case 'EVENT':
			content = 'Sự kiện';
			break;
		case 'ORTHER':
			content = 'Phí khác';
			break;
		case 'TRADER_POST_FEE':
			content = 'Phí bài viết';
			break;
		case 'COPY_TRADE_FREQUENT_FEE':
			content = 'Phí CopyTrade';
			break;
		default:
			content = 'Phí dịch vụ không xác định';
			break;
	}
	return content;
};
var renderFeeTypeDatalist = function (elem, value, attr) {
	var content = changeFeeType(value);
	elem.innerHTML = content;
};
var renderFeeTypeTable = function (cell, row, col, allData) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	renderFeeTypeDatalist(cell, value);
};
var buildTransStatus = function (cell, rowindex, colindex, allData) {
	cell.innerHTML = shinobi.aladinUtil.changeTransStatus(cell.innerHTML);
	var rowData = allData[rowindex];
	if (rowData.orthercomment.trim() != '') {
		var span = document.createElement('span');
		span.setAttribute('class',
			'tooltip is-tooltip-multiline icon has-text-warning');
		span.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
		span.setAttribute('data-tooltip', rowData.orthercomment.trim());
		cell.appendChild(span);
	}
};
var renderSettlementCode = function (elem, value) {
	elem.innerHTML = value;
	var orderId = elem.parentNode.querySelectorAll('[snb-key=orderid]')[0].innerHTML;
	var aTag = elem.parentNode;
	var userType = window.localStorage.getItem("loggedUserType");
	var pageurl = "accountrequestserviceformmanage";
	aTag.setAttribute("href", "/private/" + userType + pageurl + "/" + orderId);
};
var gotoOrderDetail = function (elem, value) {
};
var renderAmountDatalist = function (elem, value, attr) {
	if (value == 0) {
		elem.innerHTML = shinobi.language.free;
	} else {
		elem.innerHTML = format(value);
	}
};
var removeAllClassListInList = function (listElem, classList) {
	for (var i = 0; i < listElem.length; i++) {
		for (var j = 0; j < classList.length; j++) {
			listElem[i].classList.remove(classList[j]);
		}
	}
};
var addAllClassListInList = function (listElem, classList) {
	for (var i = 0; i < listElem.length; i++) {
		for (var j = 0; j < classList.length; j++) {
			listElem[i].classList.add(classList[j]);
		}
	}
};
var renderCopyTradeActionDatalist = function (elem, value, attr) {
	var content;
	switch (value) {
		case 'AUTOMATICAL':
			content = 'Tự đặt lệnh';
			break;
		case 'MANUAL':
			content = 'Thông báo đặt lệnh';
			break;
		default:
			break;
	}
	elem.innerHTML = content;
};
var goToPageFollowUserType = function (investorPageLink, traderPageLink) {
	var userType = window.localStorage.getItem('loggedUserType');
	if (userType == 'investor') {
		window.location.href = investorPageLink;
	} else {
		window.location.href = traderPageLink;
	}
};
var goToPageWithUserType = function (elem, pageGeneralName, beforeGeneralName,
	afterGeneralName) {
	var userType = window.localStorage.getItem('loggedUserType');
	var url = pageGeneralName;
	if (!beforeGeneralName && !afterGeneralName) {
		url = '/private/' + userType + pageGeneralName;
	}
	if (beforeGeneralName) {
		url = beforeGeneralName + url;
	}
	if (afterGeneralName) {
		url = url + afterGeneralName;
	}
	elem.onclick = function () {
		window.location.href = url;
	}
};
var er = {
	'addEventDropdown': function (id) {
		var container = document.getElementById(id);
		var button = container.querySelector('[aria-controls=dropdown-menu]');
		button.onclick = function () {
			container.classList.toggle('is-active');
		}
	},
	'buildPublicChat': function (elem, invitedUser) {
		er
			.checkAuthen(function (response) {
				if (JSON.parse(response) == null) {
					elem.classList.remove('is-hidden');
					elem.onclick = function () {
						shinobi.notification.notification
							.error(er.suggestLogin);
					}
				} else {
					if (invitedUser != 'system') {
						var loggedUserName = (JSON.parse(response))['username'];
						if (loggedUserName != invitedUser) {
							er
								.getPublicChatInfo(
									invitedUser,
									function (publicRoomChatInfo) {
										var data = JSON
											.parse(publicRoomChatInfo);
										if (data.chatroom) {
											elem.classList
												.remove('is-hidden');
											var roomId = data.chatroom['roomid'];
											elem.setAttribute(
												'roomid',
												roomId);
										} else {
											if (data.contactstatus != 'BLOCKED_STRANGER'
												&& data.contactstatus != 'NOT_TRADER_AND_INVESTOR') {
												elem
													.setAttribute(
														'inviteduser',
														invitedUser);
												elem.classList
													.remove('is-hidden');
											} else {
												elem.classList
													.add('tooltip');
												elem
													.setAttribute(
														'data-tooltip',
														'Không thể chat với người dùng chặn bạn hoặc bị chặn');
												elem.classList
													.replace(
														'has-text-orange',
														'has-text-grey');
												elem.innerHTML = '<i class="fa fa-comment-slash"></i>';
											}
										}
										elem.onclick = function () {
											if (this
												.hasAttribute('roomid')) {
												er
													.activeChatRoom(this
														.getAttribute('roomid'));
											} else if (this
												.hasAttribute('inviteduser')) {
												er
													.createStrangerContactRoomChat(
														this,
														invitedUser);
											}
										}
									});
						}
					}
				}
			});
	},
	'getPublicChatInfo': function (value, callback) {
		var request = {};
		request.inviteduser = value;
		shinobi.api.request(
			'/authenapi/ChatRoomManagementApi/getContactStatusInfo', JSON
				.stringify(request), function (response) {
					if (typeof callback == 'function') {
						callback(response);
					}
				});
	},
	'createStrangerContactRoomChat': function (elem, inviteduser) {
		var request = {};
		request.inviteduser = inviteduser;
		shinobi.api
			.request(
				'/authenapi/ChatRoomManagementApi/createStrangerContactRoomChat',
				JSON.stringify(request), function (response) {
					var data = JSON.parse(response);
					if (data.roomid) {
						var roomId = data.roomid;
						elem.setAttribute('roomid', roomId);
						elem.onclick();
					}
				});
	},
	'getValueBulmaCalendar': function (elem, param) {
		if (elem.value.trim() == '') {
			return false;
		} else {
			var returnObject = {};
			if (param.hasOwnProperty('isRange') == true) {
				if (elem.value.split('-')[0] && elem.value.split('-')[1]) {
					var startDate = elem.value.split('-')[0].trim().replace(
						/\//g, '-');
					var endDate = elem.value.split('-')[1].trim().replace(
						/\//g, '-');
					returnObject.startdate = startDate;
					returnObject.enddate = endDate;
					return returnObject;
				}
			}
		}
	},
	'renderValueBulmaCalendar': function (elem, value) {
		var info = elem.getAttribute('id') + '-info-render';
		var infoElem = document.getElementsByClassName(info)[0];
		if (infoElem.hasAttribute('is-range')) {
			if (infoElem.getAttribute('is-range') == 'true') {
				var startDate = infoElem.getAttribute('startdate');
				var endDate = infoElem.getAttribute('enddate');
				var startDateInput = elem.parentElement
					.querySelectorAll('.datetimepicker-dummy-input')[0];
				var endDateInput = elem.parentElement
					.querySelectorAll('.datetimepicker-dummy-input')[1];
				var startDateFormat = shinobi.aladinUtil.getFormatDate(
					startDate, 'dd/mm/yyyy');
				var endDateFormat = shinobi.aladinUtil.getFormatDate(endDate,
					'dd/mm/yyyy');
				startDateInput.value = startDateFormat;
				endDateInput.value = endDateFormat;
				elem.value = startDateFormat + ' - ' + endDateFormat;
			}
		}
	},
	'activeChatRoom': function (roomid) {
		var chatBoxColumn = document.getElementById('chatBoxColumn');
		chatBoxColumn.classList.remove('is-hidden');
		var chatMenuButton = document.getElementById('chatMenuButton');
		chatMenuButton.click();
		var listRoomChat = document.getElementById('listRoomChat');
		var listLi = listRoomChat.getElementsByClassName('room-chat');
		setTimeout(function () {
			for (var i = 0; i < listLi.length; i++) {
				if (listLi[i].getAttribute('id') == roomid) {
					listLi[i].click();
				}
			}
		}, 1000);
	},
	'investorRegistration': {
		'investorRegistration': '/page/investorregistration'
	},
	'login': {
		'login': '/page/login',
	},
	'traderlistingpage': {
		'traderlistingpage': '/page/traderlisting',
	},
	'investorlisting': {
		'investorlisting': '/page/investorlisting',
	},
	'suggestLogin': 'Bạn cần đăng nhập để thực hiện thao tác này!',
	'convertUsingServiceToVn': function (value) {
		var content;
		switch (value) {
			case 'NEED_TO_EXTEND':
				content = 'Gia hạn dịch vụ';
				break;
			case 'NEED_TO_SETTLE':
				content = 'Thanh toán dịch vụ';
				break;
			default:
				content = '';
				break;
		}
		return content;
	},
	'convertStringToDate': function (time) {
		return new Date(Date.parse(time.replace('-', '/').replace('-', '/')));
	},
	'buildChatTime': function (time) {
		var inputDate = er.convertStringToDate(time);
		var currentDate = new Date();
		var formatInput = shinobi.aladinUtil.getFormatDate(inputDate,
			'mm-dd-yyyy');
		var formatCurrent = shinobi.aladinUtil.getFormatDate(currentDate,
			'mm-dd-yyyy');
		if (formatInput == formatCurrent) {
			var inputHour = shinobi.aladinUtil
				.getFormatDate(inputDate, 'hh:mm');
			return inputHour;
		} else {
			var inputDateHour = shinobi.aladinUtil.getFormatDate(inputDate,
				'dd-mm-yyyy hh:mm');
			return inputDateHour;
		}
	},
	'renderServiceUsingStatus': function (elem, value) {
		if (value) {
			var content = er.convertUsingServiceToVn(value);
			elem.innerHTML = content;
		}
	},
	'reFormatDate': function (input, inputFormat, outputFormat) {
		var date = input.substring(inputFormat.indexOf('d'), inputFormat
			.lastIndexOf('d') + 1);
		var month = input.substring(inputFormat.indexOf('m'), inputFormat
			.lastIndexOf('m') + 1);
		var year = input.substring(inputFormat.indexOf('y'), inputFormat
			.lastIndexOf('y') + 1);
		var outPut = outputFormat.replace('dd', date).replace('mm', month)
			.replace('yyyy', year);
		return outPut;
	},
	'renderCopyTradeStatus': function (elem, value) {
		var request = {};
		request.feeid = value;
		request.publisher = elem.parentNode
			.querySelectorAll('[snb-key=publisher]')[0].innerHTML;
		shinobi.api
			.request(
				'/authenapi/ServiceUsingManagementApi/getCopyTradeServiceUsingDetailStatus',
				JSON.stringify(request),
				function (response) {
					var jsonArr = JSON.parse(response);
					if (jsonArr.serviceusingstatus == 'FREE_SERVICE') {
						elem.innerHTML = 'Dịch vụ miễn phí';
					} else if (jsonArr.serviceusingstatus == 'EXECUTING_PORTFOLIO') {
						elem.innerHTML = 'Đang xử lí';
					}
					if (jsonArr.serviceusingstatus == 'NEED_TO_SETTLE') {
						elem.innerHTML = '<p><a class="button open-order-button is-small is-link">Cần thanh toán</a></p>';
						elem
							.getElementsByClassName('open-order-button')[0].onclick = function () {
								shinobi.fragmentselectfollowrelationtypemodalrender
									.redirectPaymentPage(value);
							}
						var removeButton = document.createElement('a');
						removeButton.setAttribute('class',
							'button is-text is-small');
						removeButton.innerHTML = 'Xóa đơn hàng';
						elem.appendChild(removeButton);
						removeButton.onclick = function () {
							var data = jsonArr.followdetail;
							var requestDelete = {};
							requestDelete.feetype = data.feetype;
							requestDelete.subscriber = data.subscriber;
							requestDelete.publisher = data.publisher;
							shinobi.api
								.request(
									'/authenapi/AladinProductOrderApi/deleteServiceOrder',
									JSON
										.stringify(requestDelete),
									function (response) {
										if (response == 'update success') {
											shinobi.notification.notification
												.info('Xóa đơn hàng thành công');
											removeButton.parentNode.parentNode.classList
												.add('is-hidden');
										}
									});
						}
					} else if (jsonArr.serviceusingstatus == 'NEED_TO_EXTEND') {
						var exetendbutton = document.createElement('a');
						exetendbutton.setAttribute('class',
							'button  is-danger is-small');
						exetendbutton.innerHTML = 'Gia hạn';
						elem.appendChild(exetendbutton);
						var note = document.createElement('p');
						note.setAttribute('class', ' has-text-danger ');
						note.innerHTML = 'Còn ' + jsonArr.remainday
							+ ' ngày nữa';
						elem.appendChild(note);
						exetendbutton.onclick = function () {
							shinobi.fragmentextendrelationmodalrender
								.build(elem, jsonArr.followdetail);
						}
					} else {
						var data = jsonArr.followdetail;
						shinobi.fragmentaccountfollowingtraderender
							.buildServiceTimeContainer(elem, data);
					}
				});
	},
	'renderUnFollowButton': function (elem, value) {
		var request = {};
		request.feeid = value;
		request.publisher = elem.parentNode
			.querySelectorAll('[snb-key=publisher]')[0].innerHTML;
		shinobi.api
			.request(
				'/authenapi/ServiceUsingManagementApi/getCopyTradeServiceUsingDetailStatus',
				JSON.stringify(request),
				function (response) {
					if (JSON.parse(response).followdetail.isactive == true) {
						shinobi.fragmentaccountfollowingtraderender
							.buildUnFollowService(elem, JSON
								.parse(response).followdetail);
					}
				});
	},
	'renderDetailRating': function (elem, value, attr) {
		var spanStarContainer = document.createElement('span');
		spanStarContainer.setAttribute('class', 'star-container');
		elem.appendChild(spanStarContainer);
		var spanNumberRating = document.createElement('span');
		spanNumberRating.setAttribute('class', 'count-rating-container');
		elem.appendChild(spanNumberRating);
		var userName = value;
		var request = {};
		request.username = userName;
		shinobi.api.request('/api/ViewTraderRatingApi/getUserOverViewRating',
			JSON.stringify(request), function (response) {
				var jsonArr = JSON.parse(response);
				var averageratingpoint = jsonArr.averageratingpoint;
				er.buildRating(spanStarContainer, averageratingpoint);
				spanNumberRating.innerHTML = '('
					+ jsonArr.totalratingmember + ')';
				spanNumberRating.onclick = function () {
					window.location.href = '/page/ratingdetail/'
						+ jsonArr.homepageurl;
				}
			});
	},
	'getCurrentDayOfWeek': function () {
		var toDay = new Date();
		var currentDayOfWeek = toDay.getDay();
		// Sunday - Saturday : 0 - 6
		return currentDayOfWeek;
		// expected output: 2
	},
	'getParentNodeWithKey': function (elem, key, callback) {
		if (elem.hasAttribute(key)) {
			if (typeof callback == 'function') {
				callback(elem);
			}
		} else {
			if (elem.parentElement) {
				er.getParentNodeWithKey(elem.parentElement, key, callback);
			}
		}
	},
	'buildRating': function (elem, value) {
		value = value / 2;
		var starIconHtmlString = '<span class="icon is-small has-text-warning"><i class="fas fa-star"></i></span>';
		var noneStarIconHtmlString = '<span class="icon is-small has-text-light"><i class="fas fa-star"></i></span>';
		var numberRating = value;
		if (value > 5) {
			numberRating = 5;
		}
		if (value < 0 || value == 0) {
			numberRating = 0;
		}
		var contentRating = '';
		for (var i = 0; i < numberRating; i++) {
			contentRating += starIconHtmlString;
		}
		for (var j = 0; j < (5 - numberRating); j++) {
			contentRating += noneStarIconHtmlString;
		}
		elem.innerHTML = contentRating;
	},
	'renderUserType': function (elem, value, attr) {
		var userType = window.localStorage.getItem('loggedUserType');
		er.convertUserTypeDatalist(elem, userType);
	},
	'convertUserTypeDatalist': function (elem, value) {
		var content;
		switch (value.toLowerCase()) {
			case 'trader':
				content = 'Nhà tư vấn';
				break;
			case 'investor':
				content = 'Nhà đầu tư';
				break;
			case 'stock_com_admin':
				content = 'Tổ chức hợp tác';
				break;
			default:
				break;
		}
		elem.innerHTML = content;
	},
	'addEventFollowTable': function (cell, rowIndex, colIndex) {
		var value = cell.innerHTML;
		removeAllChild(cell);
		var a = document.createElement('a');
		a.setAttribute('class', 'button is-link  is-small');
		a.innerHTML = 'Theo';
		cell.appendChild(a);
		shinobi.fragmentselectfollowrelationtypemodalrender.addEventFollow(a,
			value);
	},
	'renderFreeOrUnFreeAmount': function (elem, value, attr) {
		var container = elem.parentNode.parentNode.parentNode.parentNode;
		var publisher = container.querySelectorAll('[snb-key=publisher]')[0].innerHTML;
		var feetype = container.querySelectorAll('[snb-key=feetype]')[0].innerHTML;
		var request = {};
		request.traderusername = publisher;
		request.feetype = feetype;
		shinobi.api
			.request(
				'/authenapi/TraderBuildFeeScheduleApi/checkTraderContainsUnFreeFeeSchedule',
				JSON.stringify(request), function (response) {
					var content;
					if (response == "true") {
						content = "Có phí";
					} else {
						content = shinobi.language.free;
					}
					elem.innerHTML = content;
				});
	},
	'getValueNumberCleaveFormat': function (elem) {
		return elem.value.trim().replace(/,/g, '');
	},
	'formatNameChatContainerHeader': function (elem, value) {
		var content = value;
		/*
		 * if (value.length > 15) {
		 * 
		 * content = value.slice(0, 12) + '...'; }
		 */
		elem.innerHTML = content;
	},
	'renderFeeValue': function (elem, value, attr) {
		var feeAmount = elem.parentNode.querySelectorAll('[snb-key=amount]')[0].innerHTML;
		var feeFequency = value;
		var content = 'Dịch vụ miễn phí';
		if (feeAmount > 0) {
			content = format(feeAmount) + '/' + convertFequency(feeFequency);
		}
		elem.innerHTML = content;
	},
	'checkAuthen': function (callback) {
		if (!shinobi.global.checkAuthen) {
			if (!shinobi.global.isCheckAuthen) {
				if (shinobi.global.isCheckAuthen == false) {
					setTimeout(function () {
						er.checkAuthen(callback);
					}, 10);
				} else {
					var request = {};
					shinobi.global.isCheckAuthen = false;
					shinobi.api.request('/api/UserApi/checkAuthen', JSON
						.stringify(request), function (response) {
							shinobi.global.checkAuthen = response;
							shinobi.global.isCheckAuthen = true;
							callback(response);
						});
				}
			} else {
				callback(shinobi.global.checkAuthen);
			}
		} else {
			callback(shinobi.global.checkAuthen);
		}
	},
	'renderPostStatusDatalist': function (elem, value, attr) {
		var content;
		var classList;
		switch (value) {
			case 'WAITING_FOR_AUDIT':
				content = 'Chờ duyệt';
				classList = 'is-light';
				break;
			case 'AVAILABLE':
				content = 'Đã duyệt';
				classList = 'is-success';
				break;
			case 'REJECTED':
				content = 'Từ chối';
				classList = 'is-danger';
				break;
			default:
				break;
		}
		elem.innerHTML = content;
		elem.classList.add(classList);
	},
	'activePathTabs': function () {
		var listTabs = document.querySelectorAll('.tabs.active-pathname-tabs');
		for (var i = 0; i < listTabs.length; i++) {
			var currentTab = listTabs[i].querySelector('[href='
				+ window.location.pathname.replace(/\//g, '\\/') + ']');
			if (currentTab) {
				currentTab.parentElement.classList.add('is-active');
			}
		}
	},
	'getFormatDatePickerInput': function (datepickerId, format) {
		var input = document.getElementById(datepickerId + '-inputDivID');
		var dateValue = input.value;
		var date = dateValue.split('-')[0];
		var month = dateValue.split('-')[1];
		var year = dateValue.split('-')[2];
		var dateString = month + '-' + date + '-' + year;
		return shinobi.aladinUtil.getFormatDate(dateString, format);
	},
	'getDatePickerValue': function (item) {
		var format = 'yyyy-mm-dd';
		var input = document.getElementById(item.id + '-inputDivID');
		var dateValue = input.value;
		var date = dateValue.split('-')[0];
		var month = dateValue.split('-')[1];
		var year = dateValue.split('-')[2];
		var dateString = year + '-' + month + '-' + date;
		return dateString;
		// return shinobi.aladinUtil.getFormatDate(dateString, format);
		// return er.getFormatDatePickerInput(item.id, format);
	},
	'renderFeeIconFromListFeeType': function (elem, value) {
		var jsonArr = JSON.parse(value);
		for (var i = 0; i < jsonArr.length; i++) {
			var currentData = jsonArr[i][0];
			var iconLink;
			if (currentData.feetype) {
				var iconSpanContainer = document.createElement('span');
				iconSpanContainer.setAttribute('class', 'service-icon tooltip');
				iconSpanContainer.setAttribute('data-tooltip',
					changeFeeType(currentData.feetype));
				var imageContainer = document.createElement('img');
				iconSpanContainer.appendChild(imageContainer);
				switch (currentData.feetype) {
					case 'INVESTING_BLOG':
						iconLink = blogIconImageLink;
						break;
					case 'COPY_TRADE':
						iconLink = copyTradeIconImageLink;
						break;
					default:
						break;
				}
				imageContainer.setAttribute('src', iconLink);
				elem.appendChild(iconSpanContainer);
			}
		}
	},
	'getListFeeIcon': function (elem, value) {
		er
			.checkAuthen(function (response) {
				if (response != 'null') {
					var request = {};
					request.traderusername = value;
					shinobi.api
						.request(
							'/authenapi/TraderCustomerApi/getAllServiceCustomerIsFollowing',
							JSON.stringify(request), function (
								response) {
							er.renderFeeIconFromListFeeType(
								elem, response);
						});
				}
			});
	},
	'listingTimeFrame': function (value) {
		var content;
		switch (value) {
			case 'ONE_DAY':
				content = 'phiên gần nhất';
				break;
			case 'ONE_WEEK':
				content = 'tuần';
				break;
			case 'ONE_MONTH':
				content = 'tháng';
				break;
			case 'THREE_MONTH':
				content = 'ba tháng';
				break;
			case 'SIX_MONTH':
				content = 'sáu tháng';
				break;
			case 'ONE_YEAR':
				content = 'một năm';
				break;
			default:
				break;
		}
		return 'Xếp hạng ' + content;
	},
	'postFiterConvert': function (value) {
		var content;
		switch (value) {
			case 'allpost':
				content = 'Tất cả bài viết';
				break;
			case 'hasfeepost':
				content = 'Bài viết có phí';
				break;
			case 'freepost':
				content = 'Bài viết miễn phí';
				break;
			case 'purchased':
				content = 'Bài viết đã mua';
				break;
			default:
				break;
		}
		return content;
	},
	'renderAdminPostCheckUrl': function (elem, value, attr) {
		if (value.trim == '') {
			return;
		} else {
			var url = value;
			var pageCheckUrl = url.replace(blogPostPageUrl,
				adminPostCheckPageUrl);
			var container = elem.parentNode;
			var adminPostCheckButtonElemList = container
				.querySelectorAll('[snb-target="goToPostCheckPage"');
			for (var i = 0; i < adminPostCheckButtonElemList.length; i++) {
				adminPostCheckButtonElemList[i].onclick = function () {
					window.location.href = pageCheckUrl;
				}
			}
		}
	},
	'createSimpleBar': function (patern) {
		var listElem = document.querySelectorAll(patern);
		for (var i = 0; i < listElem.length; i++) {
			var item = new SimpleBar(listElem[i]);
		}
	},
	'confirm': function (callback, options) {
		var confirmPanel = document.getElementById('confirmPanel');
		shinobi.aladinUtil.modalEventListener(confirmPanel);
		if (options) {
			if (options.title) {
				confirmPanel.getElementsByClassName('modal-card-title')[0].innerHTML = options.title;
			}
			if (options.content) {
				confirmPanel.getElementsByClassName('modal-card-body')[0].innerHTML = options.content;
			}
			if (options.yescontent) {
				confirmPanel.getElementsByClassName('yes')[0].innerHTML = options.yescontent;
			}
			if (options.nocontent) {
				confirmPanel.getElementsByClassName('cancel')[0].innerHTML = options.nocontent;
			}
			if (options.modalsize) {
				confirmPanel.classList.add(options.modalsize);
			}
			if (options.initfunction) {
				options.initfunction(confirmPanel);
			}
		} else {
			confirmPanel.getElementsByClassName('modal-card-title')[0].innerHTML = 'Cảnh báo';
			confirmPanel.getElementsByClassName('modal-card-body')[0].innerHTML = 'Bạn chắc chắn?';
			confirmPanel.getElementsByClassName('yes')[0].innerHTML = 'Xác nhận';
			confirmPanel.getElementsByClassName('cancel')[0].innerHTML = 'Hủy';
		}
		confirmPanel.classList.add('is-active');
		var yes = confirmPanel.getElementsByClassName('yes')[0];
		yes.focus();
		yes.onclick = function () {
			if (typeof callback == 'function') {
				confirmPanel.classList.remove('is-active');
				callback();
			}
		}
	},
	'runSnbReload': function (elem) {
		if (elem.hasAttribute('snb-reload')) {
			var reloadFunction = elem.getAttribute('snb-reload');
			if (elem.hasAttribute('snb-reload-key')) {
				var reloadKey = elem.getAttribute('snb-reload-key');
				if (reloadKey == 'this') {
					var reloadKeyValue = elem;
					eval(reloadFunction)(reloadKeyValue);
				}
			} else {
				eval(reloadFunction)();
			}
		}
	},
	'renderListFeeIsActive': function (elem, value) {
		var content = '';
		var listFee = elem.parentNode
			.querySelectorAll('[snb-render-key=feeType]');
		for (var i = 0; i < listFee.length; i++) {
			if (listFee[i].innerHTML == "true") {
				var feeType = listFee[i].getAttribute('snb-key');
				content = content + '/' + changeFeeType(feeType);
			}
		}
		content = content.slice(1, content.length);
		elem.innerHTML = content;
	},
	'addEventTabs': function (patern, renderType) {
		var elemList = document.querySelectorAll(patern);
		switch (renderType) {
			case 'hrefUserType':
				er.addEventHrefUserType(patern, elemList);
				break;
			default:
				break;
		}
	},
	'addEventHrefUserType': function (patern, elemList) {
		var item = elemList[0];
		var listTab = item.querySelectorAll('[snb-tab]');
		var json = {};
		var userType = window.localStorage.getItem('loggedUserType');
		for (var i = 0; i < listTab.length; i++) {
			var tab = listTab[i];
			if (tab.hasAttribute('snb-tab')) {
				var value = tab.getAttribute('snb-tab');
				json[value] = value;
				json[value + 'href'] = '/private/' + userType + value;
			}
		}
		shinobi.mapping.render(patern, JSON.stringify(json))
	},
	'renderCurrentCashPlaceHolder': function (elem, value) {
		elem.setAttribute('placeholder', 'Vốn khả dụng: ' + format(value));
	},
	'renderCopyTradeMessage': function (elem, value) {
		var copytradeSettingMessageContainer = document
			.getElementById('copytradeSettingMessageContainer');
		var copytradecapital = document.getElementById('copytradecapital');
		if (value.trim() == '') {
			copytradeSettingMessageContainer.classList.add('is-hidden');
		} else {
			copytradeSettingMessageContainer.classList.remove('is-hidden');
		}
		var currentCash = elem.parentNode
			.querySelectorAll('[snb-key=currentcash')[0].innerHTML;
		if (Number(currentCash) < 100000) {
			copytradecapital.classList.add('is-danger');
			copytradecapital.disabled = true;
		} else {
			copytradecapital.classList.remove('is-danger');
			copytradecapital.disabled = false;
		}
		elem.innerHTML = value;
	},
	'renderMaxQuantity': function (elem, value) {
		if (isNaN(Number(value))) {
			elem.parentNode.classList.add('is-hidden');
		} else {
			elem.parentNode.classList.remove('is-hidden');
			elem.innerHTML = format(value);
		}
	},
	'renderPriceDatalist': function (elem, value) {
		if (value == 0) {
			elem.innerHTML = shinobi.language.free;
		} else {
			elem.innerHTML = format(value) + 'VNĐ';
		}
	},
	'showDownloadFileModal': function () {
		var confirmDownloadFileModal = document
			.getElementById('confirmDownloadFileModal');
		confirmDownloadFileModal.classList.add('is-active');
		var button = confirmDownloadFileModal.querySelector('.button.is-white');
		// button.classList.remove('is-hidden');
		button.classList.add('is-loading');
		var shinobinotification = document
			.getElementById('shinobinotification');
		setTimeout(function () {
			if (shinobinotification.getAttribute('class').includes(
				'errormessage')) {
				confirmDownloadFileModal.classList.remove('is-active');
			}
		}, 2000);
	},
	'renderDownloadFileModal': function (response) {
		var confirmDownloadFileModal = document
			.getElementById('confirmDownloadFileModal');
		confirmDownloadFileModal.classList.add('is-active');
		var button = confirmDownloadFileModal
			.getElementsByClassName('is-loading')[0];
		if (response == 'update success') {
			// button.classList.add('is-hidden');
			button.classList.remove('is-loading');
			button.innerHTML = response;
		} else {
			confirmDownloadFileModal.classList.remove('is-active');
		}
	},
	'renderRemovePinLevel': function (elem, value) {
		var pinLevel = value;
		/* if (pinLevel != 1) { */
		elem.classList.remove('is-hidden');
		elem.onclick = function () {
			if (confirm('Xác nhận xóa đánh dấu')) {
				var postId = elem.parentNode
					.querySelectorAll('[snb-key=postid]')[0].innerHTML;
				var request = {};
				request.postid = postId;
				shinobi.api
					.request(
						'/authenapi/SystemAuditTraderPostApi/deletePinedTraderPost',
						JSON.stringify(request), function (response) {
							if (response == 'update success') {
								shinobi.notification.notification
									.info('Cập nhật thành công!');
								location.reload()
							}
						});
			}
		}
		/* } */
	},
	'renderDatePicker': function (elem, value) {
		var input = elem.getElementsByClassName('inputDivClass')[0];
		input.value = shinobi.aladinUtil.getFormatDate(value, 'dd-mm-yyyy');
	},
	'changeAllKeyChildren': function (array, keysMap, callback) {
		for (var i = 0; i < array.length; i++) {
			// var item = jsonArr[i];
			er.renameKeys(keysMap, array[i]);
			if (array[i].children && array[i].children.length != 0) {
				er.changeAllKeyChildren(array[i].children, keysMap);
			}
		}
		if (typeof callback == 'function') {
			callback(array);
		}
	},
	'renameKeys': function (keysMap, obj) {
		var listOldKey = Object.keys(keysMap);
		var listNewKey = Object.values(keysMap);
		for (var i = 0; i < listOldKey.length; i++) {
			var oldkey = listOldKey[i];
			var newKey = listNewKey[i];
			var oldkeyValue = obj[oldkey];
			obj[newKey] = oldkeyValue;
		}
	},
	'getAllObjectMenu': function (resultArray, sourceArray) {
		for (var i = 0; i < sourceArray.length; i++) {
			resultArray.push(sourceArray[i]);
			if (sourceArray[i].children && sourceArray[i].children.length != 0) {
				er.getAllObjectMenu(resultArray, sourceArray[i].children);
			}
		}
	},
	'getTokenValue': function (input) {
		var numberInput = Number(input.slice(1, input.length - 1));
		var LastNumberInput = Number(numberInput).toString().split('').pop();
		var returnValue = numberInput >>> LastNumberInput;
		return returnValue;
	},
	'encodeURIComponent': function (uri) {
		var uri_enc = encodeURIComponent(uri);
		return uri_enc;
	},
	'decodeURIComponent': function (uri_enc) {
		var uri = encodeURIComponent(uri_enc);
		return uri;
	},
	'addEventSearchUser': function (elemId) {
		var elem = document.getElementById(elemId);
		if (elem.getAttribute('type') == 'tags') {
			var interval = setInterval(function () {
				var inputBox = elem.nextElementSibling;
				if (inputBox) {
					var input = inputBox.getElementsByTagName('input')[0];
					er.addEventSearchUserElem(input, elem);
					clearInterval(interval);
				}
			}, 100);
		} else {
			er.addEventSearchUserElem(elem, elem);
		}
	},
	'addResultList': function (elem, data, elemInputFirstDeclare) {
		function insertAfter(el, referenceNode) {
			referenceNode.parentNode
				.insertBefore(el, referenceNode.nextSibling);
		}
		var container;
		if (elem.parentNode.getElementsByClassName('result-absolute-container').length > 0) {
			container = elem.parentNode
				.getElementsByClassName('result-absolute-container')[0];
		} else {
			container = document.createElement('div');
			container.setAttribute('class', 'result-absolute-container');
			insertAfter(container, elem);
		}
		container.parentNode.classList.add('is-relative');
		if (data.length == 0) {
			container.remove();
			elem.setAttribute('refid', '');
		} else {
			container.innerHTML = '';
			for (var i = 0; i < data.length; i++) {
				if (i < 3) {
					elem.setAttribute('refid', data[i].id);
					var record = document.createElement('div');
					record.setAttribute('class', 'level is-marginless');
					record.innerHTML = '<div class="level-left chat-avatar"><img src="'
						+ data[i].avatarlink
						+ '" class="chat-room-avatar margin-right-05rem"></div><div class="level-item ">'
						+ data[i].firstname
						+ ' '
						+ data[i].lastname
						+ '</div>';
					container.appendChild(record);
				}
			}
			elem.onblur = function () {
				container.classList.add('is-hidden');
			}
			elem.onclick = function () {
				container.classList.remove('is-hidden');
			}
		}
	},
	'addEventSearchUserElem': function (elem, elemInputFirstDeclare) {
		var api = '/api/UserApi/searchUserById';
		elem.onkeyup = function () {
			var value = elem.value.trim();
			if (value != '') {
				var request = {};
				request.searchkey = value;
				shinobi.api.request(api, JSON.stringify(request), function (
					response) {
					var jsonArr = JSON.parse(response);
					er.addResultList(elem, jsonArr, elemInputFirstDeclare);
				});
			} else {
				er.addResultList(elem, [], elemInputFirstDeclare);
			}
		}
	},
};
var erLib = {

	'data' : [],

	'reportLink' : '/static/report/',

	'renderCheckbox' : function(elem, row, col) {

		elem.innerHTML = '<label class="checkbox"><input type="checkbox"></label>';

	},

	'renderAllowDenyTable' : function(cell, row, col) {

		if (cell.innerHTML == 'allow') {

			cell.innerHTML = 'Cho phép';
		}
		if (cell.innerHTML == 'deny') {

			cell.innerHTML = 'Chặn';
		}
	},

	'showConfirmModal' : function(callback) {

		var confirmPanel = document.getElementById('confirmPanel');

		confirmPanel.classList.add('is-active');

		var yesButton = confirmPanel.getElementsByClassName('yes')[0];

		yesButton.onclick = function() {

			confirmPanel.classList.remove('is-active');

			callback();
		}

	},

	'createDataTreeRelation' : function(data, dataParent, callback) {

		if (!dataParent) {

			data.name = data.id;

		} else {

			var currentId = data.id;

			data.name = currentId;
			data.id = dataParent.id + '/' + currentId;

		}

		for (var i = 0; i < data.children.length; i++) {

			erLib.createDataTreeRelation(data.children[i], data);
		}

		if (typeof callback == 'function') {

			callback(data);
		}
	},

	'getFullPathSelectedNodeTree' : function(tree, callback) {

		var data = tree.treeNodes;

		var result = [];

		erLib.getFullPathSelected(result, data, '');

		callback(result);

	},

	'getFullPathSelected' : function(result, data, callback) {

		for (var i = 0; i < data.length; i++) {

			if (data[i].status == 2) {

				result.push(data[i].id);

			}

			if (data[i].status == 1) {

				erLib.getFullPathSelected(result, data[i].children, callback);
			}

		}

		if (typeof callback == 'function') {

			callback(result);
		}

	},

	'getFullAreaTreeData' : function(callback) {

		var request = {};

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);

					if (typeof callback == 'function') {

						callback(jsonArr);
					}
				});
	},

	'getAgencyAreaTreeData' : function(requestInput, callback) {

		var request = requestInput;

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);

					if (typeof callback == 'function') {

						callback(jsonArr);
					}
				});
	},

	'createFullAreaTree' : function(patern, callback) {

		erLib.getListProvinceDataTree(function(provinceData) {

			for (var i = 0; i < provinceData.length; i++) {

				erLib.getListDicTristDataTree(provinceData, i, function(
						dictristData) {

					for (var j = 0; j < dictristData.length; j++) {

						erLib.getListPrecinctDataTree(dictristData, j,
								function() {

									shinobi.createstafftreerender.tree = erLib
											.createTree(patern, provinceData);

									var container = document
											.querySelectorAll(patern)[0];

									shinobi.createstafftreerender
											.closeAllNode(container);

									if (typeof callback == 'function') {

										callback(tree);
									}

								});

					}

				});
			}

		});

	},

	'createTree' : function(patern, data) {

		var tree = new Tree(patern, {

			// root data
			data : data,
			loaded : function() {

				// pre-selected nodes
				// this.values = [ 'HCM_TPH', 'HCM_006_0009' ];

				// disabled nodes
				// this.disables = [ '1-1-1', '1-1-1', '1-1-2' ]

			}

		});

		return tree;
	},

	'getListPrecinctDataTree' : function(currentData, i, callback) {

		var item = currentData[i];

		var districtValue = item.id;

		var request = {};
		request.columnname = 'district';
		request.columnvalue = districtValue;

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var precinctData = JSON.parse(response);

					currentData[i].children = precinctData;

					if (typeof callback == 'function') {

						callback(precinctData);
					}

					return currentData;
				});
	},

	'getListDicTristDataTree' : function(currentData, i, callback) {

		var item = currentData[i];

		var provinceValue = item.id;

		var request = {};
		request.columnname = 'province';
		request.columnvalue = provinceValue;

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var dictristData = JSON.parse(response);

					currentData[i].children = dictristData;

					if (typeof callback == 'function') {

						callback(dictristData);
					}

					return currentData;
				});
	},

	'getListProvinceDataTree' : function(callback) {

		var request = {};

		request.columnname = 'province';

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getDefaultValueListAsTree',
				JSON.stringify(request), function(response) {

					var provinceData = JSON.parse(response);

					if (typeof callback == 'function') {

						callback(provinceData);
					}

					return provinceData;

				});
	},

	'getFileName' : function(elem, value) {

		var linkFile = value;
		var linkFileSplit = linkFile.split('/');

		elem.innerHTML = linkFileSplit[linkFileSplit.length - 1];
	},

	'renderDownloadFile' : function(elem, value) {

		var linkFile = value;
		var linkFileSplit = linkFile.split('/');

		elem.setAttribute('href', erLib.reportLink
				+ linkFileSplit[linkFileSplit.length - 1]);

		setTimeout(function() {

			elem.focus();

		}, 200);

		elem.onclick = function() {

			var modalId = elem.getAttribute('modal-parent');

			var modal = document.getElementById(modalId);
			modal.classList.remove('is-active');

		}

	},

	'addEventSelectAll' : function(selectAllCheckboxId, tableId) {

		var selectAllCheckBoxHeader = document
				.getElementById(selectAllCheckboxId);
		selectAllCheckBoxHeader.onchange = function() {

			var table = document.getElementById(tableId);

			var body = table.getElementsByTagName('tbody')[0];

			var listRow = body.getElementsByTagName('tr');

			for (var i = 0; i < listRow.length; i++) {

				var item = listRow[i];

				var listTd = item.getElementsByTagName('td');

				var checkbox = item.querySelectorAll('[type=checkbox]')[0];

				if (this.checked) {
					checkbox.checked = true;
				} else {

					checkbox.checked = false;
				}
			}

		}
	},

	'hiddenCommandButton' : function(className) {

		var commandGroup = document.getElementById('buttonGroup');

		var button = commandGroup.getElementsByClassName(className)[0];

		button.classList.add('is-hidden');

	},

	'addEventRemoveRowTable' : function(elem, row, col, controlApi) {

		var value = elem.innerHTML;

		removeAllChild(elem);

		erLib.addEventRemoveRowDatalist(elem, value, controlApi);
	},

	'addEventRemoveRowDatalist' : function(elem, value, controlApi) {

		var button = document.createElement('a');
		button.setAttribute('class', 'button is-danger is-small');
		button.innerHTML = '<span class="icon"><i class="fa fa-times"></i></span><span>Xóa</span>';
		elem.appendChild(button);

		button.onclick = function() {

			var id = value;

			var request = {};

			request.id = id;

			shinobi.api.request(controlApi, JSON.stringify(request), function(
					response) {

				erLib.removeMessage(response);
				location.reload();

			});
		}

	},

	'createMessage' : function(response) {

		if (response == 'update success') {

			shinobi.notification.notification.info('Tạo mới thành công');

		}
	},

	'renderCellChangeStaffValue' : function(elem, row, col, allData) {

		erLib.renderNodeChangeValueListener(elem, function() {

			var input = elem.getElementsByTagName('input')[0];

			var inputId = row + 'StaffId';

			input.setAttribute('list', 'fragmentStaffIdDatalist');

			var agency = allData[row].agency;

			erLib.renderDataListStaff('fragmentStaffIdDatalist', agency);
		});
	},

	'updateMessage' : function(response, callback) {

		if (response == 'update success') {

			shinobi.notification.notification.info('Cập nhật thành công');

			if (typeof callback == 'function') {

				callback();
			}

		}
	},

	'removeMessage' : function(response) {

		if (response == 'update success') {

			shinobi.notification.notification.info('Xóa thành công');

		}
	},

	'renderUserTypeTable' : function(elem, row, col) {

		var value = elem.innerHTML;

		erLib.renderUserTypeDatalist(elem, value);
	},

	'renderUserTypeDatalist' : function(elem, value) {

		var content;
		switch (value.toLowerCase()) {

		case 'shop':
			content = 'Đại lý';
			break;

		case 'agency':
			content = 'Pháp nhân';
			break;

		case 'staff':
			content = 'Nhân viên';
			break;

		case 'mobi_hcm_2':
			content = 'Mobifone';
			break;
		case 'system':
			content = 'Quản trị hệ thống';
			break;

		default:
			break;
		}

		elem.innerHTML = content;
		// elem.innerHTML = value;
	},

	'renderOrderResultTable' : function(elem, row, col) {

		var value = elem.innerHTML;

		erLib.renderOrderResultDatalist(elem, value);
	},

	'renderOrderResultDatalist' : function(elem, value) {

		var content;
		switch (value.toLowerCase()) {

		case 'inprocess':
			content = 'Đang xử lí';
			break;

		case 'fail':
			content = 'Thất bại';
			break;

		case 'success':
			content = 'Thành công';
			break;

		default:
			content = value;
			break;
		}

		elem.innerHTML = content;
		// elem.innerHTML = value;
	},

	'notiFillInput' : function() {

		shinobi.notification.notification.error('Điền đầy đủ thông tin');
	},

	'addStartDateEndDateRequest' : function(request, callback) {

		var fromDate = document.getElementById('fromDate-inputDivID');
		var toDate = document.getElementById('toDate-inputDivID');

		if (fromDate.value.trim() == '' || toDate.value.trim() == '') {

			erLib.notiFillDateInput();

		} else {

			request.startdate = er.getFormatDatePickerInput('fromDate',
					'yyyy-mm-dd');
			request.enddate = er.getFormatDatePickerInput('toDate',
					'yyyy-mm-dd');

			if (typeof callback == 'function') {

				callback(request);
			}

		}
	},

	'notiFillDateInput' : function() {

		shinobi.notification.notification.error('Chưa điền từ ngày đến ngày');
	},

	'createTableListener' : function(tableIdOrBodyId) {

		var container = document.getElementById(tableIdOrBodyId);

		var listNode = container.getElementsByTagName('td');

		for (var i = 0; i < listNode.length; i++) {

			erLib.renderNodeChangeValueListener(listNode[i]);
		}

	},

	'renderCellChangeValue' : function(elem, rowIndex, colIndex, callback) {

		if (typeof callback == 'function') {

			erLib.renderNodeChangeValueListener(elem, callback);
		} else {

			erLib.renderNodeChangeValueListener(elem);
		}

	},

	'renderHasSendProfileContentTable' : function(cell, row, col, allData) {

		var content = 'Đã nộp';

		if (!allData[row].staffsendprofiledate) {

			content = 'Chưa nộp';
		}

		cell.innerHTML = content;

	},

	'addHasSendProfileSelect' : function(cell, callback) {

		cell.innerHTML = '';

		var selectContainer = document.createElement('div');
		selectContainer.setAttribute('class', 'select is-fullwidth');
		selectContainer.setAttribute('snb-key', 'isprofilesent');
		selectContainer.innerHTML = '  <select class="profile-send-select"> <option value="true">Đã nộp</option> <option value="false">Chưa nộp</option>  </select>';

		cell.appendChild(selectContainer);

		return selectContainer.getElementsByTagName('select')[0];

	},

	'renderHasSendProfileTable' : function(cell, row, col, allData) {

		// if (allData[row].orderresult && allData[row].orderresult ==
		// "SUCCESS") {

		erLib.addHasSendProfileSelect(cell);

		var select = cell.getElementsByTagName('select')[0];

		if (allData[row].orderresult == 'SUCCESS') {

			if (allData[row].staffsendprofiledate) {

				select.value = 'true';

			} else {

				select.value = 'false';

			}

		} else {

			select.value = 'false';

			select.disabled = true;
		}

		select.onchange = function() {

			var row = cell.parentNode;

			var checkBox = row.querySelectorAll('[type=checkbox]')[0];

			if (checkBox) {

				checkBox.checked = true;
			}

		}
		// }

		// else {
		//
		// erLib.renderHasSendProfileContentTable(cell, row, col, allData);
		// }

	},

	'renderNodeChangeValueListener' : function(elem, callback, ortherFunction) {

		elem.ondblclick = function() {

			var currentValue = elem.innerText;

			elem.classList.add('table-change-value-cell');

			var inputChange = elem
					.getElementsByClassName('table-change-value-input')[0];

			var input;

			if (!inputChange) {

				input = document.createElement('input');
				input.setAttribute('class',
						'input is-small table-change-value-input');

			} else {

				input = inputChange;
			}

			// input.value = currentValue;

			elem.appendChild(input);

			input.focus();

			if (typeof callback == 'function') {

				callback(input);
			}

			input.onchange = function() {

				if (typeof ortherFunction == 'function') {

					ortherFunction();
				}

				elem.classList.remove('table-change-value-cell');

				var newValue = input.value;

				input.remove();

				if (newValue.trim() == '') {

					elem.innerHTML = currentValue;

				} else {

					elem.innerHTML = newValue;

				}

			}

			input.addEventListener('keypress', function(e) {
				var key = e.which || e.keyCode;
				if (key === 13) {

					if (typeof ortherFunction == 'function') {
						ortherFunction();
					}

					elem.classList.remove('table-change-value-cell');

					var newValue = input.value;

					input.remove();

					if (newValue.trim() == '') {

						elem.innerHTML = currentValue;

					} else {

						elem.innerHTML = newValue;

					}
				}
			});

		}
	},

	'createButtonEvent' : function(callback) {

		var commandGroup = document.getElementById('buttonGroup');

		var createButton = commandGroup.getElementsByClassName('createButton')[0];

		createButton.onclick = function() {

			callback();
		}
	},

	'updateButtonEvent' : function(callback) {

		var commandGroup = document.getElementById('buttonGroup');

		var createButton = commandGroup.getElementsByClassName('updateButton')[0];

		createButton.onclick = function() {

			callback();
		}
	},

	'getSelectFormShopcodeValue' : function(elemId, requestName, listRequest) {

		var elem = document.getElementById(elemId);

		var value = elem.value;

		if (value != 'ALL') {

			var tempObject = {};

			tempObject.columnname = requestName;

			tempObject.columnvalue = value.split('-')[0];

			if (elem.hasAttribute('user-level')) {

				tempObject.userlevel = elem.getAttribute('user-level');
			}

			listRequest.push(tempObject);

		}
	},

	'renderShopCodeCheckGroup' : function(elemId, columnName) {

		var datalistName = elemId;

		var request = {};

		request.columnname = columnName;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist
				.initLoadApi(
						"/authenapi/AgencyWorkingAreaApi/getDefaultValueListAfterCheckGroup",
						request);
	},

	'renderShopCode' : function(elemId) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'shopcode';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", request);
	},
	'renderStatusCodeDetail' : function(elemId) {

		var datalistName = elemId;

		var request = {};

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/OrderStatusCodeApi/getListStatusCodeWithCodeValue",
				request);
	},

	'renderObjectReport' : function(elemId) {

		var datalistName = elemId;

		var request = {};

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist
				.initLoadApi(
						"/authenapi/ExportTotalCommissionToExcelFileApi/getListShopAndAgency",
						request);
	},

	'renderShopCodeOfAgency' : function(elemId, agency, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnvalue = agency;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListShopOfAgencyWorking",
				request);

		if (typeof callback == 'function') {

			callback();
		}
		return datalist;
	},

	'renderShopCodeOfAgencyHasAllValue' : function(elemId, agency) {

		var datalistName = elemId;

		var request = {};

		request.columnvalue = agency;
		request.getallvalue = 'ALL';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListShopOfAgencyWorking",
				request);

		return datalist;
	},

	'renderEmtyCell' : function(cell, row, col) {

		cell.innerHTML = '';
	},

	'renderRemoveCell' : function(cell, row, col) {

		cell.classList.add('is-hidden');
	},

	'renderAgency' : function(elemId, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'agency';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", request,
				callback);
	},

	'renderAgencyOfShopcode' : function(elemId, shopcode, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'agency';
		request.columnvalue = shopcode;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListAgencyOfShopWorking",
				request, callback);
	},
	'renderAgencyOfShopcodeHasAllValue' : function(elemId, shopcode, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'agency';
		request.columnvalue = shopcode;
		request.getallvalue = 'ALL';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListAgencyOfShopWorking",
				request, callback);
	},

	'getListAgency' : function(callback) {

		var request = {};

		request.columnname = 'agency';

		shinobi.api.request(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", JSON
						.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);
					callback(jsonArr.data);

				});
	},

	'convertListToTreeNode' : function(list, textMap, idMap, hasChildren) {

		var result = [];

		for (var i = 0; i < list.length; i++) {

			var item = list[i];

			var tempObject = {};

			tempObject.text = item[textMap];
			tempObject.id = item[idMap];

			if (hasChildren) {

				tempObject.children = [];
			}

			result.push(tempObject);
		}

		return result;
	},

	'renderProvince' : function(elemId, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'province';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", request,
				callback);
	},

	'renderDistrictListener' : function(districtId, provinceSelectId, callback) {

		var districtSelectDatalist = erLib.renderDistrict(districtId, document
				.getElementById(provinceSelectId).value, function() {

			callback();

			var provinceSelect = document.getElementById(provinceSelectId);

			provinceSelect.onchange = function() {

				var datalistElem = document.getElementById(districtId);

				removeAllChild(datalistElem);

				datalistElem.appendChild(districtSelectDatalist.sampleNode);

				erLib.renderDistrict(districtId, this.value);

			}
		});
	},

	'renderDistrict' : function(elemId, provinceValue, callback) {

		var elem = document.getElementById(elemId);

		elem.disabled = false;
		var datalistName = elemId;

		var request = {};

		request.columnname = 'province';
		request.columnvalue = provinceValue;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getAreaDistribution", request,
				callback);

		return datalist;

	},

	'renderShopcodeHasAllValue' : function(elemId, callback) {

		var elem = document.getElementById(elemId);

		elem.disabled = false;
		var datalistName = elemId;

		var request = {};

		request.columnname = 'shopcode';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist
				.initLoadApi(
						"/authenapi/AgencyWorkingAreaApi/getDefaultValueListWithAllValue",
						request, callback);

		return datalist;

	},

	'renderStaffInputListenner' : function(staffInputId, agencySelectId) {

		var controlElem = document.getElementById(agencySelectId);

		setTimeout(function() {

			var controlValue = controlElem.value;

			erLib.createStaffInputDatalist(staffInputId, controlValue);
		}, 2000)

		controlElem.onchange = function() {

			var currentValue = this.value;

			erLib.createStaffInputDatalist(staffInputId, currentValue);
		}
	},

	'createStaffInputDatalist' : function(inputId, controlValue) {

		var datalistId = inputId + 'Datalist';

		var datalistIdContainer = datalistId + 'Container';

		var currentDatalist = document.getElementById(datalistIdContainer);
		if (currentDatalist) {

			currentDatalist.remove();
		}

		var tempDatalist = document.getElementById('tempDataList');

		var cloneDatalist = tempDatalist.cloneNode(true);

		cloneDatalist.getElementsByTagName('datalist')[0].innerHTML = '<option  snb-datalist-parent="staffInputDatalist" snb-key="columnvalue"></option>';

		cloneDatalist.setAttribute('id', datalistIdContainer);

		document.getElementsByTagName('main')[0].appendChild(cloneDatalist);

		var input = document.getElementById(inputId);

		input.setAttribute('list', datalistId);

		input.value = '';

		var datalist = cloneDatalist.getElementsByTagName('datalist')[0];
		datalist.setAttribute('id', datalistId);
		datalist.setAttribute('snb-datalist-node', datalistId);

		var option = cloneDatalist.getElementsByTagName('option')[0];
		option.setAttribute('snb-datalist-parent', datalistId);
		option.setAttribute('snb-key', 'columnvalue');

		var datalist = erLib.renderDataListStaff(datalistId, controlValue);

		return datalist;

	},

	'getStaffList' : function(agencyObject, callback) {

		var request = {};

		request.agency = agencyObject.id;

		shinobi.api.request("/authenapi/StaffAreaDistributionApi/getStaffList",
				JSON.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);
					var listStaff = jsonArr.data;

					var listStaffData = erLib.convertListToTreeNode(listStaff,
							'columnname', 'columnvalue', false);

					agencyObject.children = listStaffData;

					callback(agencyObject);

				});
	},

	'renderDataListStaff' : function(datalistId, controlValue) {

		var option = document.createElement('option');
		option.setAttribute('snb-datalist-parent', datalistId);
		option.setAttribute('snb-key', 'columnvalue');

		var datalist = document.getElementById(datalistId);

		removeAllChild(datalist);
		datalist.appendChild(option);

		var request = {};

		request.agency = controlValue;

		request.recordPerPage = getRecordNumber(datalistId);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistId);

		datalist.initLoadApi(
				"/authenapi/StaffAreaDistributionApi/getStaffList", request);

		return datalist;

	},

	'renderDataListOrderStatus' : function(datalistId, controlValue) {

		var option = document.createElement('option');
		option.setAttribute('snb-datalist-parent', datalistId);
		option.setAttribute('snb-key', 'orderstatus');
		option.setAttribute('snb-key-innerhtml', 'orderstatus');
		option.setAttribute('snb-key-result', 'orderresult');

		var datalist = document.getElementById(datalistId);

		removeAllChild(datalist);
		datalist.appendChild(option);

		var request = {};

		request.agency = controlValue;

		request.recordPerPage = getRecordNumber(datalistId);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistId);

		datalist.initLoadApi("/authenapi/OrderStatusCodeApi/getListStatusCode",
				request);

	},

	'renderWardListener' : function(wardId, districtSelectId) {

		var wardSelectDatalist = erLib.renderWard(wardId, document
				.getElementById(districtSelectId).value, function() {

			var districtSelect = document.getElementById(districtSelectId);

			districtSelect.onchange = function() {

				var datalistElem = document.getElementById(wardId);

				removeAllChild(datalistElem);

				datalistElem.appendChild(wardSelectDatalist.sampleNode);

				erLib.renderWard(wardId, this.value);

			}
		});
	},

	'renderWard' : function(elemId, districtValue, callback) {

		var elem = document.getElementById(elemId);

		elem.disabled = false;
		var datalistName = elemId;

		var request = {};

		request.columnname = 'district';
		request.columnvalue = districtValue;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getAreaDistribution", request,
				callback);

		return datalist;
	},
};shinobi.exportfile = {
	exportFile: function (url, request, option) {
		shinobi.notification.notification.loading();
		shinobi.api.request(url, JSON.stringify(request), function (response) {
			shinobi.notification.notification.loaded();
			console.log(response);
			var data = JSON.parse(response);
			console.log(data);
			if (data.hasOwnProperty('linkfile')) {
				var modal = document.getElementById('confirmDownloadExcelFileModal');
				shinobi.mapping.renderElement(modal, data);
				modal.classList.add('is-active');
			} else {
				shinobi.notification.notification.error('Không tìm thấy file');
			}
			console.log(data);
		})
	},

	request: function (url, param, fileType, callback) {

		var request = new XMLHttpRequest();
		// var url =
		// "http://localhost:7979/exportfile/excel/VseBankTransLogApi";
		request.open('POST', url, true);
		request.setRequestHeader('Content-Type',
			'application/x-www-form-urlencoded; charset=UTF-8');
		request.responseType = 'blob';

		request.onload = function (e) {
			// var fileName = "export.xlsx";
			var fileName = "export." + fileType;

			if (this.status === 200) {
				var blob = this.response;
				if (window.navigator.msSaveOrOpenBlob) {
					window.navigator.msSaveBlob(blob, fileName);
				} else {

					if (typeof callback == 'function') {

						callback();
					}

					var downloadLink = window.document.createElement('a');
					var contentTypeHeader = request
						.getResponseHeader("Content-Type");
					downloadLink.href = window.URL.createObjectURL(new Blob(
						[blob], {
						type: contentTypeHeader
					}));
					downloadLink.download = fileName;
					document.body.appendChild(downloadLink);
					downloadLink.click();
					document.body.removeChild(downloadLink);

				}
			}
		};
		request.send(param);

	},
};shinobi.fileupload = {
	'filelist': [],
	'register': function (uploadElemId, elemevent, uploadpoint, beforeupload,
		callback) {

		var uploadElem = document.getElementById(uploadElemId);
		shinobi.fileupload.registerElement(uploadElem, elemevent, uploadpoint,
			beforeupload, callback);

	},
	'registerElement': function (uploadElem, elemevent, uploadpoint,
		beforeupload, callback, option) {
		if (option && option.hasOwnProperty('type')) {
			if (option.type == 'public') {
				var sessionid = '###'
				if (elemevent == "change") {
					uploadElem
						.addEventListener(
							elemevent,
							function () {

								shinobi.notification.notification
									.loading();
								var type = shinobi.fileupload
									.isImage(uploadElem.files[0].type);

								var fileListIndex = beforeupload(type);

								var formData = new FormData();

								formData
									.append(
										"file",
										uploadElem.files[0]);
								formData.append("session",
									sessionid);
								formData.append(
									"fileindex",
									fileListIndex);

								shinobi.fileupload
									.uploadFile(
										formData,
										uploadpoint,
										callback);
							});
				} else if (elemevent == "paste") {
					uploadElem
						.addEventListener(
							elemevent,
							function (e) {
								shinobi.notification.notification
									.loading();
								var formData = new FormData();

								var file = e.clipboardData.files[0];

								if (Object.prototype.toString
									.call(file) === '[object File]') {
									var type = shinobi.fileupload
										.isImage(file.type);

									var fileListIndex = beforeupload(type);

									formData
										.append(
											"file",
											e.clipboardData.files[0]);
									formData.append(
										"session",
										sessionid);
									formData.append(
										"fileindex",
										fileListIndex);

									shinobi.fileupload
										.uploadFile(
											formData,
											uploadpoint,
											callback);
								}

							});
				} else if (elemevent == "drop") {
					uploadElem.addEventListener(elemevent,
						function (e) {
							shinobi.notification.notification
								.loading();
							beforeupload();

							var formData = new FormData();

							formData.append("file",
								e.dataTransfer.files[0]);
							formData.append("session",
								sessionid);

							shinobi.fileupload.uploadFile(
								formData, uploadpoint,
								callback);
						});
				}
			}

		}
		else {
			var userApi = (shinobi.hasOwnProperty('coreapi') && shinobi.coreapi.hasOwnProperty('userApi')) ? shinobi.coreapi.userApi : "/authenapi/userapi/";
			if (shinobi.hasOwnProperty('coreapi') && shinobi.coreapi.hasOwnProperty('getSessionIdApi')) {
				userApi = shinobi.coreapi.getSessionIdApi;
			}
			var request = {};
			shinobi.api
				.request(userApi + 'getSessionId'
					,
					JSON.stringify(request),
					function (response) {
						var json = JSON.parse(response);
						var sessionid = json.sessionid;

						if (elemevent == "change") {
							uploadElem
								.addEventListener(
									elemevent,
									function () {

										shinobi.notification.notification
											.loading();
										var type = shinobi.fileupload
											.isImage(uploadElem.files[0].type);

										var fileListIndex = beforeupload(type);

										var formData = new FormData();

										formData
											.append(
												"file",
												uploadElem.files[0]);
										formData.append("session",
											sessionid);
										formData.append(
											"fileindex",
											fileListIndex);

										shinobi.fileupload
											.uploadFile(
												formData,
												uploadpoint,
												callback);
									});
						} else if (elemevent == "paste") {
							uploadElem
								.addEventListener(
									elemevent,
									function (e) {
										shinobi.notification.notification
											.loading();
										var formData = new FormData();

										var file = e.clipboardData.files[0];

										if (Object.prototype.toString
											.call(file) === '[object File]') {
											var type = shinobi.fileupload
												.isImage(file.type);

											var fileListIndex = beforeupload(type);

											formData
												.append(
													"file",
													e.clipboardData.files[0]);
											formData.append(
												"session",
												sessionid);
											formData.append(
												"fileindex",
												fileListIndex);

											shinobi.fileupload
												.uploadFile(
													formData,
													uploadpoint,
													callback);
										}

									});
						} else if (elemevent == "drop") {
							uploadElem.addEventListener(elemevent,
								function (e) {
									shinobi.notification.notification
										.loading();
									beforeupload();

									var formData = new FormData();

									formData.append("file",
										e.dataTransfer.files[0]);
									formData.append("session",
										sessionid);

									shinobi.fileupload.uploadFile(
										formData, uploadpoint,
										callback);
								});
						}

					});
		}

	},
	'uploadFile': function (formData, uploadpoint, callback) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function () {
			if (this.readyState == 4 && this.status == 200) {
				shinobi.notification.notification.loaded();
				try {
					var json = JSON.parse(xhr.responseText);
					callback(json);

				} catch (e) {
					shinobi.notification.notification
						.error('Có lỗi vui lòng thử lại');
				}

				// var avatar = document.getElementById("avatar");
				// avatar.setAttribute("src", json.content);
			}
		};

		var hostname = window.location.hostname;
		var protocol = window.location.protocol;

		if (shinobi.hasOwnProperty('fileuploadconfig') && shinobi.fileuploadconfig.hasOwnProperty('uploadDomain')) {
			var uploadDomain = shinobi.fileuploadconfig.uploadDomain;
			xhr.open("POST", uploadDomain + uploadpoint, true);
		} else if (shinobi.hasOwnProperty('fileuploadconfig') && shinobi.fileuploadconfig.hasOwnProperty('uploadDomainProcess')
		) {
			uploadDomain = shinobi.fileuploadconfig.uploadDomainProcess();
			xhr.open("POST", uploadDomain + uploadpoint, true);
		} else {
			if (hostname == "localhost") {
				xhr.open("POST", "http://localhost:9999/" + uploadpoint, true);
			} else if (hostname === "www.aladin.finance") {
				xhr.open("POST", protocol + "//uploadfile.aladin.finance" + "/"
					+ uploadpoint, true);
			} else if (hostname === "chonso.cbv.com.vn") {
				xhr.open("POST", protocol + "//uploadfile.cbv.com.vn" + "/"
					+ uploadpoint, true);
			} else {
				xhr.open("POST", protocol + "//uploadfile." + hostname + "/"
					+ uploadpoint, true);
			}
		}

		xhr.withCredentials = true;
		xhr.send(formData);

	},
	'isImage': function (type) {
		if ('image/png' == type || 'image/jpeg' == type || 'image/gif' == type) {
			return true;
		} else {
			return false;
		}
	}

};shinobi.fragmentchangepassword = {
	classButtonControlSelector : 'fragment-change-password-button-control',
	listButtonControl : [],
	modal : '',
	modalId : 'fragmentChangePassword',
	init : function() {
		shinobi.fragmentchangepassword.modal = document
				.getElementById(shinobi.fragmentchangepassword.modalId);
		shinobi.fragmentchangepassword.addEventListButtonControl();
		shinobi.fragmentchangepassword.addEventButtonModal();
		// shinobi.fragmentchangepassword.addEventLogout();
		// shinobi.fragmentchangepassword.changeLoggedState();

	},

	addEventButtonModal : function() {

		shinobi.fragmentchangepassword.addEventChangePasswordButton();
	},
	addEventChangePasswordButton : function() {
		var button = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('submit-button')[0];

		shinobi.fragmentchangepassword.addEventButtonWhenClick(button);
		shinobi.fragmentchangepassword.addEventButtonWhenEnter(button);

	},

	addEventButtonWhenClick : function(elem) {
		elem.onclick = function() {
			shinobi.fragmentchangepassword.changePasswordProcess();
		}
	},
	addEventButtonWhenEnter : function(elem) {
		elem.addEventListener('keypress', function(e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentchangepassword.changePasswordProcess();
			}
		});
	},
	changePasswordProcess : function() {
		var oldPasswordInput = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('old-password-input')[0];
		var newPasswordInput = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('new-password-input')[0];
		var confirmPasswordInput = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('confirm-password-input')[0];
		if (confirmPasswordInput.value.trim() == ""
				|| newPasswordInput.value.trim() == ""
				|| oldPasswordInput.value.trim() == "") {
			shinobi.notification.notification.error("Nhập đầy đủ thông tin!");
			return;
		} else if (confirmPasswordInput.value.trim() != newPasswordInput.value
				.trim()) {
			shinobi.notification.notification
					.error("Mật khẩu mới và xác nhận mật khẩu không giống nhau!");
			return;

		} else {
			shinobi.notification.confirm(function() {
				var request = {};
				request.oldpassword = shinobi.util
						.sha256(oldPasswordInput.value.trim());
				request.newpassword = shinobi.util
						.sha256(newPasswordInput.value.trim());
				shinobi.fragmentchangepassword.sendRequest(request);
			}, {
				title : 'Xác nhận',
				content : 'Bạn chắc chắn',

			});

		}
	},
	sendRequest : function(request) {
		shinobi.notification.notification.loading();
		shinobi.api.request(shinobi.coreapi.userApi + 'changeUserPassword',
				JSON.stringify(request), function(response) {
					shinobi.notification.notification.loaded();

					if (response == "update success") {
						shinobi.notification.notification
								.info('Đổi mật khẩu thành công');
						shinobi.fragmentchangepassword.close();
					}
				});

	},

	addEventListButtonControl : function() {
		shinobi.fragmentchangepassword.listButtonControl = document
				.getElementsByClassName(shinobi.fragmentchangepassword.classButtonControlSelector);

		for (var i = 0; i < shinobi.fragmentchangepassword.listButtonControl.length; i++) {
			var button = shinobi.fragmentchangepassword.listButtonControl[i];
			button.onclick = function() {
				shinobi.fragmentchangepassword.open();
			}
		}

	},

	open : function() {
		if (shinobi.fragmentchangepassword.modal != '') {
			shinobi.fragmentchangepassword.modal.classList.add('is-active');

		}
	},

	close : function() {
		if (shinobi.fragmentchangepassword.modal != '') {
			shinobi.fragmentchangepassword.modal.classList.remove('is-active');
		}
	},
};shinobi.fragmentforgotpassword = {
	classButtonControlSelector : 'fragment-forgot-password-button-control',
	listButtonControl : [],
	classLogoutButtonSelector : 'logout-button',
	classLoggedUserNameButtonSelector : 'logged-username-button',
	modal : '',
	modalId : 'fragmentForgotPassword',
	init : function() {

		shinobi.fragmentforgotpassword.modal = document
				.getElementById(shinobi.fragmentforgotpassword.modalId);
		shinobi.fragmentforgotpassword.modal
				.getElementsByClassName('note-field')[0].classList
				.add('is-hidden');
		shinobi.fragmentforgotpassword.addEventListButtonControl();
		shinobi.fragmentforgotpassword.addEventButtonModal();

	},

	addEventButtonModal : function() {

		shinobi.fragmentforgotpassword.addEventSubmitButton();

	},

	addEventSubmitButton : function() {
		var button = shinobi.fragmentforgotpassword.modal
				.getElementsByClassName('submit-button')[0];
		shinobi.fragmentforgotpassword.addEventWhenClick(button);
		shinobi.fragmentforgotpassword.addEventWhenEnter(button);

	},

	addEventWhenClick : function(elem) {
		elem.onclick = function() {
			shinobi.fragmentforgotpassword.request();
		}
	},
	addEventWhenEnter : function(elem) {
		elem.addEventListener('keypress', function(e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentforgotpassword.request();
			}
		});
	},
	request : function() {
		var emailInput = shinobi.fragmentforgotpassword.modal
				.querySelector('input[snb-key="email"]');
		if (emailInput.value.trim() == "") {
			shinobi.notification.notification.error("Nhập đầy đủ thông tin!");
			return;
		} else {
			var request = {};
			request.email = emailInput.value.trim();
			shinobi.notification.notification.loading();
			shinobi.api.request(shinobi.coreapi.userApi
					+ 'sendForGetPasswordEmail', JSON.stringify(request),
					function(data) {
						if (data == "update success") {
							shinobi.notification.notification.loaded();
							shinobi.mapping.renderElement(
									shinobi.fragmentforgotpassword.modal,
									request);
						}
					});
		}
	},

	disableInputAndButton : function(elem, value, all) {
		elem.setAttribute('disabled', true);
	},

	showNoteField : function(elem, value, all) {
		elem.classList.remove('is-hidden');
	},
	addEventListButtonControl : function() {
		shinobi.fragmentforgotpassword.listButtonControl = document
				.getElementsByClassName(shinobi.fragmentforgotpassword.classButtonControlSelector);

		for (var i = 0; i < shinobi.fragmentforgotpassword.listButtonControl.length; i++) {
			var button = shinobi.fragmentforgotpassword.listButtonControl[i];
			button.onclick = function() {
				// hidden sign up modal
				shinobi.fragmentsignup.close();
				// show login modal
				shinobi.fragmentforgotpassword.open();
			}
		}

	},

	open : function() {
		if (shinobi.fragmentforgotpassword.modal != '') {
			shinobi.fragmentforgotpassword.modal.classList.add('is-active');

		}
	},

	close : function() {
		if (shinobi.fragmentforgotpassword.modal != '') {
			shinobi.fragmentforgotpassword.modal.classList.remove('is-active');
		}
	},
};shinobi.fragmentlogin = {
	href: window.location.href,
	classButtonControlSelector: 'fragment-login-button-control',
	listButtonControl: [],
	classLogoutButtonSelector: 'logout-button',
	classLoggedUserNameButtonSelector: 'logged-username-button',
	modal: '',
	modalId: 'fragmentLogin',
	init: function () {
		//add event redirect to origin page when login done
		shinobi.fragmentlogin.addEventClickLoginButton();
		shinobi.fragmentlogin.checkHasLogged(function () {
			shinobi.fragmentlogin.modal = document
				.getElementById(shinobi.fragmentlogin.modalId);
			shinobi.fragmentlogin.addEventButtonModal();
			shinobi.fragmentlogin.addEventLogout();
			shinobi.fragmentlogin.changeLoggedState();
			shinobi.fragmentlogin.showLoginSignUpButton();
		});

	},

	addEventClickLoginButton: function () {
		var loginButtons = document.querySelectorAll('.is-login-button');
		if (window.location.pathname != '/page/login') {
			loginButtons.forEach(function (button) {
				button.setAttribute('href', '/page/login?originpage=' + window.location.pathname);

			})
		}
	},

	showLoginSignUpButton: function () {
		if (JSON.stringify(document.body.classList).includes('not-logged')) {

			var signupButton = document.querySelector('.is-signup-button');
			signupButton.classList.remove('is-hidden');

			var loginButton = document.querySelector('.is-login-button');
			loginButton.classList.remove('is-hidden');
		}
	},

	loadGoogleAndFacebookLib: function () {
		window.fbAsyncInit = function () {
			FB.init({
				appId: '515882212152388',
				autoLogAppEvents: true,
				xfbml: true,
				version: 'v3.2'
			});
		};

		(function (d, s, id) {
			var js, fjs = d.getElementsByTagName(s)[0];
			if (d.getElementById(id)) {
				return;
			}
			js = d.createElement(s);
			js.id = id;
			js.src = "https://connect.facebook.net/en_US/sdk.js";
			fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'facebook-jssdk'));
	},

	changeLoggedState: function () {
		shinobi.coreapi.reCheckAuthen(function (username) {

			if (username) {
				document.body.classList.add('has-logged');
				document.body.classList.remove('not-logged');

			} else {
				document.body.classList.remove('has-logged');
				document.body.classList.add('not-logged');
			}

		});
	},

	addEventLogout: function () {
		var listLogoutButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLogoutButtonSelector);
		for (var k = 0; k < listLogoutButton.length; k++) {
			listLogoutButton[k].onclick = function () {
				shinobi.fragmentloginextension.logoutProcess(function () {
					shinobi.fragmentlogin.logoutProcess();
				});

			}

		}
	},

	logoutProcess: function () {
		shinobi.xhradapter.getResource('/logout', function (response) {

		});

		var listSignUpButton = document
			.getElementsByClassName(shinobi.fragmentsignup.classButtonControlSelector);
		for (var i = 0; i < listSignUpButton.length; i++) {
			listSignUpButton[i].classList.remove('is-hidden');
		}

		var listLogInButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classButtonControlSelector);
		for (var j = 0; j < listLogInButton.length; j++) {
			listLogInButton[j].classList.remove('is-hidden');
		}

		var listLogoutButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLogoutButtonSelector);
		for (var k = 0; k < listLogoutButton.length; k++) {
			listLogoutButton[k].classList.remove('is-logged');
		}

		var listLoggedUserNameButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLoggedUserNameButtonSelector);
		for (var l = 0; l < listLoggedUserNameButton.length; l++) {
			listLoggedUserNameButton[l].classList.remove('is-logged');
			listLoggedUserNameButton[l].classList.remove('is-logged');
			listLoggedUserNameButton[l].innerHTML = '';

		}

		shinobi.cacheapi.clear();
		// when clear cache => check authen has reload `
		shinobi.fragmentlogin.changeLoggedState();
		window.location.href = '/';

	},

	checkHasLogged: function (callback) {
		shinobi.coreapi.checkAuthen(function (sessionId) {
			if (sessionId) {
				shinobi.fragmentlogin.hasLoginProcess();
				shinobi.fragmentloginextension.loginProcess();
			}

			if (typeof callback == 'function') {
				callback();
			}
		});
	},

	addEventButtonModal: function () {

		shinobi.fragmentlogin.addEventLoginButton();

	},

	addEventLoginButton: function () {
		var listSelector = ['.username-input', '.password-input',
			'.login-button'];
		listSelector.forEach(function (selector) {
			var elem = shinobi.fragmentlogin.modal.querySelector(selector);
			var tagName = elem.tagName;
			switch (tagName) {
				case 'INPUT':
					shinobi.fragmentlogin.addEventLoginWhenEnter(elem);
					break;
				case 'A':
				case 'BUTTON':
					shinobi.fragmentlogin.addEventLoginWhenEnter(elem);
					shinobi.fragmentlogin.addEventLoginWhenClick(elem);
					break;
				default:
					shinobi.fragmentlogin.addEventLoginWhenClick(elem);
					break;
			}

		});

	},

	addEventLoginWhenClick: function (elem) {
		elem.onclick = function () {
			shinobi.fragmentlogin.login();
		}
	},
	addEventLoginWhenEnter: function (elem) {
		elem.addEventListener('keypress', function (e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentlogin.login();
			}
		});
	},
	login: function () {
		var username = document.getElementsByClassName('username-input')[0];
		var password = document.getElementsByClassName('password-input')[0];
		if (username.value.trim() == "" || password.value.trim() == "") {
			shinobi.notification.notification.error("Nhập đầy đủ thông tin!");
			return;
		} else {
			var request = {};
			request.username = username.value.trim();
			request.password = shinobi.util.sha256(password.value.trim());
			request.secureinfo = "";
			shinobi.fragmentlogin.requestLogin(request, "/login");

		}
	},
	requestLogin: function (request, loginurl) {
		shinobi.notification.notification.loading();
		shinobi.api.request(loginurl, JSON.stringify(request), function (data) {
			shinobi.notification.notification.loaded();
			if (data == "authen success") {
//				shinobi.fragmentlogin.close();
				shinobi.fragmentlogin.hasLoginProcess();
				shinobi.fragmentloginextension.loginProcess();

			} else {
				shinobi.notification.notification
					.error("Tài khoản hoặc mật khẩu sai!!!");
				return;
			}
		});

	},

	hasLoginProcess: function () {
		// hidden all sign in and sign up button
		var listSignUpButton = document
			.getElementsByClassName(shinobi.fragmentsignup.classButtonControlSelector);
		for (var i = 0; i < listSignUpButton.length; i++) {
			listSignUpButton[i].classList.add('is-hidden');
		}

		var listLogInButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classButtonControlSelector);
		for (var j = 0; j < listLogInButton.length; j++) {
			listLogInButton[j].classList.add('is-hidden');
		}

		var listLogoutButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLogoutButtonSelector);
		for (var k = 0; k < listLogoutButton.length; k++) {
			listLogoutButton[k].classList.add('is-logged');
		}

		var listLoggedUserNameButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLoggedUserNameButtonSelector);
		for (var l = 0; l < listLoggedUserNameButton.length; l++) {
			listLoggedUserNameButton[l].classList.add('is-logged');
			listLoggedUserNameButton[l].classList.add('is-loading');

		}

		shinobi.fragmentlogin.changeLoggedState();

	},
};shinobi.fragmentloginextension = {
	loginProcess: function () {
		// shinobi.loggedusertemplaterender.renderHeaderMenu();
		if (shinobi.socketmanager.privateWebSocket == '') {
			shinobi.socketmanager.init();
		}

	},
	logoutProcess: function (callback) {
		if (typeof callback == 'function') {
			callback();
		}
	},
};shinobi.fragmentsignup = {
	classButtonControlSelector : 'fragment-sign-up-button-control',
	listButtonControl : [],
	modal : '',
	modalId : 'fragmentSignUp',
	intlTelInput : '',
	hasCheckTrashMail : true,
	init : function() {

		shinobi.fragmentsignup.modal = document
				.getElementById(shinobi.fragmentsignup.modalId);
		shinobi.fragmentsignup.addEventListButtonControl();
		shinobi.fragmentsignup.renderSelectPhoneTelephoneInput();
		shinobi.fragmentsignup.addEventButtonModal();

	},

	renderSelectPhoneTelephoneInput : function() {

		var input = shinobi.fragmentsignup.modal
				.getElementsByClassName('phone-number-input')[0];
		shinobi.fragmentsignup.intlTelInput = window.intlTelInput(input, {
			// allowDropdown: false,
			// autoHideDialCode: false,
			autoPlaceholder : "off",
			dropdownContainer : document.body,
			// excludeCountries: ["us"],
			// formatOnDisplay: false,
			// geoIpLookup: function(callback) {
			// $.get("http://ipinfo.io", function() {},
			// "jsonp").always(function(resp) {
			// var countryCode = (resp && resp.country) ? resp.country : "";
			// callback(countryCode);
			// });
			// },
			// hiddenInput: "full_number",
			initialCountry : "vn",
			// localizedCountries: { 'de': 'Deutschland' },
			// nationalMode: false,
			// onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
			// placeholderNumberType: "MOBILE",
			// preferredCountries: ['cn', 'jp'],
			// separateDialCode: true,
			utilsScript : "/static/js/library/intlTelInputUtil.js",
		});
	},

	addEventButtonModal : function() {
		shinobi.fragmentsignup.addEventSignUpButton();
		shinobi.fragmentsignup.signUpWithFacebook();
		shinobi.fragmentsignup.signUpWithGoogle();

	},

	signUpWithGoogle : function() {
		var button = shinobi.fragmentsignup.modal
				.querySelector('.google-button');
		gapi
				.load(
						'auth2',
						function() {
							// Retrieve the singleton for the GoogleAuth library
							// and set up the client.
							var auth2 = gapi.auth2
									.init({
										client_id : '92469729159-a402g2mqs9o0bje69k6gr2lheun6beer.apps.googleusercontent.com',
										cookiepolicy : 'single_host_origin',

									});

							auth2
									.attachClickHandler(
											button,
											{},
											function(googleUser) {

												var profile = googleUser
														.getBasicProfile();

												var accessToken;
												if (googleUser.Zi) {
													accessToken = googleUser.Zi.access_token;
												}
												if (googleUser.tc) {
													accessToken = googleUser.tc.access_token;
												}
												if (accessToken) {
													var password = shinobi.util
															.sha256(accessToken);
													var phonenumber = Math
															.floor(Math
																	.random()
																	* (999999999 - 100000000)
																	+ 100000000);

													var lastName = (googleUser.w3) ? googleUser.w3.ofa
															: googleUser.Pt.CU;
													var firstName = (googleUser.w3) ? googleUser.w3.wea
															: googleUser.Pt.BW;
													var username = (googleUser.El) ? googleUser.El
															: googleUser.Ca;
													var mappingJson = {
														lastname : lastName,
														firstname : firstName,
														email : profile
																.getEmail(),
														phonenumber : phonenumber,
														password : password,
														confirmPassword : password,
														username : "gg_"
																+ username,
														acceptRule : true,
													};

													var formContainer = shinobi.fragmentsignup.modal
															.getElementsByClassName('form-container')[0];

													shinobi.mapping
															.renderElement(
																	formContainer,
																	mappingJson);
													var signUpOption = {
														method : 'google',
														data : mappingJson,
													};
													shinobi.fragmentsignup
															.signup(signUpOption);

												} else {
													shinobi.notification.notification
															.error('Không thể kết nối với Google');
												}

											}, function(error) {
												alert(JSON.stringify(error,
														undefined, 2));
											});
						});
	},

	signUpWithFacebook : function() {
		var button = shinobi.fragmentsignup.modal
				.querySelector('.facebook-button');
		button.onclick = function() {
			FB
					.login(
							function(responseLogin) {
								if (responseLogin.authResponse) {
									var authResponse = responseLogin.authResponse;
									var accessToken = authResponse.accessToken;
									var userID = authResponse.userID;

									FB
											.api(
													'/' + userID,
													'GET',
													{
														"fields" : "id,first_name, last_name,birthday,email,hometown,location"
													},
													function(response) {

														var password = shinobi.util
																.sha256(accessToken);
														var phonenumber = Math
																.floor(Math
																		.random()
																		* (999999999 - 100000000)
																		+ 100000000);

														var mappingJson = {
															lastname : response.last_name,
															firstname : response.first_name,
															email : response.email,
															phonenumber : phonenumber,
															password : password,
															confirmPassword : password,
															username : "fb_"
																	+ userID,
															acceptRule : true,
														};

														var formContainer = shinobi.fragmentsignup.modal
																.getElementsByClassName('form-container')[0];
														shinobi.mapping
																.renderElement(
																		formContainer,
																		mappingJson);
														var signUpOption = {
															method : 'facebook',
															data : mappingJson,
														};
														shinobi.fragmentsignup
																.signup(signUpOption);

													});
								} else {
									shinobi.notification.notification
											.error('Không thể kết nối với Facebook');
								}

							},
							{
								scope : 'user_birthday, email, user_hometown, user_gender, user_location'
							});
		}
	},

	addEventSignUpButton : function() {

		var signUpButton = shinobi.fragmentsignup.modal
				.querySelector('.signup-button');
		shinobi.fragmentsignup.addEventWhenClick(signUpButton);
		shinobi.fragmentsignup.addEventWhenEnter(signUpButton);
	},

	addEventWhenClick : function(elem) {
		elem.onclick = function() {
			shinobi.fragmentsignup.signup();
		}
	},
	addEventWhenEnter : function(elem) {
		elem.addEventListener('keypress', function(e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentsignup.signup();
			}
		});
	},
	signup : function(signUpOption) {

		var request = shinobi.fragmentsignup.getInput();

		shinobi.fragmentsignup.checkInput(request, function(signUpRequest) {

			shinobi.fragmentsignup.sendRequest(signUpRequest);
		}, signUpOption);
	},

	sendRequest : function(signUpRequest) {
		shinobi.notification.notification.loading();
		shinobi.api.request(shinobi.coreapi.userApi + "createNewUser", JSON
				.stringify(signUpRequest), function(signUpResponse) {
			if (signUpResponse == 'update success') {
				shinobi.notification.notification.loaded();
				shinobi.fragmentsignup.checkMailProcess(signUpRequest);
				shinobi.fragmentsignup.showCheckMailModal(signUpRequest);
				shinobi.fragmentsignup.close()

			}
		});
	},

	showCheckMailModal : function(request) {
		var content = '<p>Xin chào <b>'
				+ request['lastname']
				+ ' '
				+ request['firstname']
				+ '</b>,<br>'
				+ 'Chúng tôi đã gửi mã xác nhận đến email: <b>'
				+ request['email']
				+ '</b><br>Vui lòng xác nhận địa chỉ email để hoàn tất đăng ký tài khoản.<br>Trân trọng. </p>';
		shinobi.notification.confirm(function() {

		}, {
			title : 'Xác nhận email',
			content : content,
			ishiddenfooter : true,
			modalsize : 'is-medium',
		});
	},
	checkMailProcess : function(signUpRequest) {
		if (shinobi.fragmentsignup.hasCheckTrashMail) {
			shinobi.api.request(shinobi.coreapi.mailApi + "sendMail", JSON
					.stringify(signUpRequest), function(sendMailResponse) {

			});
		}
	},

	getInput : function() {
		var formContainer = shinobi.fragmentsignup.modal
				.getElementsByClassName('form-container')[0];

		var listSnbKey = formContainer.querySelectorAll('[snb-key]');
		var request = {};
		for (var i = 0; i < listSnbKey.length; i++) {

			var key = listSnbKey[i].getAttribute('snb-key');
			var value = shinobi.util.getValueInput(listSnbKey[i]);
			request[key] = value;

		}
		return request;
	},

	checkInput : function(request, callback, signUpOption) {

		var formContainer = shinobi.fragmentsignup.modal
				.getElementsByClassName('form-container')[0];
		var hasFillAllInput = true;
		var entries = Object.entries(request);
		entries
				.forEach(function(item) {
					var key = item[0];
					var value = item[1];
					var elem = formContainer.querySelector('[snb-key="' + key
							+ '"]');
					if (typeof value == 'string' && value == ''
							|| typeof value == 'boolean' && value == false) {
						shinobi.notification.notification
								.error('Nhập đầy đủ thông tin và đồng ý các điều khoản');
						elem.classList.add('is-danger');
						hasFillAllInput = false;
					} else {
						elem.classList.remove('is-danger');
					}

				});

		if (hasFillAllInput) {
			if (request['password'] == request['confirmPassword']) {
				request['password'] = shinobi.util.sha256(request['password']);
				request['confirmPassword'] = shinobi.util
						.sha256(request['confirmPassword']);
				request['phonereligion'] = shinobi.fragmentsignup
						.getInternationalTelephoneCode();
				request['country'] = shinobi.fragmentsignup
						.getInternationalTelephoneCountry();
				if (signUpOption) {
					var method = signUpOption['method'];
					switch (method) {
					case 'google':
					case 'facebook':
						request['username'] = signUpOption['data']['username'];
						break;
					default:
						request['username'] = request['email'];
						break;
					}
				} else {
					request['username'] = request['email'];
				}

				if (typeof callback == 'function') {
					callback(request);
				}
			} else {
				shinobi.notification.notification
						.error('Xác nhận mật khẩu không trùng khớp');
			}
		}
	},

	getInternationalTelephoneCode : function() {
		return shinobi.util
				.getInternationalTelephoneCode(shinobi.fragmentsignup.intlTelInput);
	},
	getInternationalTelephoneCountry : function() {
		return shinobi.util
				.getInternationalTelephoneCountry(shinobi.fragmentsignup.intlTelInput);
	},

	addEventListButtonControl : function() {
		shinobi.fragmentsignup.listButtonControl = document
				.getElementsByClassName(shinobi.fragmentsignup.classButtonControlSelector);

		for (var i = 0; i < shinobi.fragmentsignup.listButtonControl.length; i++) {
			var button = shinobi.fragmentsignup.listButtonControl[i];
			button.onclick = function() {
				// hidden login modal
				shinobi.fragmentlogin.close();
				// show sign up modal
				shinobi.fragmentsignup.open();
			}
		}

	},
	open : function() {
		if (shinobi.fragmentsignup.modal != '') {
			shinobi.fragmentsignup.modal.classList.add('is-active');
		}

	},

	close : function() {
		if (shinobi.fragmentsignup.modal != '') {
			shinobi.fragmentsignup.modal.classList.remove('is-active');
		}
	},
};shinobi.gui = (function () {
  var constructor = function (url, option) {
    this.editors = [];
    this.tableId = "dataTable";
    this.detailPanelId = "detailpanel";
    this.buttonGroupId = "buttonGroup";
    this.apiurl = url;
    this.option = option;
    this.detailPanelElem = document.getElementById(this.detailPanelId);
    shinobi.tableHelper.getColname(this.tableId);
    this.tableObject = new shinobi.table(this.tableId);

    this.loadTable = function () {
      // this.tableObject = new shinobi.table(this.tableId);
      this.tableObject.viewDetailPanelId = this.detailPanelId;

      var colNames = this.tableObject.getColnames(this.tableId);
      var tableId = this.tableId;
      var renders = shinobi.tableHelper.getRender(tableId);
      if (!renders[0]) {
        renders[0] = this.tableObject.viewDetailRender;
      }

      var request = {};
      var recordNumber = shinobi.util.getRecordNumber(this.tableId);
      request.recordPerPage = isNaN(recordNumber) ? 10 : recordNumber;

      if (
        option != null &&
        option.hasOwnProperty["tableObjectOption"] &&
        option.tableObjectOption != null &&
        typeof option.tableObjectOption.staticfilters !== "undefined" &&
        option.tableObjectOption.staticfilters != null
      ) {
        this.tableObject.staticfilters = option.tableObjectOption.staticfilters;
      }

      var sort = {};
      sort.colname = "id";
      sort.value = "desc";

      this.tableObject.staticsorts[0] = sort;

      if (
        option != null &&
        option.hasOwnProperty["tableObjectOption"] &&
        option.tableObjectOption != null &&
        typeof option.tableObjectOption.hasCheckDuplicateFilterColumn !== "undefined" &&
        option.tableObjectOption.hasCheckDuplicateFilterColumn != null &&
        typeof option.tableObjectOption.checkDuplicateFilterColumnList !== "undefined" &&
        option.tableObjectOption.checkDuplicateFilterColumnList != null
      ) {
        this.tableObject.hasCheckDuplicateFilterColumn = option.tableObjectOption.hasCheckDuplicateFilterColumn;
        this.tableObject.checkDuplicateFilterColumnList = option.tableObjectOption.checkDuplicateFilterColumnList;
      }

      this.tableObject.initLoadApi(this.apiurl + "/findDataListExport", request, colNames, renders);

      return this;
    };

    this.createElem = function (nodetype, classlist) {
      var elem = document.createElement(nodetype);
      elem.classList.add(classlist);
      return elem;
    };

    this.buildViewPanelObject = function () {
      var object = this;
      var formElem = document.getElementById(this.detailPanelId);

      var snbElems = formElem.querySelectorAll("[snb-key]");

      var result = {};
      snbElems.forEach(function (elem) {
        var colname = elem.getAttribute("snb-key");

        if (elem.hasAttribute("snb-preprocess")) {
          shinobi.mapping.getValueElement(object.detailPanelElem, function (jsonMapping) {
            result[colname] = eval(elem.getAttribute("snb-preprocess"))(elem.value, {
              elem: elem,
              gui: object,
              all: jsonMapping,
            });
          });
        } else if (elem.hasAttribute("snb-editor-index")) {
          result[colname] = shinobiEditors[elem.getAttribute("snb-editor-index")].getData();
        } else if (elem.hasAttribute("snb-datatype")) {
          var datatype = elem.getAttribute("snb-datatype");

          if (datatype == "number") {
            result[colname] = Number(elem.value);
          }
        } else {
          result[colname] = elem.value;
        }
      });

      return result;
    };

    this.registerCreateButton = function () {
      var list = document.getElementById(this.buttonGroupId).getElementsByClassName("createButton");
      var gui = this;
      var createButton = list[0];
      var hasButton = true;
      if (option && option.hasOwnProperty("isHiddenCreateButton") && option["isHiddenCreateButton"] == true) {
        hasButton = false;
        createButton.classList.add("is-hidden");
      }

      if (hasButton) {
        createButton.onclick = function () {
          shinobi.mapping.getValue("#" + gui.detailPanelId, function (jsonMapping) {
            shinobi.notification.confirm(function () {
              gui.createProcess(jsonMapping);
            });
          });
        };
      }
    };

    this.createProcess = function (jsonMapping) {
      var gui = this;
      if (option && option.hasOwnProperty("createFunction")) {
        option["createFunction"](gui, jsonMapping);
        return;
      }
      if (option && option.hasOwnProperty("checkEmpty") && option["checkEmpty"]) {
        shinobi.mapping.getValueElement(
          gui.detailPanelElem,
          function (reJsonMapping) {
            delete reJsonMapping["id"];
            Object.values(reJsonMapping).includes("")
              ? shinobi.util.fillInputMessage()
              : gui.sendCreateRequest(jsonMapping);
          },
          {
            checkEmpty: true,
          }
        );
        return;
      }

      gui.sendCreateRequest(jsonMapping);
    };

    this.sendCreateRequest = function (jsonMapping) {
      var gui = this;
      delete jsonMapping.id;
      shinobi.notification.notification.loading();
      shinobi.api.request(gui.apiurl + "/create", JSON.stringify(jsonMapping), function (content) {
        shinobi.notification.notification.info(content);

        gui.loadTable();
      });
    };
    this.registerDeleteButton = function () {
      var list = document.getElementById(this.buttonGroupId).getElementsByClassName("deleteButton");
      var deleteButton = list[0];
      var gui = this;
      var hasButton = true;
      if (option && option.hasOwnProperty("isHiddenDeleteButton") && option["isHiddenDeleteButton"] == true) {
        hasButton = false;
        deleteButton.classList.add("is-hidden");
      }

      if (hasButton) {
        deleteButton.onclick = function () {
          gui.checkDetailPanelJsonHasId(gui, function (jsonMapping) {
            if (option && option.hasOwnProperty("deleteFunction")) {
              option["deleteFunction"](gui, jsonMapping);
            } else {
              shinobi.notification.notification.loading();
              shinobi.api.request(gui.apiurl + "/remove", JSON.stringify(jsonMapping), function (content) {
                shinobi.notification.notification.info(content);
                gui.loadTable();
              });
            }
          });
        };
      }
    };

    this.registerUpdateButton = function () {
      var updateButton = document.getElementById(this.buttonGroupId).getElementsByClassName("updateButton")[0];

      var gui = this;
      var hasButton = true;
      if (option && option.hasOwnProperty("isHiddenUpdateButton") && option["isHiddenUpdateButton"] == true) {
        hasButton = false;
        updateButton.classList.add("is-hidden");
      }
      if (hasButton) {
        updateButton.onclick = function () {
          gui.checkDetailPanelJsonHasId(gui, function (jsonMapping) {
            if (option && option.hasOwnProperty("updateFunction")) {
              option["updateFunction"](gui, jsonMapping);
            } else {
              gui.updateProcess(jsonMapping);
            }
          });
        };
      }
    };

    this.updateProcess = function (jsonMapping) {
      var gui = this;
      if (option && option.hasOwnProperty("updateFunction")) {
        option["updateFunction"](gui, jsonMapping);
        return;
      }
      if (option && option.hasOwnProperty("checkEmpty") && option["checkEmpty"]) {
        shinobi.mapping.getValueElement(
          gui.detailPanelElem,
          function (reJsonMapping) {
            Object.values(reJsonMapping).includes("")
              ? shinobi.util.fillInputMessage()
              : gui.sendUpdateRequest(jsonMapping);
          },
          {
            checkEmpty: true,
          }
        );
        return;
      }

      gui.sendUpdateRequest(jsonMapping);
    };

    this.sendUpdateRequest = function (jsonMapping) {
      var gui = this;
      shinobi.notification.notification.loading();

      shinobi.api.request(gui.apiurl + "/merge", JSON.stringify(jsonMapping), function (content) {
        shinobi.notification.notification.info(content);
        gui.loadTable();
      });
    };
    this.checkDetailPanelJsonHasId = function (gui, callback) {
      shinobi.mapping.getValue("#" + gui.detailPanelId, function (jsonMapping) {
        if (jsonMapping.hasOwnProperty("id") && jsonMapping["id"].trim() != "") {
          shinobi.notification.confirm(function () {
            if (typeof callback == "function") {
              callback(jsonMapping);
            }
          });
        } else {
          shinobi.notification.notification.error("Chưa chọn record nào trong danh sách để thao tác");
        }
      });
    };

    this.registerRefreshButton = function () {
      var list = document.getElementById(this.buttonGroupId).getElementsByClassName("refreshButton");

      var refreshButton = list[0];

      var table = this.tableObject;
      refreshButton.addEventListener("click", function () {
        location.reload();
      });
    };

    this.loadAll = function () {
      this.loadTable();
      this.registerCreateButton();
      this.registerRefreshButton();
      this.registerDeleteButton();
      this.registerUpdateButton();
    };
  };

  return constructor;
})();
shinobi.initbulma = {

	quickviews: [],
	calendars: '',
	tagsInput: '',
	iconpicker: '',
	bulmaSlider: '',

	build: function () {
		shinobi.initbulma.addEventNavbarBurger();
		shinobi.initbulma.addEventModal();
		shinobi.initbulma.addEventTabs();
		shinobi.initbulma.addEventDropdown();
		shinobi.initbulma.activeNavbarHeader();


		if (typeof bulmaSlider == 'function') {

			shinobi.initbulma.bulmaSlider = bulmaSlider.attach();
		}

		if (typeof bulmaTagsinput == 'function') {

			shinobi.initbulma.tagsInput = bulmaTagsinput.attach();
		}

		if (typeof bulmaIconpicker == 'function') {

			shinobi.initbulma.iconpicker = bulmaIconpicker.attach();
		}

		if (typeof bulmaCalendar == 'function') {

			shinobi.initbulma.calendars = bulmaCalendar.attach('[type="date"]:not(.is-init-bulma-false)',
				{
					'dateFormat': 'DD/MM/YYYY',
					'displayMode': 'dialog',
					closeOnOverlayClick: false,
				});

		}

	},

	addEventDropdown: function () {

		var dropdownList = document
			.querySelectorAll('.dropdown:not(.is-hoverable)');

		for (var i = 0; i < dropdownList.length; i++) {

			var dropdown = dropdownList[i];
			shinobi.initbulma.addEventDropdownElem(dropdown);
		}
	},

	addEventDropdownElem: function (dropdown) {
		var button = dropdown.getElementsByClassName('dropdown-trigger')[0]
			.getElementsByClassName('button')[0];
		if (button) {
			button.onclick = function () {
				dropdown.classList.toggle('is-active');
			}
		}
	},

	activeNavbarHeader: function () {

		var list = document.querySelectorAll('.navbar.is-init');
		for (var i = 0; i < list.length; i++) {
			var navbar = list[i];
			shinobi.initbulma.activeNavbar(navbar);
		}
	},

	activeNavbar: function (navbar) {
		var listItem = navbar
			.querySelectorAll('.navbar-item[href],.navbar-link[href]');
		var pathNameAppendSearch = shinobi.initbulma.getPathNameAppendSearch();
		for (var i = 0; i < listItem.length; i++) {
			var item = listItem[i];
			var href = item.getAttribute('href');

			if (pathNameAppendSearch.includes(href)) {
				item.classList.add('is-active');
				shinobi.initbulma.activeParentNavbarItem(item.parentNode);
			}
		}

		var refListItem = navbar
			.querySelectorAll('.navbar-item[ref-list],.navbar-link[ref-list]');

		for (var j = 0; j < refListItem.length; j++) {
			var item1 = refListItem[j];
			var refList = item1.getAttribute('ref-list').split(',');
			refList.forEach(function (refItem) {
				if (refItem == pathNameAppendSearch) {
					item1.classList.add('is-active');
					shinobi.initbulma.activeParentNavbarItem(item1.parentNode);
				}
			});
		}
	},

	getPathNameAppendSearch: function () {
		return window.location.pathname + window.location.search;
	},

	activeParentNavbarItem: function (parent) {

		if (parent.hasAttribute('class')) {
			var classList = parent.getAttribute('class');
			var listStopLoop = ['navbar-start', 'nabvar-end', 'navbar-menu',
				'navbar-brand', 'navbar'];
			listStopLoop.forEach(function (classItem) {
				if (classList.includes(classItem)) {
					return;
				}
			});

			if (classList.includes('navbar-item')
				&& classList.includes('has-dropdown')) {
				var navbarLink = parent.getElementsByClassName('navbar-link')[0];
				if (navbarLink) {
					navbarLink.classList.add('is-active');
				}
			} else {
				shinobi.initbulma.activeParentNavbarItem(parent.parentNode);
			}

		}
	},

	activeTab: function (listLi, li) {

		for (var l = 0; l < listLi.length; l++) {
			(listLi[l] == li) ? listLi[l].classList.add('is-active')
				: listLi[l].classList.remove('is-active');

			if (listLi[l].hasAttribute('tab-container-id')) {
				var container = document.getElementById(listLi[l].getAttribute('tab-container-id'));
				if (container) {
					(listLi[l] == li) ? container.classList.remove('is-hidden')
						: container.classList.add('is-hidden');
				}
			}
		}

	},

	addEventTabs: function () {
		var tabsList = document.querySelectorAll('.tabs.is-init');

		for (var i = 0; i < tabsList.length; i++) {
			shinobi.initbulma.addEvenOneTab(tabsList, i);
		}

	},

	addEvenOneTab: function (tabsList, i) {
		var tabs = tabsList[i];
		var listLi = tabs.getElementsByTagName('li');
		var classList = tabs.getAttribute('class');
		for (var l = 0; l < listLi.length; l++) {
			if (!classList.includes('is-not-active-click')) {
				listLi[l].onclick = function () {
					var li = this;
					shinobi.initbulma.activeTab(listLi, li);

				}
			}
			if (classList.includes('is-active-pathname')) {
				var pathname = shinobi.initbulma.getPathNameAppendSearch();
				var a = listLi[l].querySelector('a[href]');
				if (a) {
					var href = a.getAttribute('href');
					if (pathname.includes(href)) {
						listLi[l].classList.add('is-active');
					}
				}
			}
		}
	},

	addEventModal: function () {

		var listModal = document.querySelectorAll('.modal');

		listModal.forEach(function (item, index) {

			shinobi.initbulma.modalEventListener(item);
		});
	},

	modalOpen: function (modal) {
		modal.classList.add("is-active");
		document.documentElement.classList.add('is-clipped');
	},

	modalClose: function (modal) {
		modal.classList.remove("is-active");
		document.documentElement.classList.remove('is-clipped');
	},


	modalEventListener: function (modal) {

		var closeButtonList = modal
			.querySelectorAll('.delete,[aria-label="close"]');
		if (closeButtonList.length > 0) {
			var closeButton = closeButtonList[0];
			if (closeButton) {
				closeButton.onclick = function () {
					shinobi.initbulma.modalClose(modal);
				}
			}
		}

		var cancelModalButtonList = modal
			.getElementsByClassName("cancel-modal-button");

		for (var i = 0; i < cancelModalButtonList.length; i++) {

			cancelModalButtonList[i].onclick = function () {
				shinobi.initbulma.modalClose(modal);
			}
		}

		var modalBackground = modal.getElementsByClassName("modal-background");

		for (var j = 0; j < modalBackground.length; j++) {

			modalBackground[j].onclick = function () {
				shinobi.initbulma.modalClose(modal);
			}
		}

		window.addEventListener("keydown", function (event) {
			if (event.key == 'Escape') {
				shinobi.initbulma.modalClose(modal);
			}
		}, true);

		var footer = modal.getElementsByTagName("footer")[0];

		if (footer) {

			var buttonFooterList = footer.getElementsByTagName("button");

			for (var l in buttonFooterList) {

				buttonFooterList[l].onclick = function () {
					shinobi.initbulma.modalClose(modal);
				}
			}
		}

		if (modal.hasAttribute('control-button-list')) {

			var controlButtonList = modal.getAttribute('control-button-list')
				.split('|');

			for (var k = 0; k < controlButtonList.length; k++) {

				var item = document.getElementById(controlButtonList[k]);

				item.onclick = function () {
					shinobi.initbulma.modalOpen(modal);

					if (item.hasAttribute('snb-render')) {
						var value = item.getAttribute('snb-key');
						var render = item.getAttribute('snb-render');
						eval(render)(item, value);
					}
				}
			}
		}
	},

	addEventNavbarBurger: function () {

		var navbarBurgers = Array.prototype.slice.call(document
			.querySelectorAll('.navbar-burger'), 0);

		if (navbarBurgers.length > 0) {

			navbarBurgers.forEach(function (el) {
				el.addEventListener('click', function () {
					// Get the target from the "data-target" attribute
					var targetId = el.dataset.target;
					var target = document.getElementById(targetId);
					// Toggle the "is-active" class on both the "navbar-burger"
					// and the "navbar-menu"
					el.classList.toggle('is-active');
					target.classList.toggle('is-active');

				});
			});
		}
	},
};shinobi.language = {

	'currentPagelang': '',
	'existLangAttribte': 'snb-exist-lang',
	option: {},
	jsonArray: [],
	dataRender: {},
	hasChangeLanguage: true,
	warningList: [],

	'build': function (option) {

		this.option = option;
		this.setupOption();

		shinobi.language.renderLangCodeSelect(function () {
			shinobi.language.renderPageLanguage();

		});

	},

	setupOption: function () {
		var option = this.option;
		if (option) {
			if (option.hasOwnProperty('autoReload') && option['autoReload']) {
				setInterval(function () {
					shinobi.language.renderPageLanguage();
				}, 2000);
			}
		}
	},

	'renderPageLanguage': function () {

		if (shinobi.language.hasChangeLanguage) {
			shinobi.language.getLangCodeList(function () {
				shinobi.language.hasChangeLanguage = false;

				shinobi.language.buildDataRender(function () {
					shinobi.language.render();
				});
			})
		} else {
			shinobi.language.render();
		}

	},

	buildDataRender: function (callback) {
		shinobi.language.dataRender = {};
		shinobi.language.jsonArray
			.forEach(function (item) {

				shinobi.language.dataRender[item['resourcename']] = item['resourcevalue'];

			});

		if (typeof callback == 'function') {
			callback();
		}
	},
	'render': function () {

		var listSnbLang = document.querySelectorAll('[snb-lang]');
		for (var i = 0; i < listSnbLang.length; i++) {

			shinobi.language.renderElement(listSnbLang[i]);
		}
	},

	renderContainer: function (container) {

		var listSnbLang = container.querySelectorAll('[snb-lang]');
		for (var i = 0; i < listSnbLang.length; i++) {

			shinobi.language.renderElement(listSnbLang[i]);
		}
	},
	renderElement: function (elem) {

		var currentLangCode = window.localStorage.getItem('currentLangCode');
		if (!elem.hasAttribute('language')
			|| elem.getAttribute('language') != currentLangCode) {

			var dataRender = shinobi.language.dataRender;

			var listAttribute = Object.values(elem.attributes);

			var listSnbLangAttribute = listAttribute.filter(function (item) {

				return item.name.includes('snb-lang');
			});

			if (listSnbLangAttribute.length > 0) {
				var attrValue;
				if (listSnbLangAttribute.length == 1) {

					if (dataRender
						.hasOwnProperty(listSnbLangAttribute[0].value)) {
						elem.innerHTML = dataRender[listSnbLangAttribute[0].value];
					} else {

						attrValue = listSnbLangAttribute[0].value;

						shinobi.language.warningElem(elem, attrValue);

					}
				} else {
					listSnbLangAttribute.forEach(function (attributeItem) {
						var attrName = attributeItem.name;
						attrValue = attributeItem.value;
						if (attrName.includes('snb-lang-')) {
							var attributeKey = attrName
								.replace('snb-lang-', '');
							if (dataRender.hasOwnProperty(attrValue)) {
								var attributeData = dataRender[attrValue];

								if (attributeKey == 'innerhtml') {
									elem.innerHTML = attributeData
								} else if (attributeKey == 'value') {
									elem.value = attributeData;
								} else {
									elem.setAttribute(attributeKey,
										attributeData);

								}
							} else {

								shinobi.language.warningElem(elem, attrValue);

							}

						}
					});

				}
				elem.setAttribute('language', currentLangCode)

			}
		}

	},

	warningElem: function (elem, attrValue) {
		if (!shinobi.language.warningList.includes(attrValue)) {
			console.log('---');
			console.log(elem);
			console.log('resourcename: ' + attrValue + '    =    ????');
			shinobi.language.warningList.push(attrValue);
		}
	},

	'renderLangCodeSelect': function (callback) {

		var currentLangCode = window.localStorage.getItem('currentLangCode');
		var selectLangcode = document.getElementById('selectLangcode');
		if (selectLangcode) {
			if (!currentLangCode) {

				window.localStorage.setItem('currentLangCode',
					selectLangcode.value);

			} else {

				selectLangcode.value = currentLangCode;

			}

			selectLangcode.onchange = function () {

				window.localStorage.setItem('currentLangCode', this.value);
				if (shinobi.hasOwnProperty('userstorage')) {
					shinobi.userstorage.updateStorage();
				}
				shinobi.language.hasChangeLanguage = true;

				shinobi.language.renderPageLanguage();

				if (shinobi.language.option.hasOwnProperty('onchangeLangCodeSelectCallback')) {
					shinobi.language.option.onchangeLangCodeSelectCallback();
				}

			}
		} else {
			console.log(' not declare language select');
			window.localStorage.setItem('currentLangCode', 'VN');

		}

		if (typeof callback == 'function') {
			callback();
		}

	},

	'getLangCodeList': function (callback) {

		var currentLangCode = window.localStorage.getItem('currentLangCode');

		var request = {};

		request.langcode = currentLangCode;

		var url = (typeof shinobi.coreapi == 'object' && shinobi.coreapi.languageApi) ? shinobi.coreapi.languageApi
			: '/api/StaticPagePublicApi/';

		shinobi.cacheapi.request(url + 'getListPageCode', JSON
			.stringify(request), function (response) {
				shinobi.language.jsonArray = JSON.parse(response);
				callback(response);
			});

	},

	'free': '<span snb-lang="PAGECODE_FREE"></span>',
	'subscribed': '<span snb-lang="PAGECODE_SUBCRIBED"></span>',
	'onlyFollower': '<span snb-lang="PAGECODE_ONLYFORFOLLOWERS"></span>',
};/* usage: 
 * shinobi.mapping.render("body",json) 
 * shinobi.mapping.render("#elemid",json)
 * shinobi.mapping.render(".classname",json)
 * 
 * HTML:
 * <div snb-key="keyvalue"></div>
 * 
 *  */

shinobi.mapping = {
    'render': function (pattern, json) {
        var jsonArr = JSON.parse(json);

        var searchList = document.querySelectorAll(pattern);

        for (var index = 0; index < searchList.length; index++) {
            var search = searchList[index];

            shinobi.mapping.renderElement(search, jsonArr);
        }
    },
    'renderElement': function (search, jsonArr) {
        for (var elem in jsonArr) {
            var selectors = search.querySelectorAll("[snb-key=" + elem + "]");

            // check current node has snb-key=elem
            if (selectors.length == 0) {

                if (search.hasAttribute('snb-key')) {

                    if (search.getAttribute('snb-key') == elem) {

                        shinobi.mapping.renderSelector(search, jsonArr, elem);
                    }
                }
            }
            //

            for (var i = 0; i < selectors.length; i++) {
                shinobi.mapping.renderSelector(selectors[i], jsonArr, elem);
            }
        }
    },
    'renderSelector': function (selector, jsonArr, elem) {

        var nodeType = selector.nodeType;
        var value = jsonArr[elem];
        if (selector.hasAttribute("snb-render")) {
            var render = selector.getAttribute("snb-render");
            var option = {
                type: 'mapping',
            };
            eval(render)(selector, value, jsonArr);

            return;
        }

        // check formatter
        if (selector.hasAttribute("snb-format")) {
            var formatter = selector.getAttribute("snb-format");

            if ("number" === formatter) {
                var numberValue = Number(value);
                value = numberValue.format(0, 3, ',', '.');
            }

        }

        if (nodeType === 3) {
            selector.innerHTML = value;
        } else if (nodeType === 1) {

            // refactor 12/04/2020
            // check has render attribute

            if (selector.hasAttribute("snb-editor-index")) {
                if (typeof shinobiEditors == 'object') {
                    shinobiEditors[selector.getAttribute("snb-editor-index")]
                        .setData(value);
                } else {
                    if (typeof CKEDITOR == 'object' &&
                        selector.hasAttribute('id')) {
                        (CKEDITOR.instances.hasOwnProperty(selector.id)) ? CKEDITOR.instances[selector.id]
                            .setData(value) : console.log('elem has id' + selector.id +
                                ' has not been replace by CKEDITOR ');

                    } else {
                        console.log('CKEDITOR could not be declare');
                    }
                }

            } else {
                var attributes = selector.attributes;

                var isFound = false;
                for (var i = attributes.length - 1; i >= 0; i--) {
                    var attributeName = attributes[i].name;
                    var attributeValue = attributes[i].value;

                    var index = attributeName.search("snb-key-");
                    if (index >= 0) {
                        isFound = true;
                        var ref = attributeName.substring(8);

                        switch (ref) {
                            case 'value':
                                selector.value = jsonArr[attributeValue];
                                selector.setAttribute(ref, jsonArr[attributeValue]);
                                break;
                            case 'innerhtml':
                                selector.innerHTML = jsonArr[attributeValue];
                                break;
                            default:
                                selector.setAttribute(ref, jsonArr[attributeValue]);
                                break;
                        }
                    }
                }
                if (isFound === false) {

                    if (!['INPUT', 'SELECT', 'TEXTAREA']
                        .includes(selector.tagName)) {
                        selector.innerHTML = value;
                    } else {
                        value = shinobi.util.decodeValue(value);
                        switch (selector.tagName) {

                            case 'OPTION':
                                if (selector.hasAttribute("snb-key-innerhtml")) {
                                    selector.innerHTML = value;
                                }
                                break;
                            case 'INPUT':
                                switch (selector.type) {
                                    case 'checkbox':
                                        selector.checked = JSON.parse(value);
                                        break;
                                    case 'radio':
                                        if (value) {
                                            // var name = selector.getAttribute('name');
                                            // var checkedInput = document
                                            // 	.querySelector('input[type="radio"][name="'
                                            // 		+ name
                                            // 		+ '"][radio-value="'
                                            // 		+ value + '"]');
                                            // 		console.log(checkedInput);
                                            // if (checkedInput) {
                                            // 	checkedInput.checked = true;
                                            // }
                                            if (selector.hasAttribute('radio-value')) {
                                                (selector.getAttribute('radio-value') == value) ? selector.checked = true : selector.checked = false;
                                            }
                                        }
                                        break;
                                    default:
                                        selector.value = value;
                                        break;
                                }
                                break;
                            case 'SELECT':
                                selector.value = value;
                                break;

                            default:
                                selector.value = value;
                                break;
                        }
                    }
                }
            }

        }
    },
    'applySnbFormat': function (selector, value) {

    },
    getValue: function (selector, callback, option) {
        var elem = document.querySelector(selector);
        shinobi.mapping.getValueElement(elem, callback, option);
    },
    getValueElement: function (elem, callback, option) {
        var listSnb = elem.querySelectorAll('[snb-key]');
        var listRadioNameHasGetValue = [];
        var jsonMapping = {};
        listSnb
            .forEach(function (item) {

                var key = item.getAttribute('snb-key');

                if (item.hasAttribute('snb-editor-index')) {
                    jsonMapping[key] = shinobi.mapping
                        .getValueShinobiEditor(item, {
                            container: elem
                        });

                } else {
                    var getValueMappingNormalTagOption = {
                        container: elem,
                        listRadioNameHasGetValue: listRadioNameHasGetValue,
                    };
                    if (option && option.hasOwnProperty('getHtml') && option.getHtml) {
                        getValueMappingNormalTagOption.getHtml = true;
                    }
                    if (option && option.hasOwnProperty('getText') && option.getText) {
                        getValueMappingNormalTagOption.getText = true;
                    }
                    jsonMapping[key] = shinobi.mapping
                        .getValueMappingNormalTag(
                            item, getValueMappingNormalTagOption
                        )
                }

                shinobi.mapping.handleOptionMapping(item, jsonMapping,
                    option);
            });

        if (typeof callback == 'function') {
            callback(jsonMapping);
        }
    },

    handleOptionMapping: function (item, jsonMapping, option) {
        if (option) {
            var tagName = item.tagName;
            var key = item.getAttribute('snb-key');

            if (option.hasOwnProperty('checkEmpty')) {
                var isEmpty = (jsonMapping[key] == '') ? true : false;
                if (!item.classList.contains('disable-checkempty')) {


                    switch (tagName) {
                        case 'INPUT':
                        case 'TEXTAREA':
                            (isEmpty) ? item.classList.add('is-danger') : item.classList.remove('is-danger');
                            break;
                        case 'SELECT':
                            (isEmpty) ? item.parentElement.classList.add('is-danger') : item.parentElement.classList.remove('is-danger');
                            break;
                        default:
                            break;
                    }
                }

                if (item.hasAttribute('snb-editor-index')) {
                    var editorItem = CKEDITOR.instances[item.getAttribute('id')].container.$;
                    if (isEmpty) {
                        editorItem.classList.add('input');
                        editorItem.classList.add('is-danger');
                    } else {
                        editorItem.classList.remove('input');
                        editorItem.classList.remove('is-danger');
                    }

                }

                if (tagName == 'INPUT' && item.getAttribute('type') == 'file') {
                    var fileParentInput = shinobi.util.getParentElementHasAttribute(item, {
                        type: 'class',
                        value: 'file',
                    });



                    (isEmpty) ? fileParentInput.classList.add('is-danger') : fileParentInput.classList.remove('is-danger');
                }

                if (tagName == 'INPUT' && item.hasAttribute('snb-date-filter')) {
                    (isEmpty) ? item.parentElement.classList.add('has-border-danger') : item.parentElement.classList.remove('has-border-danger');
                }

            }
        }
    },

    getValueMappingNormalTag: function (item, option) {
        var returnValue;
        var listRadioNameHasGetValue = option['listRadioNameHasGetValue'];
        var tagName = item.tagName;
        switch (tagName) {
            case 'INPUT':
                var type = (item.hasAttribute('type')) ? item.getAttribute('type') :
                    'text';

                switch (type) {

                    case 'radio':
                        var name = item.getAttribute('name');
                        if (name) {
                            listRadioNameHasGetValue.push(name);
                            var checkedValue = document
                                .querySelector('input[type="radio"][name="' + name +
                                    '"]:checked');
                            returnValue = (checkedValue) ? checkedValue
                                .getAttribute('radio-value') : false;

                        } else {
                            returnValue = item.checked;
                        }
                        break;
                    case 'file':
                        returnValue = (item.hasAttribute('image-url')) ? item
                            .getAttribute('image-url') : item.value;
                        break;
                    case 'tags':
                        var tagInput = shinobi.util.getTagInputMappingElem(item);
                        if (tagInput) {
                            returnValue = tagInput.tags.toString();
                        }
                        break;
                    case 'checkbox':
                        returnValue = item.checked;
                        break;
                    case 'text':
                    default:
                        returnValue = item.value.trim();
                        break;
                }
                break;
            case 'SELECT':
            case 'TEXTAREA':
                returnValue = item.value.trim();
                break;
            default:

                if (option && option.hasOwnProperty('getHtml') && option.getHtml) {
                    returnValue = item.innerHTML.trim();
                }
                if (option && option.hasOwnProperty('getText') && option.getText) {
                    returnValue = item.innerText.trim();
                }
                break;
        }

        returnValue = shinobi.mapping.checkPreProcess(item, {
            container: option['container'],
            returnValue: returnValue,
        });

        return returnValue;
    },

    replaceFormWithLabel: function (selector) {
        shinobi.mapping.replaceFormWithLabelElement(document.querySelector(selector));
    },

    replaceFormWithLabelElement: function (elem) {
        var listSnb = elem.querySelectorAll('[snb-key]');
        for (var i = 0; i < listSnb.length; i++) {
            shinobi.mapping.replaceFormWithLabelSnbKey(listSnb[i]);
        }
    },

    replaceFormWithLabelSnbKey: function (item) {
        var tagName = item.tagName;
        var label = document.createElement('p');
        var value = item.value;
        label.setAttribute('class', 'is-italic');
        console.log(item);
        if (['INPUT', 'SELECT', 'TEXTAREA'].includes(tagName)) {

            switch (tagName) {
                case 'SELECT':
                    var content = (item.selectedIndex > 0) ? item.options[item.selectedIndex].text : '';
                    label.innerHTML = content;
                    item.parentElement.parentElement.replaceChild(label, item.parentElement);
                    break;
                case 'TEXTAREA':
                case 'INPUT':
                default:
                    label.innerHTML = value;
                    item.parentElement.replaceChild(label, item);
                    break;

            }

        }
    },

    checkPreProcess: function (item, option) {
        var inputValue = option['returnValue'];
        var container = option['container'];
        var outputValue = inputValue;

        if (item.hasAttribute('snb-preprocess')) {
            outputValue = eval(item.getAttribute("snb-preprocess"))(inputValue, {
                elem: item,
                container: container,
            })
        }

        if (item.getAttribute("snb-datatype")) {
            var newValueWithDatatype = JSON.parse(outputValue);
            outputValue = (newValueWithDatatype) ? newValueWithDatatype :
                outputValue;
        }

        return outputValue;
    },

    getValueShinobiEditor: function (item, option) {
        var returnValue;
        if (typeof shinobiEditors == 'object') {
            returnValue = shinobiEditors[item.getAttribute("snb-editor-index")]
                .getData();
        } else {
            if (typeof CKEDITOR == 'object' && item.hasAttribute('id')) {
                returnValue = (CKEDITOR.instances.hasOwnProperty(item.id)) ? CKEDITOR.instances[item.id]
                    .getData() :
                    '';

            } else {
                returnValue = '';
            }
        }

        returnValue = shinobi.mapping.checkPreProcess(item, {
            container: option['container'],
            returnValue: returnValue,
        });

        return returnValue;
    },
    clear: function (selector, callback, option) {
        var elem = document.querySelector(selector);
        shinobi.mapping.clearElement(elem, callback, option);
    },

    clearElement: function (elem, callback, option) {
        var listSnb = elem.querySelectorAll('[snb-key]');
        listSnb.forEach(function (item) {
            var tagName = item.tagName;
            switch (tagName) {
                case 'INPUT':
                    var type = item.type;
                    switch (type) {
                        case 'checkbox':
                        case 'radio':
                            item.checked = false;
                            break;
                        case 'file':
                            (item.hasAttribute('image-url')) ? item
                                .removeAttribute('image-url') : item.value = '';
                            var name = item.parentElement.querySelector('.file-name');
                            if (name) {
                                name.innerHTML = '';
                            }
                            var parent = shinobi.util.getParentElementHasAttribute(item, {
                                type: 'class',
                                value: 'field'
                            })

                            if (parent) {
                                var info = parent.querySelector('.image-info');
                                if (info) {
                                    info.remove();
                                }
                            }
                            break;
                        case 'text':
                        default:
                            item.value = '';
                            break;
                    }
                    break;
                case 'SELECT':
                case 'TEXTAREA':
                    item.value = '';
                    break;
                default:
                    break;
            }

            var attributes = item.attributes;

            for (var i = attributes.length - 1; i >= 0; i--) {
                var attributeName = attributes[i].name;

                var index = attributeName.search("snb-key-");
                if (index >= 0) {
                    var ref = attributeName.substring(8);

                    switch (ref) {
                        case 'value':
                            item.value = '';
                            item.removeAttribute(ref);
                            break;
                        case 'innerhtml':
                            item.innerHTML = '';
                            break;
                        default:
                            item.removeAttribute(ref);
                            break;
                    }
                }
            }
        });

        if (typeof callback == 'function') {
            callback();
        }
    },
};shinobi.menu = {

	'moduleTable': '',

	'tableId': 'dataTable',

	'previewPatern': '#previewContainer',

	'build': function () {

		shinobi.menu.renderListModule();

		shinobi.menu.addEventAddSubMenu();

		shinobi.menu.addEventIconPicker();
	},

	'addEventIconPicker': function () {

		if (!shinobi.initbulma) {
			bulmaIconpicker.attach();
		}

		setTimeout(function () {

			var iconpickerModal = document
				.getElementsByClassName('iconpicker-modal')[0];

			iconpickerModal.classList.add('is-medium');

		}, 2000);

	},

	'addEventAddSubMenu': function () {

		var createSubmenuButton = document
			.getElementById('createSubmenuButton');
		createSubmenuButton.onclick = function () {

			var previewContainer = document.getElementById('previewContainer');

			var parentMenuData = {};
			// parentMenuData.menuparent = null;
			parentMenuData.modulename = previewContainer.getAttribute('value');

			shinobi.menu
				.activeMenuItemInfomationModal(
					parentMenuData,
					function (menuData) {
						shinobi.menu
							.createAndInsertMenuItemChildNode(menuData);
					});
		}

	},
	'renderListModule': function () {

		shinobi.menu.moduleTable = new shinobi.table(shinobi.menu.tableId);
		// table1.viewDetailPanelId = "detailpanel";

		var colNames = shinobi.menu.moduleTable
			.getColnames(shinobi.menu.tableId);

		var renders = [];
		renders[0] = shinobi.menu.viewMenuStructure;
		// renders[1] = table1.numberFormatRender;
		// renders[2] = erLib.renderUserTypeTable;
		// renders[3] = table1.inputableRender;

		var request = {};
		request.recordPerPage = shinobi.util
			.getRecordNumber(shinobi.menu.tableId);

		var filter = {};
		filter.colname = "id";
		filter.operator = ">";
		filter.value = 0;

		shinobi.menu.moduleTable.staticfilters[0] = filter;

		var sort = {};
		sort.colname = "id";
		sort.value = "desc";

		shinobi.menu.moduleTable.sorts[0] = sort;

		shinobi.menu.moduleTable
			.initLoadApi("/authenapi/ModuleApi/findDataList", request,
				colNames, renders);

	},

	'viewMenuStructure': function (elem, row, col) {

		var moduleName = elem.innerHTML;

		elem.innerHTML = '<a class="button is-small is-icon is-info"><span class="icon"><i class="fal fa-search"></i></span></a>';

		elem.onclick = function () {

			shinobi.util.removeClass('menuButtonGroup', 'is-hidden');

			shinobi.menu.createStructure(moduleName);

		}
	},

	'createStructure': function (moduleName) {

		shinobi.menu.getModuleMenuData(moduleName, function (menuData) {

			var previewContainer = document.getElementById('previewContainer');
			previewContainer.innerHTML = '';

			previewContainer.setAttribute('value', moduleName);

			shinobi.menurender.build(shinobi.menu.previewPatern, menuData);

			shinobi.menurender.showAllMenu(shinobi.menu.previewPatern);

			setTimeout(function () {

				shinobi.menurender.showAllMenu(shinobi.menu.previewPatern);
			}, 1000);

			shinobi.menu.addEventInsertChildNode(shinobi.menu.previewPatern);

			shinobi.menu.addEventDeleteMenuItem(shinobi.menu.previewPatern);

			shinobi.menu.addEventUpdateMenuItem(shinobi.menu.previewPatern);

			shinobi.menu.addEventMoveUpMenuItem(shinobi.menu.previewPatern);

			shinobi.menu.addEventMoveDownMenuItem(shinobi.menu.previewPatern);

		});

	},

	'addEventMoveDownMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addMoveDownItemButton(listMenuItem, i);

		}
	},

	'addMoveDownItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon tooltip');
		span.setAttribute('data-tooltip', 'Chuyển xuống');
		span.innerHTML = '<i class="fal fa-arrow-down"></i>';

		var item = listMenuItem[i];

		if (item.parentNode.nextElementSibling) {

			// item.insertBefore(span, item.firstChild);
			item.appendChild(span);

			span.onclick = function () {

				var parentMenuData = shinobi.menu.getParentMenuData(this);

				parentMenuData.menucode = parentMenuData.menuparent;

				shinobi.menu.callApiUpdateMenu(
					'/authenapi/MenuApi/moveMenuDown', parentMenuData);

			}
		}

	},

	'addEventMoveUpMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addMoveUpItemButton(listMenuItem, i);

		}
	},

	'addMoveUpItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon tooltip');
		span.setAttribute('data-tooltip', 'Chuyển lên');
		span.innerHTML = '<i class="fal fa-arrow-up"></i>';

		var item = listMenuItem[i];

		if (item.parentNode.previousElementSibling) {

			// item.insertBefore(span, item.firstChild);
			item.appendChild(span);

			span.onclick = function () {

				var parentMenuData = shinobi.menu.getParentMenuData(this);

				parentMenuData.menucode = parentMenuData.menuparent;

				shinobi.menu.callApiUpdateMenu('/authenapi/MenuApi/moveMenuUp',
					parentMenuData);

			}
		}
	},

	'callApiUpdateMenu': function (api, parentMenuData) {
		shinobi.notification.notification.loading();
		shinobi.api.request(api, JSON.stringify(parentMenuData), function (
			response) {

			if (response == 'update success') {

				shinobi.notification.notification.info('Cập nhật thành công');
				setTimeout(function () {
					shinobi.menu.createStructure(parentMenuData.modulename);
				}, 1000)
			}
		})
	},

	'addEventUpdateMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addUpdateItemButton(listMenuItem, i);

		}
	},

	'addUpdateItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon has-text-info tooltip');
		span.setAttribute('data-tooltip', 'Chỉnh sửa');
		span.innerHTML = '<i class="fal fa-pen"></i>';

		var item = listMenuItem[i];

		// item.insertBefore(span, item.firstChild);
		item.appendChild(span);

		span.onclick = function () {

			var parentMenuData = shinobi.menu.getParentMenuData(this);
			var aTag = item.getElementsByTagName('a')[0];
			parentMenuData.menudes = aTag.getAttribute('title');
			parentMenuData.menucode = aTag.getAttribute('id');
			parentMenuData.menuicon = aTag.getAttribute('icon-class');
			parentMenuData.menuname = aTag.innerHTML;
			parentMenuData.menuurl = aTag.getAttribute('href');
			shinobi.menu
				.activeMenuItemInfomationModal(
					parentMenuData,
					function (menuData) {

						menuData.menucode = parentMenuData.menucode;

						shinobi.api
							.request(
								'/authenapi/MenuApi/updateMenu',
								JSON.stringify(menuData),
								function (response) {

									if (response == 'update success') {

										shinobi.notification.notification
											.info('Cập nhật thành công');
										setTimeout(
											function () {
												shinobi.menu
													.createStructure(parentMenuData.modulename);
											}, 1000)
									}
								});
					});

		}

	},

	'addEventDeleteMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addDeleteItemButton(listMenuItem, i);

		}
	},

	'addDeleteItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon has-text-danger tooltip');
		span.setAttribute('data-tooltip', 'Xóa');
		span.innerHTML = '<i class="fal fa-times"></i>';

		var item = listMenuItem[i];

		// item.insertBefore(span, item.firstChild);
		item.appendChild(span);

		span.onclick = function () {

			var parentMenuData = shinobi.menu.getParentMenuData(this);

			var confirmRemoveMenuItemModal = document
				.getElementById('confirmRemoveMenuItemModal');
			confirmRemoveMenuItemModal.classList.add('is-active');

			var acceptRemoveMenuItemModal = document
				.getElementById('acceptRemoveMenuItemModal');

			acceptRemoveMenuItemModal.onclick = function () {

				parentMenuData.menucode = parentMenuData.menuparent;

				delete parentMenuData.menuparent;

				shinobi.api
					.request(
						'/authenapi/MenuApi/deleteMenu',
						JSON.stringify(parentMenuData),
						function (response) {

							if (response == 'update success') {

								shinobi.notification.notification
									.info('Xóa thành công');
								setTimeout(
									function () {
										shinobi.menu
											.createStructure(parentMenuData.modulename);
									}, 1000)
							}
						})

				confirmRemoveMenuItemModal.classList.remove('is-active');

			}

		}

	},

	'activeMenuItemInfomationModal': function (parentMenuData, callback) {

		if (!parentMenuData.menudes) {

			parentMenuData.menudes = '';
		}
		if (!parentMenuData.menuicon) {

			parentMenuData.menuicon = shinobi.menurender.defaultIcon;
		}
		if (!parentMenuData.menuname) {

			parentMenuData.menuname = '';
		}
		if (!parentMenuData.menuurl) {

			parentMenuData.menuurl = '';
		}

		var menuItemInfomationModal = document
			.getElementById('menuItemInfomationModal');

		if (!parentMenuData.menuparent) {

			menuItemInfomationModal.querySelectorAll('[snb-key=menuparent]')[0]
				.removeAttribute('value');
		}
		var previewIcon = menuItemInfomationModal
			.getElementsByClassName('iconpicker-preview')[0];

		previewIcon.innerHTML = '<i snb-key="menuicon" snb-key-class="menuicon" class="iconpicker-icon-preview icon-menu"></i>';

		menuItemInfomationModal.classList.add('is-active');

		shinobi.mapping.render('#menuItemInfomationModal', JSON
			.stringify(parentMenuData));

		var acceptModalButton = document.getElementById('acceptModalButton');

		acceptModalButton.onclick = function () {

			var menuData = shinobi.menu.getModalInput();

			callback(menuData);

			menuItemInfomationModal.classList.remove('is-active');

		}
	},

	'addEventInsertChildNode': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addInsertItemButton(listMenuItem, i);

		}

	},
	'addInsertItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon has-text-success tooltip');
		span.setAttribute('data-tooltip', 'Thêm menu con');
		span.innerHTML = '<i class="fal fa-plus"></i>';

		var item = listMenuItem[i];

		// item.insertBefore(span, item.firstChild);
		item.appendChild(span);

		span.onclick = function () {

			var parentMenuData = shinobi.menu.getParentMenuData(this);

			shinobi.menu
				.activeMenuItemInfomationModal(
					parentMenuData,
					function (menuData) {
						shinobi.menu
							.createAndInsertMenuItemChildNode(menuData);
					});

		}

		// remove event toggle
		item.onclick = function () {

		}
	},

	'createAndInsertMenuItemChildNode': function (menuData) {

		shinobi.notification.notification.loading();

		shinobi.api.request('/authenapi/MenuApi/createMenu', JSON
			.stringify(menuData), function (response) {

				if (response == 'update success') {

					shinobi.notification.notification.info('Tạo mới thành công');

					setTimeout(function () {
						shinobi.menu.createStructure(menuData.modulename);
					}, 1000)

				}
			})

	},
	'getParentMenuData': function (iconElem) {

		var menuItem = iconElem.parentNode;

		var aTag = menuItem.getElementsByTagName('a')[0];

		var previewContainer = document.getElementById('previewContainer');

		var object = {};

		object.menuparent = aTag.getAttribute('id');
		object.modulename = previewContainer.getAttribute('value');

		return object;

	},

	'getModalInput': function () {

		var menuItemInfomationModal = document
			.getElementById('menuItemInfomationModal');

		var listSnbKey = menuItemInfomationModal.querySelectorAll('[snb-key]');

		var object = {};

		for (var i = 0; i < listSnbKey.length; i++) {

			var snbKey = listSnbKey[i].getAttribute('snb-key');

			var value = listSnbKey[i].value;

			if (value != '') {

				object[snbKey] = value;
			}

		}

		var iconpickerPreview = document
			.getElementsByClassName('iconpicker-preview')[0];
		var iconClass = iconpickerPreview.getElementsByTagName('i')[0]
			.getAttribute('class');
		object.menuicon = iconClass;
		return object;
	},
	'getModuleMenuData': function (moduleName, callback) {

		var request = {};
		request.modulename = moduleName;
		console.log(window.localStorage.getItem("currentModule"));
		console.log(moduleName);
		shinobi.notification.notification.loading();

		shinobi.api.request('/authenapi/MenuApi/getListMenu', JSON
			.stringify(request), function (response) {

				var jsonArr = JSON.parse(response);
				shinobi.notification.notification.loaded();

				callback(jsonArr);
			});
	},

};shinobi.menumodule = {

	'currentModule': '',

	'patern': '',

	'container': '',

	'build': function (patern, option) {

		shinobi.menumodule.patern = patern;

		var container = document.querySelectorAll(patern)[0];

		shinobi.menumodule.container = container;

		shinobi.menumodule.render(option);

	},

	'activeCurrentTab': function (container, option) {
		var shinobimenu = container;
		var hrefList = shinobimenu.querySelectorAll('[href]');

		for (var j = 0; j < hrefList.length; j++) {
			var pathname = window.location.pathname;
			var href = hrefList[j].getAttribute('href');
			if (option && option.hasOwnProperty('includesSearch')) {
				if (option.includesSearch) {
					pathname = pathname + window.location.search;
				}
			}

			if (option && option.hasOwnProperty('notCareSearch')) {
				if (option.notCareSearch) {
					pathname = window.location.pathname;
					href = (href.indexOf('?')) ? href.slice(0, href.indexOf('?')) : href;
				}
			}
			if (href == pathname) {

				hrefList[j].parentNode.classList.add('is-active');

				shinobi.menumodule
					.openParentNode(hrefList[j].parentNode.parentNode);

			}
		}
	},

	'renderMenuModuleSelectHeader': function (query) {

		var currentModule = window.localStorage.getItem('currentModule');
		if (!currentModule || currentModule == '') {
			shinobi.menumodule.setDefaultModule(function () {
				shinobi.menumodule.buildHeaderSelectMenuModule(query);
			});
		} else {
			shinobi.menumodule.buildHeaderSelectMenuModule(query);
		}

	},

	buildHeaderSelectMenuModule: function (query) {
		var container = document.querySelector(query);

		container
			.setAttribute('class', 'navbar-item has-dropdown is-hoverable');

		var a = document.createElement('a');
		a.setAttribute('class', 'navbar-link');
		a.innerHTML = '<span class="icon"><i class="fal fa-cog"></i></span> <span>' + window.localStorage.getItem('currentModule') + '</span>';

		container.appendChild(a);

		shinobi.menumodule.getListModule(function (listMenu) {

			var listMenuData = JSON.parse(listMenu);

			var menuContainer = document.createElement('div');

			menuContainer.setAttribute('class', 'navbar-dropdown is-right');

			container.appendChild(menuContainer);

			for (var i = 0; i < listMenuData.length; i++) {

				shinobi.menumodule.buildHeaderMenuModuleItem(menuContainer,
					listMenuData, i);
			}

		})
	},

	'buildHeaderMenuModuleItem': function (menuContainer, listMenuData, i) {

		var item = document.createElement('a');
		item.setAttribute('class', 'navbar-item');
		item.innerHTML = listMenuData[i];
		menuContainer.appendChild(item);

		item.onclick = function () {
			var value = this.innerHTML;
			window.localStorage.setItem('currentModule', value);
			shinobi.menumodule.getListMenuModule(value, function (data) {
				if (data.length > 0) {
					window.location.href = data[0].menuurl;
				} else {
					location.reload();
				}
			});
		}

	},

	'setDefaultModule': function (callback) {

		shinobi.menumodule.getListModule(function (listMenuData) {

			var data = JSON.parse(listMenuData);

			if (data[0]) {

				// if (!window.localStorage.getItem('currentModule')) {

				window.localStorage.setItem('currentModule', data[0]);

				// }

				if (typeof callback == 'function') {

					callback()
				}

			}

		});
	},

	'getListModule': function (callback) {

		var request = {};
		shinobi.cacheapi.request('/authenapi/ModuleApi/getUserModules', JSON
			.stringify(request), function (response) {
				callback(response);
			})

	},

	'openParentNode': function (currentItem, container) {

		setTimeout(function () {

			// menuParent.scrollIntoView();

			var menu = container;
			var item = currentItem.getElementsByTagName('a')[0].parentNode;
			var a = Number(item + (5 * 17));
			if (container) {
				if (container.hasOwnProperty('scrollTop')) {
					container.scrollTop = item.offsetTop;
				}
			}

		}, 1000)

		var menuParent = currentItem.parentNode;

		if (menuParent.getAttribute('class')
			&& menuParent.getAttribute('class').includes('ul-submenu')) {

			menuParent.previousElementSibling.click();

			shinobi.menumodule.openParentNode(menuParent.parentNode, container);

		}
	},

	'render': function (option) {
		if (window.localStorage.getItem('currentModule')) {
			var modulename = window.localStorage.getItem('currentModule');

			shinobi.menumodule.getListMenuModule(modulename, function (jsonArr) {
				var data = jsonArr;
				shinobi.menurender.build(shinobi.menumodule.patern, data);

				shinobi.menumodule.activeCurrentTab(shinobi.menumodule.container);

				if (option && option.hasOwnProperty('callback')) {
					option.callback();
				}
			})
		} else {
			setTimeout(function () {
				shinobi.menumodule.render(option);
			}, 200)
		}
	},

	getListMenuModule: function (modulename, callback) {
		var request = {};
		request.modulename = modulename;
		shinobi.cacheapi.request('/authenapi/MenuApi/getListMenu', JSON
			.stringify(request), function (response) {
				var jsonArr = JSON.parse(response);

				callback(jsonArr);
			});
	}
};shinobi.menurender = {

	'patern': '',
	'data': '',
	'container': '',
	'dangerStyle': 'color: rgb(241, 70, 104) !important;',

	'defaultIcon': 'iconpicker-icon-preview icon-menu',

	'build': function (patern, data, callback) {

		shinobi.menurender.patern = patern;

		shinobi.menurender.data = data;

		var container = document.querySelectorAll(patern)[0];

		shinobi.menurender.container = container;

		shinobi.menurender.render(container, data);

		if (typeof callback == 'function') {

			callback();
		}

	},

	'showAllMenu': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var arrowDown = container.getElementsByClassName('shinobi-arrow');

		for (var j = 0; j < arrowDown.length; j++) {

			arrowDown[j].classList.add('arrow-down');

			var hiddenElem = container.getElementsByClassName('is-hidden');

			for (var i = 0; i < hiddenElem.length; i++) {

				hiddenElem[i].classList.remove('is-hidden');
			}
		}

	},

	'render': function (container, data) {

		if (container) {

			container.classList.add('shinobimenu');

			var ul = document.createElement('ul');
			container.appendChild(ul);

			shinobi.menurender.addEventToggleSubMenu(ul);

			data.sort(function (a, b) {
				if (a.menucode.includes('_') && b.menucode.includes('_')) {
					return Number(a.menucode.split('_')[1]) - (b.menucode.split('_')[1]);
				} else {
					return 1;
				}
			});

			for (var i = 0; i < data.length; i++) {

				shinobi.menurender.buildBlockMenu(ul, data, i);

			}
		}

	},

	'addEventToggleSubMenu': function (ul) {

		if (ul.previousElementSibling) {

			var preElem = ul.previousElementSibling;

			var classList = preElem.getAttribute('class');

			if (classList.includes('has-submenu')) {

				ul.classList.add('is-hidden');
				ul.classList.toggle('ul-submenu');
				preElem.onclick = function () {

					ul.classList.toggle('is-hidden');

					var arrow = preElem.getElementsByClassName('shinobi-arrow')[0];
					arrow.classList.toggle('arrow-down');
				}

			}
		}
	},

	'buildBlockMenu': function (ul, data, index) {

		var currentData = data[index];

		var li = document.createElement('li');
		ul.appendChild(li);

		var div = document.createElement('div');
		div.setAttribute('class', 'shinobimenu-item');
		li.appendChild(div);

		var spanIcon = document.createElement('span');
		// spanIcon.setAttribute('class', 'icon');
		div.appendChild(spanIcon);

		var icon = document.createElement('i');
		icon.setAttribute('class', shinobi.menurender.defaultIcon);
		spanIcon.appendChild(icon);

		if (currentData.menuicon) {

			icon.setAttribute('class', currentData.menuicon);
		}

		var a = document.createElement('a');
		a.innerHTML = currentData.menuname;
		div.appendChild(a);

		if (currentData.menucode) {

			a.id = currentData.menucode;
		}

		if (currentData.menuurl) {

			a.href = shinobi.util.decodeValue(currentData.menuurl);
		}

		if (currentData.menudes) {

			a.title = currentData.menudes;
		}

		if (currentData.menuicon) {

			a.setAttribute('icon-class', currentData.menuicon);
		} else {

			a.setAttribute('icon-class', shinobi.menurender.defaultIcon);
		}

		if (currentData.menuchildren) {

			if (currentData.menuchildren.length != 0) {

				div.classList.add('has-submenu');

				shinobi.menurender.createArrowSpan(div);

				shinobi.menurender.render(li, currentData.menuchildren);
			}

		}

		if (currentData.hasOwnProperty('menudes')) {
			if (currentData.menudes.toLowerCase().includes('(nguy hiểm)') || currentData.menudes.toLowerCase().includes('(danger)')) {
				icon.setAttribute('style', shinobi.menurender.dangerStyle);
				a.setAttribute('style', shinobi.menurender.dangerStyle);
			}
		}
	},

	'createArrowSpan': function (div) {
		var arrowIconSpan = document.createElement('span');
		arrowIconSpan.setAttribute('class', 'is-right-align shinobi-arrow');
		div.appendChild(arrowIconSpan);

	}
};shinobi.multivalueinput = (function() {
    var constructor = function(selector, options) {
        this.multivalueinput = "";
        this.input = "";
        this.inputSearch = "";
        this.selector = selector;
        this.idSearchInputTag = 'selectorInputSearch';
        this.result = [];
        this.updateInputValue = function() {
            var objectTaginput = this;
            objectTaginput.input.value = objectTaginput.result;
        };


        this.renderItem = function(result) {
            try {
                result = JSON.parse(result);
                return result;
            } catch (e) {
                return result;
            }

        };
        this.getListResult = '';

        this.setListResult = '';


        this.getResultValue = '';


        this.options = options;


        this.buildSearch = function(object) {
            shinobi.util.addEventEnter(object.inputSearch, function() {

                var returnInput = object.onSubmit(object.inputSearch.value.trim());

                object.appendChildItem(returnInput, object);
                object.inputSearch.value = '';
            });
        };

        this.onSubmit = function(result, object) {
            return result;
        };

        this.appendChildItem = function(result, objectTaginput) {

            if (result) {
                result = JSON.stringify(result);
                var indexResult = objectTaginput.result.indexOf(result);
                if (indexResult == -1) {

                    objectTaginput.result.push(result);
                    objectTaginput.updateInputValue();
                    objectTaginput.insertBeforeSearch(result, objectTaginput);

                }
            }
        };
        this.insertBeforeSearch = function(result, objectTaginput) {
            var children = document.createElement('div');
            children.classList.add('tag', 'is-3', 'is-medium');

            children.innerHTML = objectTaginput.renderItem(result);

            var buttonClose = document.createElement('button');
            buttonClose.classList.add('is-small', 'is-danger', 'delete', "has-background-danger", "has-text-white");
            buttonClose.addEventListener('click', function() {
                children.remove();
                var index = objectTaginput.result.indexOf(result);
                if (index > -1) {
                    objectTaginput.result.splice(index, 1);
                }
                objectTaginput.updateInputValue();
            });
            children.appendChild(buttonClose);

            var container = document.querySelector('#tagstaginput');
            var tagsearch = document.getElementById('tagsearch');

            container.insertBefore(children, tagsearch);
        };
        this.loadOptions = function() {
            var object = this;
            if (options.hasOwnProperty("buildSearch")) {
                object.buildSearch = options.buildSearch;
            }

            if (options.hasOwnProperty("onSubmit")) {
                object.onSubmit = options.onSubmit;
            }
            if (options.hasOwnProperty("renderItem")) {
                object.renderItem = options.renderItem;
            }
            if (options.hasOwnProperty("getListResult")) {
                object.getListResult = options.getListResult;
            }
            if (options.hasOwnProperty("setListResult")) {
                object.setListResult = options.setListResult;
            }
        };

        this.createStructure = function(callback) {
            var object = this;
            var oldtag = document.getElementById('tagstaginput');
            if (oldtag) {
                while (oldtag.firstChild.classList.contains('tag')) {
                    oldtag.firstChild.remove();
                }
            }

            // 
            object.input = document.querySelector(this.selector);
            object.input.classList.add('is-hidden');

            var elem = document.createElement('div');
            elem.style.padding = '1rem';
            elem.style.border = '1px solid #ddd';
            elem.style.borderRadius = '10px';
            elem.classList.add('box');
            //
            var tags = document.createElement('div');
            tags.setAttribute('class', 'tags is-multiline');
            tags.setAttribute('id', 'tagstaginput');
            //
            var node = document.createElement('div');
            node.setAttribute('class', 'is-5');
            node.setAttribute('id', 'tagsearch');
            //
            var children = document.createElement('input');
            children.setAttribute('class', 'input is-bordered');
            children.setAttribute('id', this.idSearchInputTag);
            //
            node.appendChild(children);
            tags.appendChild(node);
            elem.appendChild(tags);

            object.inputSearch = children;


            object.input.parentElement.replaceChild(elem, object.input);

            elem.insertBefore(object.input, elem.firstElementChild);
            elem.appendChild(object.input);
            //
            callback();
        };
        this.createObject = function() {
            var object = this;

            object.buildSearch(object);

            if (typeof object.setListResult === 'function') {

                var listItem = object.setListResult(object.input);

                listItem.forEach(result => {
                    object.appendChildItem(result, object);
                });

            }
            if (typeof object.getListResult === 'function') {

                getListResult(object.result);

            }
        };


        this.loadAll = function() {
            var object = this;
            this.loadOptions();
            this.createStructure(function() {
                object.createObject();
            });
        };

        this.loadAll();
    };

    // public static method
    constructor.staticmethod = {
        hello: function() {},
    };

    return constructor;
})();shinobi.notification = {
  config: {
    modalSize: "is-small",
  },
  modal: {
    modalId: "confirmPanel",
    isInitLoad: false,
    isAccept: false,
    confirm: function (callback) {
      var modal = document.getElementById(this.modalId);

      modal.classList.add("is-active");

      if (!this.isInitLoad) {
        this.registerButton();
      }

      this.isInitLoad = true;
      this.isAccept = false;

      this.doAccept = callback;
    },
    registerButton: function () {
      var modal = document.getElementById(this.modalId);

      var closeButton = modal.getElementsByClassName("delete")[0];

      closeButton.addEventListener("click", function () {
        modal.classList.remove("is-active");
      });

      var cancelButton = modal.getElementsByClassName("cancel")[0];

      cancelButton.addEventListener("click", function () {
        modal.classList.remove("is-active");
      });

      var yesButton = modal.getElementsByClassName("yes")[0];

      var modalObject = this;

      yesButton.addEventListener("click", function () {
        modal.classList.remove("is-active");

        modalObject.isAccept = true;

        modalObject.doAccept();
      });
    },
    doAccep: function () {},
  },
  notification: {
    notificationId: "shinobinotification",
    isInitLoad: false,
    isLoading: true,
    show: function (type, content) {
      var notification = document.getElementById(this.notificationId);
      var notificationcontent = notification.getElementsByClassName("notificationcontent")[0];
      notificationcontent.innerHTML = content;
      if (shinobi.hasOwnProperty("language")) {
        shinobi.language.renderContainer(notificationcontent);
      }
      if ("info" === type) {
        notification.classList.add("info-message");
        notification.classList.remove("error-message");
        notification.classList.remove("loading-message");

        setTimeout(function () {
          notification.classList.remove("info-message");
        }, 3000);
      } else {
        notification.classList.remove("info-message");
        notification.classList.add("error-message");
        notification.classList.remove("loading-message");
      }

      this.registerButton();
      this.isInitLoad = true;
    },
    info: function (content) {
      this.show("info", content);
    },
    error: function (content) {
      this.show("error", content);
    },
    loading: function () {
      var notification = document.getElementById(this.notificationId);

      this.isInitLoad = true;

      notification.getElementsByClassName("delete")[0].classList.add("is-hidden");

      notification.classList.add("info-message");
      notification.classList.add("loading-message");
      notification.classList.remove("error-message");

      var notificationcontent = notification.getElementsByClassName("notificationcontent")[0];
      notificationcontent.innerHTML =
        '<div class="columns is-vcentered"> <a class="button is-text  is-loading column is-1"></a> <div class="column" snb-lang="PAGECODE_LOADING">Đang xử lý</div> </div>';
      if (shinobi.hasOwnProperty("language")) {
        shinobi.language.renderContainer(notificationcontent);
      }
    },
    loaded: function () {
      this.isInitLoad = false;

      var notification = document.getElementById(this.notificationId);

      notification.classList.remove("info-message");
      notification.classList.remove("loading-message");
    },
    registerButton: function () {
      var notification = document.getElementById(this.notificationId);

      var closeButton = notification.getElementsByClassName("delete")[0];
      closeButton.classList.remove("is-hidden");
      closeButton.addEventListener("click", function () {
        notification.classList.remove("info-message");
        notification.classList.remove("error-message");
        closeButton.classList.add("is-hidden");
      });
    },
  },
  confirm: function (callback, options) {
    if (shinobi.hasOwnProperty("notificationconfig")) {
      shinobi.notificationconfig.init();
    }
    var confirmPanel = document.getElementById("confirmPanel");
    shinobi.util.modalEventListener(confirmPanel);
    if (options) {
      if (options.title) {
        confirmPanel.getElementsByClassName("modal-card-title")[0].innerHTML = options.title;
      }
      if (options.content) {
        confirmPanel.getElementsByClassName("modal-card-body")[0].innerHTML = options.content;
      }
      if (options.yescontent) {
        confirmPanel.getElementsByClassName("yes")[0].innerHTML = options.yescontent;
      }
      if (options.nocontent) {
        confirmPanel.getElementsByClassName("cancel")[0].innerHTML = options.nocontent;
      }
      confirmPanel.classList.remove("is-small");
      confirmPanel.classList.remove("is-medium");
      confirmPanel.classList.remove("is-large");
      if (options.modalsize) {
        confirmPanel.classList.add(options.modalsize);
      } else {
        confirmPanel.classList.add(shinobi.notification.config.modalSize);
      }
      if (shinobi.notification.config.hasOwnProperty("modalFontSize")) {
        confirmPanel.classList.add(shinobi.notification.config.modalFontSize);
      }
      if (options.initfunction) {
        options.initfunction(confirmPanel);
      }
      if (options.ishiddenfooter) {
        confirmPanel.getElementsByClassName("modal-card-foot")[0].classList.add("is-hidden");
      } else {
        confirmPanel.getElementsByClassName("modal-card-foot")[0].classList.remove("is-hidden");
      }
    } else {
      confirmPanel.getElementsByClassName("modal-card-title")[0].innerHTML = "Cảnh báo";
      confirmPanel.getElementsByClassName("modal-card-body")[0].innerHTML = "Bạn chắc chắn?";

      confirmPanel.setAttribute("snb-lang", "PAGECODE_ARE_YOU_SURE");
      confirmPanel.getElementsByClassName("yes")[0].innerHTML = "Xác nhận";
      confirmPanel.getElementsByClassName("cancel")[0].innerHTML = "Hủy";
      confirmPanel.classList.remove("is-medium");
      confirmPanel.classList.remove("is-large");
      confirmPanel.classList.add("is-small");
      confirmPanel.classList.add(shinobi.notification.config.modalSize);
      if (shinobi.notification.config.hasOwnProperty("modalFontSize")) {
        confirmPanel.classList.add(shinobi.notification.config.modalFontSize);
      }
      confirmPanel.getElementsByClassName("modal-card-foot")[0].classList.remove("is-hidden");
    }
    confirmPanel.classList.add("is-active");
    var yes = confirmPanel.getElementsByClassName("yes")[0];
    yes.focus();
    yes.onclick = function () {
      if (typeof callback == "function") {
        if (options) {
          if (!(options.hasOwnProperty("notclosewhenacceft") && options["notclosewhenacceft"])) {
            confirmPanel.classList.remove("is-active");
          }
        } else {
          confirmPanel.classList.remove("is-active");
        }

        callback();
      }
    };
  },
  image: function (url, options) {
    var modal = document.getElementById("imageModal");
    if (modal) {
      var modalContent = modal.querySelector(".modal-content");
      modalContent.innerHTML = `
			<p class="image">
				<img sizes="(min-width: 576px) 540px, 100vw" src="${url}"> 
			</p>
			`;
      shinobi.initbulma.modalOpen(modal);
    } else {
      var modalNode = shinobi.util.convertTextToElement(shinobi.notification.iamgeModalContent);
      document.body.appendChild(modalNode);
      shinobi.initbulma.modalEventListener(modalNode);
      shinobi.notification.image(url, options);
    }
  },
  iamgeModalContent: `<div id="imageModal" class="modal">
					<div class="modal-background"></div>
					<div class="modal-content">
					
					</div>
					<button class="modal-close is-large" aria-label="close"></button>
				</div>`,
};
shinobi.render = {
  renderDownloadButtonTable: function (cell, row, col, all) {
    cell.innerHTML = `<a class="button is-small is-link" href="${all[row]["fileurl"]}" download><span class="icon"><i class="fa fa-file"></i></span><span>Tải file</span></a>`;
  },
  renderFormatNumber: function (elem, value, all) {
    var renderValue = shinobi.util.formatNumber(value);
    if (["INPUT", "SELECT", "TEXTAREA"].includes(elem.tagName)) {
      elem.value = renderValue;
    } else {
      elem.innerHTML = renderValue;
      if (["TD", "TH"].includes(elem.tagName)) {
        elem.classList.add("has-text-right");
      }
    }
  },
  showParentNode: function (elem, value, all) {
    elem.innerHTML = value;
    elem.parentNode.classList.remove("is-hidden");
  },
  hiddenParentNode: function (elem, value, all) {
    elem.innerHTML = value;
    elem.parentNode.classList.add("is-hidden");
  },

  renderChangeAvatarImageContainer: function (elem, value, all) {
    all.hasOwnProperty("avatarlink") ? elem.classList.remove("is-hidden") : elem.classList.add("is-hidden");
  },
  renderImageFileInput: function (element, value, all) {
    if (value.trim() != "" && value.trim() != "null") {
      var url = value;

      element.setAttribute("image-url", url);

      var filename = url.split("/")[url.split("/").length - 1];

      var fileContainer = shinobi.util.getParentElementHasAttribute(element, {
        type: "class",
        value: "file",
      });

      var field = shinobi.util.getParentElementHasAttribute(element, {
        type: "class",
        value: "field",
      });

      var fileNameContainer = fileContainer.getElementsByClassName("file-name")[0];
      fileNameContainer.innerHTML = filename;

      field.classList.add("is-grouped");

      var control = field.querySelector(".control.image-info");
      if (control) {
        control.remove();
      }
      control = document.createElement("div");
      control.setAttribute("class", "control image-info");
      var button = document.createElement("a");
      button.setAttribute("class", "button is-primary is-icon");
      button.innerHTML = '<span class="icon"><i class="fal fa-image"></i></span>';
      control.appendChild(button);
      field.appendChild(control);

      button.onclick = function () {
        shinobi.notification.image(element.getAttribute("image-url"));
      };
    }
  },
  renderRatioTable: function (cell, row, col, all) {
    shinobi.render.renderRatio(cell, cell.innerHTML, all[row]);
  },
  renderRatio: function (elem, value, all) {
    elem.innerHTML = value + "%";
  },
  renderPercent: function (elem, value, all) {
    elem.value = (Number(value) * 100) + "%";
  },
  getRatio: function (value, option) {
    return value.replace("%", "");
  },
  renderFullNameTable: function (cell, row, col, all) {
    shinobi.render.renderFullName(cell, cell.innerHTML, all[row]);
  },

  renderFullName: function (elem, value, all) {
    elem.innerHTML = all["lastname"] + " " + all["firstname"];
  },
  enumMapping: {
    SETTLE: "Hoàn tất",
    INPROCESS: "Đang xử lý",
    WAITING_FOR_CHEQUE: "Đợi thanh toán",
    EXPIRED: "Đã hết hạn",
    DELETED: "Đã xóa",
    ACCEPTED: "Chấp nhận",
    REJECTED: "Từ chối",
    WAITING_FOR_TRANFER: "Đang xử lý",
    CANCEL: "Đã hủy",
    WAITING_FOR_AUDIT: "Chờ xử lý",
    DEPOSIT: "Nạp tiền",
    DEPOSIT_DEAL: "Đơn nạp tiền",
    WITHDRAWAL: "Rút tiền",
    TRADING_DEAL: "Mua hàng",
    WINNING_LOTTERY: "Thắng cược",
    WITHDRAW: "Rút tiền",
    CANCEL_REQUEST: "Hủy yêu cầu",
    SEND_REQUEST: "Gửi yêu cầu",
    ACCEPTED_BY_ADMIN: "Admin đồng ý",
    MARK_AS_INPROCESS_BY_ADMIN: "Admin chuyển sang đang xử lý",
    REJECTED_BY_ADMIN: "Admin từ chối",
    MARK_AS_TRANFER_BY_ADMIN: "Admin chuyển sang chờ chuyển",
    WAITING_FOR_EMAIL_VERIFY: "Đợi xác nhận email",
  },

  enumMappingResultStatus: {
    NOT_YET: "Chưa đến lượt",
    ON_WAITING: "Chờ xổ",
    COMPLETE: "Đã xổ xong",
    IN_PROCESS: "Đang xổ",
  },

  enumMappingWithdrawalRequestActionType: {
    ADD_BY_ADMIN: "Admin nạp tiền",
    ACCEPTED_BY_ADMIN: "Đang xử lý",
    REJECTED_BY_ADMIN: "Từ chối",
    SEND_REQUEST: "Gửi yêu cầu",
    MARK_AS_TRANFER_BY_ADMIN: "Admin xác nhận hoàn tất",
    MARK_AS_INPROCESS_BY_ADMIN: "Admin chuyển qua đang xử lý",
    CANCEL_REQUEST: "Hủy yêu cầu",
  },

  enumMappingDepositRequestActionType: {
    ADD_BY_ADMIN: "Admin nạp tiền",
    ACCEPTED_BY_ADMIN: "Admin hoàn tất",
    REJECTED_BY_ADMIN: "Admin từ chối",
    SEND_REQUEST: "Gửi yêu cầu",
    MARK_AS_TRANFER_BY_ADMIN: "Admin xác nhận đã chuyển",
    MARK_AS_INPROCESS_BY_ADMIN: "Admin chuyển qua đang xử lý",
    CANCEL_REQUEST: "Hủy yêu cầu",
  },

  renderEnumActionWithdrawalDepositTable: function (cell, row, col, all) {
    shinobi.render.renderEnumActionWithdrawalDeposit(cell, cell.innerHTML, all[row]);
  },

  renderEnumActionWithdrawalDeposit: function (elem, value, all) {
    var enumList =
      all.actiontype == "DEPOSIT" || all.requesttype == "DEPOSIT"
        ? shinobi.render.enumMappingDepositRequestActionType
        : shinobi.render.enumMappingWithdrawalRequestActionType;
    var returnValue = enumList.hasOwnProperty(value) ? enumList[value] : value;
    elem.innerHTML = returnValue;
  },

  renderRandomColor: function (elem, value, all) {
    var list = ["white", "black", "light", "dark", "primary", "link", "info", "success", "warning", "danger"];
    var randomValue = list[Math.floor(Math.random() * list.length)];
    var attribute = elem.hasAttribute("snb-color-attribute")
      ? elem.getAttribute("snb-color-attribute")
      : "has-background-";
    elem.classList.add(attribute + randomValue);
  },

  renderLotteryResultStatus: function (elem, value, all) {
    var returnValue = shinobi.render.enumMappingResultStatus.hasOwnProperty(value)
      ? shinobi.render.enumMappingResultStatus[value]
      : value;
    elem.innerHTML = returnValue;
    if (value == "ON_WAITING") {
      elem.classList.add("has-text-primary");
    }
  },

  renderEnum: function (elem, value, all) {
    var returnValue = shinobi.render.enumMapping.hasOwnProperty(value) ? shinobi.render.enumMapping[value] : value;
    elem.innerHTML = returnValue;
  },

  renderEnumTable: function (cell, row, col, all) {
    shinobi.render.renderEnum(cell, cell.innerHTML);
  },

  removeFormatNumber: function (value, option) {
    var formatCharacter = shinobi.util.getFormatCharacters();
    var numberFormatCharacter = formatCharacter.numberFormatCharacter;
    return value.replace(new RegExp("\\" + numberFormatCharacter, "g"), "");
  },

  getBulmaCalendarValue: function (value, option) {
    var returnValue = {};
    if (value == "") {
      return value;
    } else {
      option["elem"].parentNode.classList.remove("has-border-danger");
      if (option["elem"].hasAttribute("data-is-range") && option["elem"].getAttribute("data-is-range") == "true") {
        var valueSplit = value.split("-");
        var optionDate = {
          format: "yyyy-MM-dd",
        };
        returnValue["beginDate"] = valueSplit[0] ? valueSplit[0].trim() : "";
        returnValue["endDate"] = valueSplit[1] ? valueSplit[1].trim() : "";

        return returnValue;
      }
      return value;
    }
  },

  getBulmaCalendarValueFormat: function (value, option) {
    var returnValue = value;
    if (value != "") {
      returnValue = shinobi.util.reverseFormatDate(value, {
        reverseFormat: "dd/MM/yyyy",
        format: "yyyy-MM-dd",
      });
    }
    return returnValue;
  },

  getFilterSelect: function (th, options) {
    var select = th.querySelector('select');
    console.log(select.value);
    return {
      colname: th.getAttribute('snb-colname'),
      operator: (select.value == '') ? 'like' : '=',
      value: select.value
    };
  },

  buildFilterSelect: function (th, options) {
    var listOption = JSON.parse(th.getAttribute('snb-filter-list-option'));
    if (th.querySelector('.table-filter')) {
      var preFilter = th.querySelector('.table-filter');
      preFilter.remove();
      options['tableObject'].reloadApi(1);
    } else {
      var container = document.createElement('div');
      container.setAttribute('class', 'field table-filter has-addons');
      container.innerHTML = `
        <div class="select is-small">
            <select></select>
        </div>
        `;
      var select = container.querySelector('select');
      select.onchange = function () {
        options['tableObject'].reloadApi(1);
      }

      listOption.forEach(function (item) {
        var option = document.createElement('option');
        option.setAttribute('value', item["value"]);
        option.innerHTML = item["name"];
        select.appendChild(option);
      });

      th.appendChild(container);
      select.value = '';
    }
  },

  renderFormatNumberTable: function (cell, row, col, all) {
    shinobi.render.renderFormatNumber(cell, cell.innerHTML, all);
  },

  renderUserBalance: function (elem, value, all) {
    shinobi.render.addLoading(elem);
    shinobi.cacheapi.request(shinobi.coreapi.bankAccountApi + "getAccountBalance", "{}", function (response) {
      var jsonArr = JSON.parse(response);
      elem.innerHTML = jsonArr.hasOwnProperty("currentcash")
        ? shinobi.util.formatNumber(jsonArr["currentcash"])
        : "Đang xử lý";
    });
  },

  getFileName: function (elem, value, all) {
    var linkFile = value;
    var linkFileSplit = linkFile.split("/");

    elem.innerHTML = linkFileSplit[linkFileSplit.length - 1];
  },

  renderDownloadFile: function (elem, value, all) {
    var linkFile = value;

    elem.setAttribute("href", value);

    setTimeout(function () {
      elem.focus();
    }, 200);

    elem.onclick = function () {
      var modalId = elem.getAttribute("modal-parent");

      var modal = document.getElementById(modalId);
      modal.classList.remove("is-active");
    };
  },

  addLoading: function (elem, value, all) {
    elem.innerHTML = '<a class="button is-small is-borderless is-paddingless is-icon is-transparent  is-loading"></a>';
  },

  renderTagInputValue: function (elem, value, all) {
    if (typeof shinobi.initbulma.tagsInput == "object") {
      shinobi.initbulma.tagsInput.forEach(function (item) {
        if (item["element"] == elem) {
          item.reset();
          item.input.setAttribute("style", "");
          item.element.value = "";
          var listOption = item.container.querySelectorAll("[data-tag]");

          for (var i = 0; i < listOption.length; i++) {
            listOption[i].remove();
          }
          var listTagValue = value.split(",");
          listTagValue.forEach(function (valueItem) {
            if (valueItem.trim() != "") {
              item.addTag(valueItem.trim());
            }
          });

          item.element.value = value;
        }
      });
    }
  },

  renderFormatDate: function (elem, value, all) {
    var format = elem.hasAttribute("snb-date-format") ? elem.getAttribute("snb-date-format") : "dd-MM-yyyy";
    elem.innerHTML = shinobi.util.getFormatDate(value, {
      format: format,
    });
  },

  renderFormatNumberFloat: function (elem, value, all) {
    var floatValue = Number.parseFloat(value);
    shinobi.render.renderFormatNumber(elem, floatValue, all);
  },

  renderFormatNumberInt: function (elem, value, all) {
    var intValue = Number.parseInt(value);
    shinobi.render.renderFormatNumber(elem, intValue, all);
  },

  renderTotalPrice: function (elem, value, all) {
    var total = all["quantity"] * all["price"];
    elem.innerHTML = shinobi.util.formatNumber(total);
  },
  renderChangeColor: function (elem, value, all) {
    if (Number(value) > 0 || value.trim().toString().startsWith('+')) {
      elem.style.color = 'rgb(0, 255, 0)';
    }

    if (Number(value) < 0 || value.trim().toString().startsWith('-')) {
      elem.style.color = 'rgb(255, 0, 0)';
    }
  },
  renderChangePercentColor: function (elem, value, all) {
    var number = Number(value.replace('%', ''));
    if (number > 0 || value.trim().toString().startsWith('+')) {
      elem.style.color = 'rgb(0, 255, 0)';
    }

    if (number < 0 || value.trim().toString().startsWith('-')) {
      elem.style.color = 'rgb(255, 0, 0)';
    }
  },
  renderChangeAvatarButton: function (elem, value, all) {
    shinobi.fileupload.registerElement(
      elem,
      "change",
      "uploadavatar",
      function () {
        return 0;
      },
      function (upfileResponse) {
        var jsonArr = upfileResponse;

        if (jsonArr.result == "success") {
          var url = jsonArr.content.url;

          var updateAvatarRequest = {};

          var avatarLink = url + "?" + new Date().getTime();

          updateAvatarRequest.avatarlink = avatarLink;

          shinobi.api.request(
            shinobi.coreapi.loggedUserApi + "updateAvatarLink",
            JSON.stringify(updateAvatarRequest),
            function (response) {
              if (response == "update success") {
                shinobi.notification.notification.info("Cập nhật thành công!");

                setTimeout(function () {
                  location.reload();
                }, 1000);
              }
            }
          );
        } else {
          shinobi.notification.notification.error("Xảy ra lỗi vui lòng thử lại!");

          return;
        }
      }
    );
  },
  renderGenderTable: function (cell, row, col, all) {
    shinobi.render.renderGender(cell, cell.innerHTML, all[row]);
  },
  renderGender: function (elem, value, all) {
    var returnValue;
    switch (value) {
      case "MR":
        returnValue = "Nam";
        break;
      case "MS":
        returnValue = "Nữ";
        break;
      default:
        returnValue = value;
        break;
    }
    elem.innerHTML = returnValue;
  },

  filterGender: function (value, option) {
    var returnValue;
    switch (value) {
      case "Nam":
        returnValue = "MR";
        break;
      case "Nữ":
        returnValue = "MS";
        break;
      default:
        returnValue = value;
        break;
    }
    return returnValue;
  },

  renderPhoneNumberWithPhoneReligion: function (elem, value, all) {
    elem.value = value;
    if (elem.hasAttribute("render-target") && all.hasOwnProperty("country")) {
      var target = elem.getAttribute("render-target");
      eval(target).setCountry(all["country"]);
    }
  },

  getNumberCleaveInput: function (value, option) {
    return shinobi.util.getValueNumberCleaveFormat(option.elem);
  },

  renderTextCenterTable: function (cell, row, col, all) {
    shinobi.render.renderTextCenterDatalist(cell, cell.innerHTML, all[row]);
  },

  renderTextCenterDatalist: function (elem, value, all) {
    elem.classList.add('has-text-centered');
  },
  renderTextLeftTable: function (cell, row, col, all) {
    shinobi.render.renderTextLeftDatalist(cell, cell.innerHTML, all[row]);
  },

  renderTextLeftDatalist: function (elem, value, all) {
    elem.classList.add('has-text-left');
  },
  renderTextRightTable: function (cell, row, col, all) {
    shinobi.render.renderTextRightDatalist(cell, cell.innerHTML, all[row]);
  },

  renderTextRightDatalist: function (elem, value, all) {
    elem.classList.add('has-text-right');
  },
};
shinobi.scroll = {
    defaultOption: {
        scrolldelay: 50,
        delayReScroll: 4000,
        delayStartScrollWhenReScroll: 2000,
        pauseOnHover: true
    },
    init: function (selector, option) {
        var elemList = document.querySelectorAll(selector);
        for (var i = 0; i < elemList.length; i++) {
            var elem = elemList[i];
            shinobi.scroll.initElement(elemList, i, option);
        }
    },
    initElement: function (elemList, i, option) {
        var elem = elemList[i];
        var newOption;
        if (!option) {
            newOption = JSON.parse(JSON.stringify(shinobi.scroll.defaultOption));
        } else {
            newOption = option;
        }

        shinobi.scroll.scrollProcess(elem, newOption);
    },

    scrollProcess: function (elem, option) {
        // shinobi.scroll.state = 'scroll';
        var currentScrollHeight = elem.scrollTop + elem.clientHeight;
        var scrollHeight = elem.scrollHeight;
        shinobi.scroll.clear(elem, option, function (afterOption) {
            shinobi.scroll.addEventHover(elem, afterOption);
            if (currentScrollHeight < scrollHeight) {
                afterOption.scrollInterval = setTimeout(function () {
                    elem.scrollBy(0, 1);
                    shinobi.scroll.scrollProcess(elem, afterOption);
                }, afterOption['scrolldelay']);

            } else {
                afterOption.reScrollInterval = setTimeout(function () {
                    elem.scrollTo(0, 0);
                    setTimeout(function () {
                        shinobi.scroll.scrollProcess(elem, afterOption);
                    }, afterOption['delayStartScrollWhenReScroll'])
                }, afterOption['delayReScroll']);

            }
        });

    },

    addEventHover: function (elem, option) {
        if (option.hasOwnProperty('pauseOnHover')) {
            if (option['pauseOnHover']) {
                elem.onmouseover = function () {
                    shinobi.scroll.clear(elem, option);
                }
                elem.onmouseout = function () {
                    shinobi.scroll.scrollProcess(elem, option);
                }
            }
        }
    },
    clear: function (elem, option, callback) {
        if (option.hasOwnProperty('scrollInterval')) {
            clearTimeout(option['scrollInterval']);
        }
        if (option.hasOwnProperty('reScrollInterval')) {
            clearTimeout(option['reScrollInterval']);
        }
        if (typeof callback == 'function') {
            callback(option);
        }
    },

};shinobi.seorender = {

	'gaid' : 'UA-138668527-1',

	'json' : [
			{
				'pageurl' : '/page/index',
				'pagename' : 'Aladin | Nền tảng kết nối cộng đồng nhà đầu tư chứng khoán chuyên nghiệp',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/traderlisting',
				'pagename' : 'Nhà tư vấn',
				'pagerender' : 'shinobi.seorender.listingPageRender'
			}, {
				'pageurl' : '/page/investorlisting',
				'pagename' : 'Nhà đầu tư',
				'pagerender' : 'shinobi.seorender.listingPageRender'
			}, {
				'pageurl' : '/page/blogoverview',
				'pagename' : 'Blog đầu tư',
				'pagerender' : 'shinobi.seorender.blogOverviewRender'
			}, {
				'pageurl' : '/page/blogpost/',
				'pagename' : 'Bài viết',
				'pagerender' : 'shinobi.seorender.blogPostRender'
			}, {
				'pageurl' : '/page/tradinginstruction',
				'pagename' : 'Hướng dẫn nhà đầu tư',

			}, {
				'pageurl' : '/page/account',
				'pagename' : 'Trang cá nhân',
				'pagerender' : 'shinobi.seorender.renderPublicUserProfilePage'
			}, {
				'pageurl' : '/page/traderaccount',
				'pagename' : 'Nhà tư vấn',
				'pagerender' : 'shinobi.seorender.renderPublicUserProfilePage'
			}, {
				'pageurl' : '/page/investoraccount',
				'pagename' : 'Nhà đầu tư',
				'pagerender' : 'shinobi.seorender.renderPublicUserProfilePage'
			}, {
				'pageurl' : '/page/traderguide',
				'pagename' : 'Hướng dẫn Nhà tư vấn',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/question',
				'pagename' : 'Các câu hỏi thường gặp',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/aboutus',
				'pagename' : 'Về Chúng tôi',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/job',
				'pagename' : 'Nghề nghiệp',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/privacypolicy',
				'pagename' : 'Chính sách Bảo mật',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/denyrisk',
				'pagename' : 'Khước từ rủi ro',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/investorserviceterms',
				'pagename' : 'Điều khoản NĐT',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/traderserviceterms',
				'pagename' : 'Điều khoản NTV',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/contact',
				'pagename' : 'Liên hệ',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/investwithaladin',
				'pagename' : 'Đầu tư cùng Aladin',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/traderintroduction',
				'pagename' : 'Hợp tác cùng Nhà tư vấn',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/investorregistration',
				'pagename' : 'Đăng kí',
				'pagerender' : ''
			} ],

	'build' : function(callback) {

		shinobi.seorender.renderPageSeo(callback);
	},

	'renderPublicUserProfilePage' : function(item) {

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var pageUrl = pathNameSplit[pathNameSplit.length - 1];

		var request = {};
		request.pageurl = pageUrl;

		shinobi.api.request('/api/UserApi/getUsernameFromHomePage', JSON
				.stringify(request), function(response) {

			shinobi.api.request('/api/UserApi/getAllUserInfo', response,
					function(userInfo) {

						var userInfoObject = JSON.parse(userInfo);

						var fullName = userInfoObject.firstname + ' '
								+ userInfoObject.lastname;

						// document.title = fullName;

						var headContent = document.head.innerHTML;
						headContent = '<title>' + fullName + '</title>'
								+ headContent;
						document.head.innerHTML = headContent;
					});
		});
	},

	'blogPostRender' : function(item) {

		var request = {};

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var postUrl = pathNameSplit[pathNameSplit.length - 1];

		request.posturl = blogPostPageUrl + postUrl;

		shinobi.api.request('/api/BlogOverviewApi/getPreViewContent', JSON
				.stringify(request), function(response) {

			var jsonArr = JSON.parse(response);

			document.title = jsonArr.posttitle;

			var markup = '  <meta property="og:url" content="'
					+ window.location.href + '" />';
			markup = markup + ' <meta property="og:type" content="website" />';
			markup = markup + ' <meta property="og:title" content="'
					+ jsonArr.posttitle + '" />';

			// if (jsonArr.previewcontent) {
			//
			// markup = markup + ' <meta property="og:description" content="'
			// + jsonArr.previewcontent.replace('/(<([^>]+)>)/ig', '')
			// + '" />';
			// } else {
			// markup = markup + ' <meta property="og:description" content="'
			// + jsonArr.title + '" />';
			//			}

			markup = markup + '<meta property="og:image" content="'
					+ jsonArr.thumpnailurl + '" />';
			var headContent = document.head.innerHTML;
			headContent = markup + headContent;
			document.head.innerHTML = headContent;

		});

	},

	'blogOverviewRender' : function(item) {

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var postType = pathNameSplit[pathNameSplit.length - 2];

		var postFilter = pathNameSplit[pathNameSplit.length - 1];

		var title = er.postFiterConvert(postFilter)
				+ ' '
				+ shinobi.aladinUtil.convertPostTypeToVn(postType)
						.toLowerCase();

		var pageTitle = item.pagename + ': ' + title;

		// var headContent = document.head.innerHTML;
		// headContent = '<title>' + pageTitle + '</title>' + headContent;
		// document.head.innerHTML = headContent;

		document.title = pageTitle;

	},

	'listingPageRender' : function(item) {

		var pathName = window.location.pathname;

		var timeFrame;

		if (item.pageurl == pathName) {

			timeFrame = shinobi.investortraderlistingcontentheaderrender.defaultTimeFrame;

		} else {

			var pathNameSplit = pathName.split('/');

			timeFrame = pathNameSplit[pathNameSplit.length - 1];
		}

		// document.title = item.pagename + ': ' +
		// er.listingTimeFrame(timeFrame);

		var pageTitle = item.pagename + ': ' + er.listingTimeFrame(timeFrame);

		// var headContent = document.head.innerHTML;
		// headContent = '<title>' + pageTitle + '</title>' + headContent;
		// document.head.innerHTML = headContent;

		document.title = pageTitle;

	},

	'defaultRender' : function(item) {

		// var headContent = document.head.innerHTML;
		// headContent = '<title>' + item.pagename + '</title>' + headContent;
		// document.head.innerHTML = headContent;

		document.title = item.pagename;

	},

	'addGA' : function() {
		ga("create", shinobi.seorender.gaid, "auto");
		ga("send", "pageview");
	},

	'renderPageSeo' : function(callback) {

		var jsonArr = shinobi.seorender.json;

		var pathName = window.location.pathname;

		for (var i = 0; i < jsonArr.length; i++) {

			var item = jsonArr[i];

			// var pageUrlRegex = new RegExp(item.pageurl, "igs");

			// if (pageUrlRegex.test(pathName)) {

			if (pathName.includes(item.pageurl)) {
				if (!item.pagerender || item.pagerender == ''
						|| item.pagerender == null) {

					shinobi.seorender.defaultRender(item);
				} else {

					eval(item.pagerender)(item);
				}

				setTimeout(function() {

					callback(true);
				}, 2000);

				return;
			}
		}

		callback(false);
	},

};shinobi.socket = (function () {
  // constructor
  var constructor = function (option) {
    this.url = "";
    this.option = option;
    this.socket = {};
    this.msgid = "";
    this.onOpen = null;
    this.onOpenOverrideFunction = null;
    this.onMessage = null;
    this.onMessageOverrideFunction = null;
    this.onSendOverrideFunction = null;
    this.onError = null;
    this.onClose = null;
    this.onAjax = null;

    this.init = function () {
      this.setupOption();

      this.connect();
    };

    this.connect = function () {
      var socketObject = this;

      this.socket = new WebSocket(socketObject.url);

      this.socket.addEventListener("open", function (event) {
        if (typeof socketObject.onOpenOverrideFunction == "function") {
          socketObject.onOpenOverrideFunction(socketObject);
        } else {
          var message = {
            type: "register",
            command: "init",
            msgid: 0,
            data: [],
          };
          this.send(JSON.stringify(message));

          if (typeof socketObject.onOpen == "function") {
            socketObject.onOpen(socketObject);
          }
        }
      });

      this.socket.addEventListener("message", function (event) {
        if (typeof socketObject.onMessageOverrideFunction == "function") {
          socketObject.onMessageOverrideFunction(event.data);
        } else {
          var data = JSON.parse(event.data);

          // if (socketObject.msgid == '') {

          // 	socketObject.msgid = data.msgid;

          // } else {

          if (typeof socketObject.onMessage == "function") {
            socketObject.onMessage(data);
          }

          // }
        }
      });

      this.socket.addEventListener("close", function () {
        console.log("connection closed");
        if (typeof socketObject.onClose == "function") {
          socketObject.onClose(socketObject);
        } else {
          setTimeout(socketObject.connect(socketObject.url), 1000);
        }
      });
    };

    this.setupOption = function () {
      var socketObject = this;

      socketObject["url"] = option["url"];

      if (option["onOpen"]) {
        socketObject["onOpen"] = option["onOpen"];
      }
      if (option["onClose"]) {
        socketObject["onClose"] = option["onClose"];
      }
      if (option["onMessage"]) {
        socketObject["onMessage"] = option["onMessage"];
      }
      if (option["onError"]) {
        socketObject["onError"] = option["onError"];
      }
      if (option["onAjax"]) {
        socketObject["onAjax"] = option["onAjax"];
      }
      if (option["onOpenOverrideFunction"]) {
        socketObject["onOpenOverrideFunction"] =
          option["onOpenOverrideFunction"];
      }
      if (option["onMessageOverrideFunction"]) {
        socketObject["onMessageOverrideFunction"] =
          option["onMessageOverrideFunction"];
      }
      if (option["onSendOverrideFunction"]) {
        socketObject["onSendOverrideFunction"] =
          option["onSendOverrideFunction"];
      }
    };

    this.send = function (sendData, callback) {
      var socketObject = this;

      var interval = setInterval(function () {
        if (socketObject.socket.readyState == 1) {
          if (typeof socketObject.onSendOverrideFunction == "function") {
            socketObject.onSendOverrideFunction(socketObject, sendData);
          } else {
            var content = {
              command: "request",
              msgid: socketObject.msgid,
              data: sendData,
            };

            socketObject.socket.send(JSON.stringify(content));
          }

          if (typeof callback == "function") {
            callback();
          }

          clearInterval(interval);
        }
      }, 10);
    };

    this.init();
  }; // end constructor

  return constructor;
})();
shinobi.message = {
	'socket': '',
	'url': "",
	'chatInqueue': [],
	'notificationInqueue': [],
	'sessionid': "",
	'readyToSend': false,
	'option': null,
	'connect': function (url, callback, option) {

		this.url = url;
		this.option = option;
		// if (typeof shinobi.message.socket == 'object' && shinobi.message.socket.close == 'function') {
		// 	shinobi.message.socket.close();
		// }
		shinobi.message.socket = new WebSocket(shinobi.message.url);
		// if (option && option.hasOwnProperty('sendInit')) {
		// 	var message = {};
		// 	message.type = "register";
		// 	message.content = shinobi.message.sessionid;
		// 	shinobi.message.socket.send(JSON.stringify(message));
		// 	console.log("send register message");

		// 	shinobi.message.socket.readyToSend = true;

		// 	setTimeout(function () {
		// 		if (typeof callback == 'function') {

		// 			callback();
		// 		}

		// 	}, 1000);
		// }

		this.socket.addEventListener('open', function (event) {
			console.log("open connection");
			var object = this;
			var message = {};
			message.type = "register";
			if (shinobi.message.sessionid == '') {
				shinobi.message.connectSocketServer(callback);
			} else {

				message.content = shinobi.message.sessionid;
				object.send(JSON.stringify(message));
				console.log("send register message");

				object.readyToSend = true;

				setTimeout(function () {
					if (typeof callback == 'function') {

						callback();
					}

				}, 1000);

			}

		});

		this.socket.addEventListener('message', function (event) {
			shinobi.message.inputMessageHandler(event);
		});

		this.socket.addEventListener('close', function () {
			console.log("connection closed");
			setTimeout(shinobi.message.connect(shinobi.message.url), 1000);
		});

	},
	'connectSocketServer': function (callback) {
		var requestSessonId = {};

		shinobi.api.request("/authenapi/UserInfoApi/getSessionid", JSON
			.stringify(requestSessonId), function (response) {

				var jsonResponse = JSON.parse(response);

				var sessionId = jsonResponse.sessionid;

				shinobi.message.sessionid = sessionId;

				if (callback) {
					// shinobi.message.socket.close();

					// shinobi.message.connect(shinobi.config.current.imserver);
					console.log("connect socket server success");

					callback();
				}

			});

	},
	'inputMessageHandler': function (event) {

		var response = event.data;
		var data = JSON.parse(response);

		shinobi.socketmanager.socketMessage.private.push(data);

	},
	'sendMessage': function (message) {
		this.socket.send(message);
	},
};
Number.prototype.format = function (n, x, s, c) {
  var re = "\\d(?=(\\d{" + (x || 3) + "})+" + (n > 0 ? "\\D" : "$") + ")",
    num = this.toFixed(Math.max(0, ~~n));

  return (c ? num.replace(".", c) : num).replace(new RegExp(re, "g"), "$&" + (s || ","));
};

shinobi.tableHelper = {
  mappingRender: {
    renderFirstNameLastName: {
      functionName: "getfullname",
      param: "this",
    },
  },
  colnameAttribute: "snb-colname",
  renderAttribute: "snb-render",
  colcontrolAttribute: "snb-header-control",
  sortAttribute: "snb-sort",
  sortIcon: "<i class='fas fa-sort'></i>",
  sortDescIcon: "<i class='fas fa-sort-down'></i>",
  sortAscIcon: "<i class='fas fa-sort-up'></i>",

  getRender: function (tableId) {
    var table = document.getElementById(tableId);

    var colnameAttributeQuery = "[" + shinobi.tableHelper.colnameAttribute + "]";

    var tHead = table.tHead;
    var listColumnHasColname = tHead.querySelectorAll(colnameAttributeQuery);

    var render = [];
    for (var i = 0; i < listColumnHasColname.length; i++) {
      var item = listColumnHasColname[i];
      if (item.hasAttribute(shinobi.tableHelper.renderAttribute)) {
        var renderFunction = item.getAttribute(shinobi.tableHelper.renderAttribute);

        render[item.cellIndex] = renderFunction;
      }
    }

    return render;
  },

  addAttributeColname: function (colElem) {
    if (colElem.hasAttribute(shinobi.tableHelper.colcontrolAttribute)) {
      var sortElem = colElem.querySelector("[snb-sort]");

      if (!sortElem) {
        var span = document.createElement("span");
        span.setAttribute(shinobi.tableHelper.sortAttribute, "");

        span.innerHTML = shinobi.tableHelper.sortIcon;

        colElem.appendChild(span);
      }

      if (colElem.getAttribute(shinobi.tableHelper.colcontrolAttribute).includes("2")) {
        var filter = document.createElement("span");
        filter.setAttribute("snb-filter", "");
        var filterIcon = document.createElement("i");
        filterIcon.setAttribute("class", "fal fa-sm fa-filter");
        filter.appendChild(filterIcon);
        colElem.appendChild(filter);
      }
    }
  },

  getColname: function (tableId) {
    var table = document.getElementById(tableId);

    var headerColnames = [];

    var listTr = table.tHead.rows;
    for (var indexTr = 0; indexTr < listTr.length; indexTr++) {
      var tr = listTr[indexTr];
      var listTh = tr.cells;
      for (let th of listTh) {
        var key;
        var colspan = th.colSpan;
        if (th.hasAttribute(shinobi.tableHelper.colnameAttribute)) {
          key = th.getAttribute(shinobi.tableHelper.colnameAttribute);
          shinobi.tableHelper.addAttributeColname(th);
        } else {
          key = null;
        }
        if (indexTr == 0) {
          for (var i = 0; i < colspan; i++) {
            headerColnames.push(key);
          }
        } else {
          for (var j = 0; j < colspan; j++) {
            headerColnames[headerColnames.indexOf(null) + j] = key;
          }
        }
      }
    }

    return headerColnames;
  },

  buildSort: function (table) {
    var staticSort = table.staticsorts;
    table.getSorts();

    var sort = table.sorts;

    var listKey = [];

    for (var i = 0; i < sort.length; i++) {
      listKey.push(sort[i].colname);
    }

    var allSort = sort;

    for (var j = 0; j < staticSort.length; j++) {
      if (!listKey.includes(staticSort[j].colname)) {
        allSort.push(staticSort[j]);
      }
    }

    return allSort;
  },

  changeSortIconHeader: function (table) {
    for (var i = 0; i < table.allSorts.length; i++) {
      var key = table.allSorts[i].colname;

      var colnameAttributeQuery =
        "[" + shinobi.tableHelper.colnameAttribute + "=" + key + "]>[" + shinobi.tableHelper.sortAttribute + "]";

      var listHeaderSortIcon = table.tableNode.tHead.querySelectorAll(colnameAttributeQuery);

      for (var j = 0; j < listHeaderSortIcon.length; j++) {
        listHeaderSortIcon[j].classList.add("is-visible");
        listHeaderSortIcon[j].setAttribute("snb-sort", table.allSorts[i].value);

        if (table.allSorts[i].value == "asc") {
          listHeaderSortIcon[j].innerHTML = shinobi.tableHelper.sortAscIcon;
        }
        if (table.allSorts[i].value == "desc") {
          listHeaderSortIcon[j].innerHTML = shinobi.tableHelper.sortDescIcon;
        }
      }
    }
  },
  getRenderExcelFunction: function (cellHeader) {
    var renderName = cellHeader.getAttribute(shinobi.tableHelper.renderAttribute);

    var allFunction = shinobi.tableHelper.mappingRender;

    var functionObject = allFunction[renderName.toString()];

    var returnObject = {};

    if (functionObject) {
      returnObject.result = true;

      if (functionObject.param == "this") {
        var content = {};
        content.rendername = functionObject.functionName;
        content.inputlist = [];
        content.inputlist.push(cellHeader.getAttribute(shinobi.tableHelper.colnameAttribute));

        returnObject.content = content;
      }
    } else {
      returnObject.result = false;
    }

    return returnObject;
  },
};

shinobi.table = (function () {
  // private static variable
  var count = 0;
  var paginationClass = ".table-pagination";
  var prevPaginationClass = ".shinobi-pagination-prev";
  var curPagePaginationClass = ".shinobi-pagination-curpage";
  var nextPaginationClass = ".shinobi-pagination-next";
  var pageTotalClass = ".shinobi-page-total";
  var recordPerPageClass = ".shinobi-recordperpage";
  var detailIdKey = "snb-detailid";
  var colnameAttribute = "snb-colname";
  var colcontrolAttribute = "snb-header-control";
  var sortAttribute = "snb-sort";
  var exportExcelAttribute = "snb-export-excel";

  var sortDescIcon = "<i class='fas fa-sort-down'></i>";
  var sortAscIcon = "<i class='fas fa-sort-up'></i>";
  var sortIcon = "<i class='fas fa-sort'></i>";

  // constructor
  var constructor = function (tableid) {
    this.url = "";

    this.colNames = [];

    this.filters = [];

    this.staticfilters = [];

    this.sorts = [];

    this.allSorts = [];

    this.staticsorts = [];

    this.paramsRequestList = {};

    this.renders = [];

    this.tableRows = [];

    this.pageNum = 1;

    this.recordPerPage = 10;

    this.pageTotal = 10;

    this.rowTotal = 10;

    this.currentId = -1;

    this.lastRequest = {};

    this.exportExcel = false;

    this.options = null;

    this.tableNode = document.getElementById(tableid);

    this.tableContainerNode = this.tableNode.parentNode;

    this.pageNumNode = this.tableContainerNode.querySelector(curPagePaginationClass);

    this.recordPerPageNode = this.tableContainerNode.querySelector(recordPerPageClass);

    this.apiName = "";

    this.getColnames = function () {
      var table = document.getElementById(tableid);

      var headerColnames = [];

      var listTr = table.tHead.rows;
      for (var indexTr = 0; indexTr < listTr.length; indexTr++) {
        var tr = listTr[indexTr];
        var listTh = tr.cells;

        for (var indexTh = 0; indexTh < listTh.length; indexTh++) {
          var th = listTh[indexTh];
          var key;

          var colspan = th.colSpan;

          if (th.hasAttribute(colnameAttribute)) {
            key = th.getAttribute(colnameAttribute);
          } else {
            key = null;
          }

          if (indexTr == 0) {
            for (var i = 0; i < colspan; i++) {
              headerColnames.push(key);
            }
          } else {
            for (var j = 0; j < colspan; j++) {
              headerColnames[headerColnames.indexOf(null) + j] = key;
            }
          }
        }
      }

      return headerColnames;
    };

    this.registerSorts = function () {
      var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute + "]");

      for (var i = 0; i < sortElems.length; i++) {
        var sortElem = sortElems[i];

        this.registerSort(sortElem);
      }
    };

    this.registerSort = function (sortElem) {
      var table = this;

      sortElem.addEventListener("click", function () {
        var currentSortValue = this.getAttribute(sortAttribute);

        var colName = this.parentNode.getAttribute(colnameAttribute);

        if ("" === currentSortValue) {
          this.setAttribute(sortAttribute, "asc");
          this.innerHTML = sortAscIcon;
          this.classList.add("is-visible");
        } else if ("asc" === currentSortValue) {
          this.setAttribute(sortAttribute, "desc");
          this.innerHTML = sortDescIcon;
          this.classList.add("is-visible");
        } else {
          this.setAttribute(sortAttribute, "");
          this.innerHTML = sortIcon;
          this.classList.remove("is-visible");
        }

        table.reloadApi(table.pageNum);
      });
    };

    this.getSorts = function () {
      this.sorts = [];

      // this.sorts = this.sorts.concat(this.staticsorts);

      var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute + "]");

      for (var i = 0; i < sortElems.length; i++) {
        var sortElem = sortElems[i];

        var colName = sortElem.parentNode.getAttribute(colnameAttribute);
        var currentSortValue = sortElem.getAttribute(sortAttribute);

        if ("" !== currentSortValue) {
          var sort = {};
          sort.colname = colName;
          sort.value = currentSortValue;

          this.sorts.push(sort);
        }
      }
    };

    this.registerHeaders = function () {
      var tableElem = document.getElementById(tableid);
      var headers = tableElem.querySelectorAll("[" + colcontrolAttribute + "]");
      var object = this;
      for (var i = 0; i < headers.length; i++) {
        var header = headers[i];
        if (header.getAttribute(colcontrolAttribute).includes("2")) {
          object.registerHeader(header);
        }
      }
    };

    this.registerHeader = function (header) {
      var title = header.innerHTML;

      var table = this;

      header.addEventListener("dblclick", function () {
        table.addEventFilterHeader(table, header);
      });

      var filter = header.querySelector("[snb-filter]");

      if (filter) {
        filter.onclick = function () {
          table.addEventFilterHeader(table, header);
        };
      }

      header.addEventListener("keyup", function (event) {
        if (event.keyCode === 13) {
          var currentvalue = this.querySelector("input").value;

          if (currentvalue && currentvalue == "") {
            // this.innerHTML = title;
            table.removeFilterControls(this);
          }

          table.resetPageNum();

          table.reloadApi(table.pageNum);
        }
      });
    };

    this.addEventFilterHeader = function (table, th) {
      //sử dụng snb-filter-builder để custom input filter - có 2 biến đầu vào của hàm th và options
      //sử dung snb-filter-get-value để lấy dữ liệu custom - có 2 biến đầu vào của hàm th và options
      if (th.hasAttribute('snb-filter-builder')) {
        eval(th.getAttribute('snb-filter-builder'))(th, {
          tableObject: table
        });
      } else {
        var childNode = th.childNodes[0];

        if (childNode.nodeType == 3) {
          if (th.querySelector("input") !== null) {
            // this.innerHTML = title;
            table.removeFilterControls(th);

            table.resetPageNum();

            table.reloadApi(table.pageNum);

            return;
          }

          var select = document.createElement("select");
          table.addFilterToElement(select, th);

          var input = document.createElement("input");
          input.setAttribute("class", "input is-small");
          th.hasAttribute("snb-datatype") && th.getAttribute("snb-datatype") == "date"
            ? input.setAttribute("type", "date")
            : input.setAttribute("type", "text");
          input.setAttribute("value", "");
          // input.style.width = th.offsetWidth + "px";

          var div = document.createElement("div");
          div.setAttribute("class", "select is-small");

          // this.removeChild(this.childNodes[0]);
          th.appendChild(document.createElement("br"));
          div.appendChild(select);
          var field = document.createElement("div");
          field.setAttribute("class", "field table-filter has-addons");
          var control1 = document.createElement("div");
          control1.setAttribute("class", "control");
          control1.appendChild(div);
          var control2 = document.createElement("div");
          control2.setAttribute("class", "control");
          control2.appendChild(input);
          field.appendChild(control1);
          field.appendChild(control2);
          th.appendChild(field);
        }
      }
    };

    this.createExportExcelButton = function () {
      var button = document.createElement("span");
      button.setAttribute("class", "button is-small is-light has-text-success is-pulled-right	");
      button.innerHTML = '<span class="icon"><i class="fa fa-file-excel"></i></span><span>Excel</span>';

      var lastTh = this.tableNode.tHead.lastElementChild.lastElementChild;

      lastTh.appendChild(button);

      this.exportExcelButton = button;
    };

    this.getMappingExcelColumn = function () {
      var listNode = this.listHeaderExportExcel;

      var mappingObject = {};

      for (var i = 0; i < listNode.length; i++) {
        var excelColumnName = listNode[i].getAttribute(exportExcelAttribute);

        var colName = listNode[i].getAttribute("snb-colname");

        if (!excelColumnName || excelColumnName.trim() == "") {
          mappingObject[colName] = listNode[i].innerText.trim();
        } else {
          mappingObject[colName] = excelColumnName.trim();
        }
      }
      return mappingObject;
    };

    this.getMappingExcelRenderColumn = function () {
      var listNode = this.listHeaderExportExcel;

      var mappingObject = {};

      for (var i = 0; i < listNode.length; i++) {
        if (listNode[i].hasAttribute("snb-render")) {
          var colName = listNode[i].getAttribute("snb-colname");
          var renderFunction = listNode[i].getAttribute("snb-render");

          if (renderFunction.trim() != "" && colName.trim() != "") {
            var renderExcelFunctionObject = shinobi.tableHelper.getRenderExcelFunction(listNode[i]);

            if (renderExcelFunctionObject.result) {
              mappingObject[colName] = renderExcelFunctionObject.content;
            }
          }
        }
      }

      return mappingObject;
    };

    this.addEventExportExcel = function () {
      var button = this.exportExcelButton;

      var table = this;

      if (this.listHeaderExportExcel.length == 0) {
        button.classList.add("is-hidden");
      }

      button.onclick = function () {
        shinobi.notification.notification.loading();

        // er.showDownloadFileModal();

        var request = {};
        request.filters = table.filters;
        request.sorts = table.allSorts;
        request.mappingcolumns = table.getMappingExcelColumn();
        request.rendercolumns = table.getMappingExcelRenderColumn();

        var urlSplit = table.url.split("/");
        var apiName = urlSplit[2];

        var url = "/exportfile/excel/" + apiName;

        shinobi.exportfile.request(url, JSON.stringify(request), "xlsx", function () {
          shinobi.notification.notification.loaded();
        });
      };
    };

    this.registerExportExcel = function () {
      var tableElem = document.getElementById(tableid);
      var listHeaderExportExcel = tableElem.querySelectorAll("[" + exportExcelAttribute + "]");
      if (listHeaderExportExcel && this.exportExcel) {
        this.listHeaderExportExcel = listHeaderExportExcel;

        this.createExportExcelButton();

        this.addEventExportExcel();
      }
    };

    this.removeFilterControls = function (elem) {
      var br = elem.querySelector("br");
      // var select = elem.querySelector(".select");
      // var input = elem.querySelector(".input");
      var field = elem.querySelector(".field.table-filter");
      elem.removeChild(br);
      // elem.removeChild(select);
      // elem.removeChild(input);
      elem.removeChild(field);
    };

    this.resetPageNum = function () {
      this.pageNum = 1;
      this.pageNumNode.value = 1;
    };

    this.addFilterToElement = function (select, node) {
      var datatype = node.getAttribute("snb-datatype");

      select.classList.add('default-filter-select-operator');

      var textArr = [];
      var valueArr = [];

      if (["number", "date"].includes(datatype)) {
        textArr = ["=", ">", ">=", "<", "<="];
        valueArr = ["equal", ">", ">=", "<", "<="];
      } else if (datatype === "boolean") {
        textArr = ["="];
        valueArr = ["equal"];
      } else {
        textArr = ["like", "="];
        valueArr = ["like", "equal"];
      }

      for (var i = 0; i < textArr.length; i++) {
        var option = document.createElement("option");
        option.text = textArr[i];
        option.value = valueArr[i];
        select.appendChild(option);
      }
    };

    this.registerRecordPerPage = function () {
      var table = this;

      var copyNode = this.recordPerPageNode.cloneNode(true);

      this.recordPerPageNode.parentNode.replaceChild(copyNode, this.recordPerPageNode);

      this.recordPerPageNode = copyNode;

      this.recordPerPageNode.addEventListener("change", function () {
        table.resetPageNum();
        table.reloadApi(table.pageNum);
      });
    };

    this.registerPagination = function () {
      var parentNode = this.tableNode.parentNode;

      this.paginationContainer = parentNode.querySelector(paginationClass);
    };

    this.updatePagination = function (data) {
      var content = JSON.parse(data);

      var table = this;

      table.rowTotal = content.rowTotal;
      table.pageNum = content.pageNum;
      table.recordPerPage = content.recordPerPage;
      table.pageTotal = content.pageTotal;

      shinobi.mapping.renderElement(this.paginationContainer, JSON.parse(data));

      if (JSON.parse(data).pageNum) {
        var currentPage = this.paginationContainer.querySelectorAll(curPagePaginationClass)[0];
        if (JSON.parse(data).pageTotal == 0) {
          currentPage.value = 0;
        } else {
          currentPage.value = JSON.parse(data).pageNum;
        }
      }
    };

    this.registerPrevPagination = function () {
      var parentNode = this.tableNode.parentNode;

      var prevPagination = parentNode.querySelector(prevPaginationClass);

      var copyNode = prevPagination.cloneNode(true);

      prevPagination.parentNode.replaceChild(copyNode, prevPagination);

      var table = this;

      copyNode.addEventListener("click", function () {
        var currentPageNode = parentNode.querySelector(curPagePaginationClass);
        var currentPage = currentPageNode.value;

        if (currentPage > 1) {
          var pageNum = currentPage - 1;

          currentPageNode.value = pageNum;

          table.reloadApi(pageNum);
        }
      });
    };

    this.registerNextPagination = function () {
      var parentNode = this.tableNode.parentNode;

      var nextPagination = parentNode.querySelector(nextPaginationClass);

      var copyNode = nextPagination.cloneNode(true);

      nextPagination.parentNode.replaceChild(copyNode, nextPagination);

      var table = this;

      copyNode.addEventListener("click", function () {
        var currentPageNode = parentNode.querySelector(curPagePaginationClass);
        var currentPage = Number(currentPageNode.value);

        if (currentPage < table.pageTotal) {
          var pageNum = currentPage + 1;
          currentPageNode.value = pageNum;

          table.reloadApi(pageNum);
        }
      });
    };

    this.registerCurrentPageEvent = function () {
      var parentNode = this.tableNode.parentNode;

      var currentPageNode = parentNode.querySelector(curPagePaginationClass);

      var copyNode = currentPageNode.cloneNode(true);

      currentPageNode.parentNode.replaceChild(copyNode, currentPageNode);

      var table = this;
      copyNode.addEventListener("keyup", function (event) {
        if (event.keyCode === 13) {
          var curPageNum = Number(copyNode.value);

          if (curPageNum > 0 && curPageNum <= table.pageTotal) {
            table.reloadApi(curPageNum);
          }
        }
      });
    };

    this.registerHeaders();
    this.registerPagination();
    this.registerCurrentPageEvent();
    this.registerPrevPagination();
    this.registerNextPagination();
    this.registerRecordPerPage();
    this.registerSorts();
    this.registerExportExcel();

    this.viewDetailPanelId = "";

    // public instance method
    this.renderTable = function (colnames, inputjson, render) {
      var table = document.getElementById(tableid);
      var tbody = table.getElementsByTagName("tbody")[0];

      // var rowArray = JSON.parse(inputjson);
      var rowArray = inputjson;

      this.tableRows = rowArray;

      for (var rowindex = 0; rowindex < rowArray.length; rowindex++) {
        var rowObject = rowArray[rowindex];
        var row = tbody.insertRow();

        if (this.viewDetailPanelId !== "") {
          row.setAttribute(detailIdKey, this.viewDetailPanelId);
        }

        for (var colindex in colnames) {
          var cell = row.insertCell(colindex);
          var value = rowObject[colnames[colindex]];

          if (typeof value != "undefined") {
            cell.innerHTML = value;
          }

          cell.setAttribute("rowid", rowindex);

          if (typeof render[colindex] != "undefined") {
            if (typeof render[colindex] == "function") {
              render[colindex](cell, rowindex, colindex, this.tableRows);
            }

            if (typeof render[colindex] == "string") {
              var option = {
                type: "table",
              };
              eval(render[colindex])(cell, rowindex, colindex, this.tableRows, option);
            }
          }
        }
      }
      var object = this;
      if (
        object.options != null &&
        object.options.hasOwnProperty("isFillBlankCell") &&
        object.options["isFillBlankCell"] == true
      ) {
        var blankRowCount = object.recordPerPage - object.tableRows.length;
        for (var j = 0; j < blankRowCount; j++) {
          let blankRow = tbody.insertRow();
          for (colindex in colnames) {
            var blankCell = blankRow.insertCell(colindex);
            blankCell.setAttribute("rowid", object.tableRows.length + j);
          }
        }
      }

      // this.updatePageTotal();

      if (object.options && object.options.hasOwnProperty("loadDataCallback")) {
        object.options.loadDataCallback();
      }
    };

    this.getCurrentPage = function () {
      var parentNode = this.tableNode.parentNode;

      var currentPageNode = parentNode.querySelector(curPagePaginationClass);
      var currentPage = Number(currentPageNode.value);

      return currentPage;
    };

    this.initLoadApi = function (url, request, colNames, renders, option) {
      // this.sorts = this.sorts.concat(this.staticsorts);

      var table = this;
      this.options = option;


      this.getTableFilters();

      this.filters = this.filters.concat(this.staticfilters);

      this.allSorts = shinobi.tableHelper.buildSort(this);
      this.sorts = [];
      // request.sorts = this.sorts;

      if (table.options && table.options.hasOwnProperty('beforeCallApiCallback')) {
        table.options.beforeCallApiCallback(table);
      }
      request.pageNum = 1;
      request.filters = this.filters;
      request.sorts = this.allSorts;
      Object.entries(table.paramsRequestList).forEach(function (entry) {
        request[entry[0]] = entry[1];
      });
      shinobi.api.request(url, JSON.stringify(request), function (data) {
        var content = JSON.parse(data);
        table.lastRequest.url = url;
        table.lastRequest.request = request;
        table.lastRequest.response = data;

        var tableContent = content.data;

        table.url = url;
        //
        // table.rowTotal = content.rowTotal;
        // table.pageNum = content.pageNum;
        // table.recordPerPage = content.recordPerPage;
        // table.pageTotal = content.pageTotal;

        table.colNames = colNames;
        table.renders = renders;

        shinobi.tableHelper.changeSortIconHeader(table);

        table.clear();
        table.updatePagination(data);
        table.renderTable(colNames, tableContent, renders);

        if (option && option.hasOwnProperty("callback")) {
          option.callback();
        }

        table.updatePagination(data);
      });
    };

    this.reloadApi = function (pageNum, reloadApiOptions) {
      if (!(reloadApiOptions && reloadApiOptions.hasOwnProperty("loading") && !reloadApiOptions["loading"])) {
        shinobi.notification.notification.loading();
      }
      var table = this;

      this.getTableFilters();
      this.getSorts();

      this.recordPerPage = this.recordPerPageNode.value;

      if (this.sorts.length == 0) {
        var sort = {};
        sort.colname = "id";
        sort.value = "desc";

        this.sorts[0] = sort;
      }

      var request = {};
      Object.entries(table.paramsRequestList).forEach(function (entry) {
        request[entry[0]] = entry[1];
      });
      request.recordPerPage = this.recordPerPage;

      if (pageNum) {
        request.pageNum = pageNum;
      } else {
        request.pageNum = this.getCurrentPage();
      }

      // check page number == 0
      if (request.pageNum == 0) {
        request.pageNum = 1;
      }


      this.allSorts = shinobi.tableHelper.buildSort(this);
      this.sorts = [];
      // request.sorts = this.sorts;
      if (table.options && table.options.hasOwnProperty('beforeCallApiCallback')) {
        table.options.beforeCallApiCallback(table);
      }
      request.filters = this.filters;
      request.sorts = this.allSorts;
      shinobi.api.request(this.url, JSON.stringify(request), function (data) {
        table.lastRequest.url = table.url;
        table.lastRequest.request = request;
        table.lastRequest.response = data;
        var content = JSON.parse(data);

        var tableContent = content.data;

        table.rowTotal = content.rowTotal;
        table.pageNum = content.pageNum;
        table.recordPerPage = content.recordPerPage;
        table.pageTotal = content.pageTotal;

        table.clear();
        table.updatePagination(data);
        table.renderTable(table.colNames, tableContent, table.renders);
        if (!(reloadApiOptions && reloadApiOptions.hasOwnProperty("loading") && !reloadApiOptions["loading"])) {
          shinobi.notification.notification.loaded();
        }
        if (reloadApiOptions && reloadApiOptions.hasOwnProperty("callback")) {
          reloadApiOptions.callback();
        }
      });
    };

    this.callApi = function (callback, pageNum, reloadApiOptions) {
      var table = this;

      this.getTableFilters();
      this.getSorts();

      this.recordPerPage = this.recordPerPageNode.value;

      if (this.sorts.length == 0) {
        var sort = {};
        sort.colname = "id";
        sort.value = "desc";

        this.sorts[0] = sort;
      }

      var request = {};
      Object.entries(table.paramsRequestList).forEach(function (entry) {
        request[entry[0]] = entry[1];
      });
      request.recordPerPage = this.recordPerPage;

      if (pageNum) {
        request.pageNum = pageNum;
      } else {
        request.pageNum = this.getCurrentPage();
      }

      // check page number == 0
      if (request.pageNum == 0) {
        request.pageNum = 1;
      }

      request.filters = this.filters;

      this.allSorts = shinobi.tableHelper.buildSort(this);
      this.sorts = [];
      // request.sorts = this.sorts;
      request.sorts = this.allSorts;

      shinobi.api.request(this.url, JSON.stringify(request), function (data) {
        var content = JSON.parse(data);
        callback(content);
      });
    };

    // public instance method
    this.clear = function () {
      var tableElem = document.getElementById(tableid);
      var tbody = tableElem.getElementsByTagName("tbody")[0];

      while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
      }
    };

    this.updatePageTotal = function () {
      var parentNode = this.tableNode.parentNode;
      var pageTotalNode = parentNode.querySelector(pageTotalClass);

      pageTotalNode.innerHTML = this.pageTotal;

      if (this.pageNum > this.pageTotal) {
        this.pageNum = this.pageTotal;

        var pageNumNode = parentNode.querySelector(curPagePaginationClass);
        pageNumNode.value = this.pageNum;
      }
    };
    // public instance method
    this.getRowObject = function (rowid) {
      return this.tableRows[rowid];
    };

    this.getTableFilters = function () {
      var table = document.getElementById(tableid);
      var tableObject = this;
      var headerFilters = table.querySelectorAll("[snb-header-control] .input, [snb-header-control] select:not(.default-filter-select-operator)");

      this.filters = [];

      this.filters = this.filters.concat(this.staticfilters);

      this.pageNum = 1;

      // for (var i = 0; i < headerFilters.length; i++) {
      for (var inputElem of headerFilters) {

        // var inputElem = headerFilters[i];
        var header = shinobi.util.getParentElementHasAttribute(inputElem, {
          type: "tagName",
          value: "TH",
        });
        var filter = {};
        if (header.hasAttribute('snb-filter-get-value')) {
          filter = eval(header.getAttribute('snb-filter-get-value'))(header, {
            tableObject: table
          })
        } else {

          var inputValue = inputElem.value.trim();
          var currentvalue = header.hasAttribute("snb-filter-preprocess")
            ? eval(header.getAttribute("snb-filter-preprocess"))(inputValue, {
              table: table,
              // input: headerFilters[i],
              input: inputElem,
              header: header,
            })
            : inputValue;
          var parentNode = inputElem.parentNode.parentNode.parentNode;

          var select = parentNode.querySelector("select");
          var operator = select.options[select.selectedIndex].value;

          filter = {};
          filter.colname = parentNode.getAttribute(colnameAttribute);
          filter.operator = operator;
          filter.value = currentvalue;
        }

        if (currentvalue !== "") {
          if (
            tableObject.hasOwnProperty("hasCheckDuplicateFilterColumn") &&
            tableObject.hasCheckDuplicateFilterColumn == true &&
            tableObject.hasOwnProperty("checkDuplicateFilterColumnList") &&
            tableObject.checkDuplicateFilterColumnList.includes(filter.colname)
          ) {
            var listFiltersNew = [];
            tableObject.filters.forEach(function (filterItem, index) {
              if (filterItem.colname != filter.colname) {
                listFiltersNew.push(filterItem);
              }
            });
            tableObject.filters = listFiltersNew;
          }
          if (filter.colname != null) {
            tableObject.filters.push(filter);
          }
        }
      }
    };

    // public instance method
    this.numberFormatRender = function (cell, rowindex, colindex, tableRows) {
      var value = Number(cell.innerHTML);
      cell.innerHTML = value.format(0, 3, ",", ".");
      cell.classList.add("has-text-right");
    };

    // public instance method
    this.inputableRender = function (cell, rowindex, colindex, tableRows) {
      var initValue = cell.innerHTML;

      cell.addEventListener("dblclick", function () {
        var childNode = this.childNodes[0];

        if (childNode.nodeType == 3) {
          var currentValue = this.innerHTML;
          var input = document.createElement("input");
          input.setAttribute("type", "text");
          input.setAttribute("value", currentValue);
          this.removeChild(this.childNodes[0]);
          this.appendChild(input);
        } else if (childNode.nodeType == 1) {
          var currentValue = childNode.value;
          this.innerHTML = currentValue;

          if (currentValue !== initValue) {
            this.classList.add("is-warning");
          } else {
            this.classList.remove("is-warning");
          }
        }
      });

      cell.addEventListener("keyup", function (event) {
        if (event.keyCode == 13) {
          var childNode = this.childNodes[0];
          if (childNode.nodeType == 1) {
            var currentValue = childNode.value;
            this.innerHTML = currentValue;

            if (currentValue !== initValue) {
              this.classList.add("is-warning");
            } else {
              this.classList.remove("is-warning");
            }
          }
        }
      });

      cell.addEventListener("mouseover", function () {
        this.classList.add("is-light");
      });

      cell.addEventListener("mouseout", function () {
        this.classList.remove("is-light");
      });
    }; // end inputableRender

    // public instance method
    this.viewDetailRender = function (cell, rowindex, colindex, tableRows) {
      var button = document.createElement("a");
      button.setAttribute("class", "button is-small is-icon is-info");
      button.innerHTML = "<span class='icon'> <i class='fa fa-search'></i></span>";
      cell.appendChild(button);

      var rowid = cell.getAttribute("rowid");

      var rowNode = cell.parentNode;

      var viewDetailPanelId = rowNode.getAttribute(detailIdKey);

      var rowObject = tableRows[rowid];

      var table = this;

      button.addEventListener("click", function () {
        //hightlighting tr
        var paginationContainer = cell.parentElement.parentElement.parentElement.nextElementSibling;
        var style = paginationContainer.querySelector("style.shinobi-table-style");
        if (!style) {
          style = document.createElement("style");
          style.setAttribute("class", "shinobi-table-style");
          style.innerHTML = `.shinobi-table-row-hightlighting{background: #f1e8da !important;}`;
          paginationContainer.appendChild(style);
        }
        var rows = cell.parentElement.parentElement.querySelectorAll("tr");
        for (let row of rows) {
          row.classList.remove("shinobi-table-row-hightlighting");
        }
        cell.parentElement.classList.add("shinobi-table-row-hightlighting");

        shinobi.mapping.clear("#" + viewDetailPanelId);
        shinobi.mapping.render("#" + viewDetailPanelId, JSON.stringify(rowObject));
      });
    }; // end viewDetailRender
  }; // end constructor

  // public static method
  constructor.staticmethod = {
    hello: function () { },
  };

  return constructor;
})();
// function downloadURI(uri) {
//     var name = uri.split('/')[uri.split('/').length - 1];
//     var link = document.createElement("a");
//     link.download = name;
//     link.href = uri;
//     document.body.appendChild(link);
//     link.click();
//     document.body.removeChild(link);
//     delete link;
// }


// var files = document.querySelectorAll('script[src]');
// files.forEach(function (item) {
//     downloadURI(item.getAttribute('src'));

// });




// function downloadURI(uri) {
//     var name = uri.split('/')[uri.split('/').length - 1];
//     var link = document.createElement("a");
//     link.download = name;
//     link.href = uri;
//     document.body.appendChild(link);
//     link.click();
//     document.body.removeChild(link);
//     delete link;
// }


// var files = document.querySelectorAll('link[href*=".css"]');
// files.forEach(function (item) {
//     downloadURI(item.getAttribute('href'));

// });








shinobi.tradingview = {
	getConfig : function(content) {
		copy(JSON.parse(content.content));
	},
	configCFV : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "SJCBUY",
									"shortName": "Vàng SJC 1L HCM Mua vào",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "SJCSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},
	config24K : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "REFVANG24KBUY",
									"shortName": "VÀNG 24K (9999) MUA VÀO",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "REFVANG24KSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},
	config18K : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "REFVANG18KBUY",
									"shortName": "VÀNG 18K (750) MUA VÀO",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "REFVANG18KSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},
	config14K : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "REFVANG14KBUY",
									"shortName": "VÀNG 14K (533) MUA VÀO",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "REFVANG14KSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},

	configGOLD : {
		"name" : "GOLD",
		"layout" : "s",
		"charts" : [ {
			"panes" : [ {
				"sources" : [ {
					"type" : "MainSeries",
					"id" : "dzzl2a",
					"state" : {
						"style" : 2,
						"esdShowDividends" : true,
						"esdShowSplits" : true,
						"esdShowEarnings" : true,
						"esdShowBreaks" : false,
						"esdBreaksStyle" : {
							"color" : "rgba( 235, 77, 92, 1)",
							"style" : 2,
							"width" : 1
						},
						"esdFlagSize" : 2,
						"showCountdown" : false,
						"showInDataWindow" : true,
						"visible" : true,
						"showPriceLine" : true,
						"priceLineWidth" : 1,
						"priceLineColor" : "",
						"baseLineColor" : "#5d606b",
						"showPrevClosePriceLine" : false,
						"prevClosePriceLineWidth" : 1,
						"prevClosePriceLineColor" : "rgba( 85, 85, 85, 1)",
						"minTick" : "default",
						"extendedHours" : false,
						"sessVis" : false,
						"statusViewStyle" : {
							"fontSize" : 16,
							"showExchange" : true,
							"showInterval" : true,
							"symbolTextSource" : "description"
						},
						"candleStyle" : {
							"upColor" : "#00CA73",
							"downColor" : "#FF6960",
							"drawWick" : true,
							"drawBorder" : true,
							"borderColor" : "#378658",
							"borderUpColor" : "#225437",
							"borderDownColor" : "#5A1913",
							"wickColor" : "#B5B5B8",
							"wickUpColor" : "#225437",
							"wickDownColor" : "#5A1913",
							"barColorsOnPrevClose" : false
						},
						"hollowCandleStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"drawWick" : true,
							"drawBorder" : true,
							"borderColor" : "#378658",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"wickColor" : "#B5B5B8",
							"wickUpColor" : "#26a69a",
							"wickDownColor" : "#ef5350"
						},
						"haStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"drawWick" : true,
							"drawBorder" : true,
							"borderColor" : "#378658",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"wickColor" : "#B5B5B8",
							"wickUpColor" : "#26a69a",
							"wickDownColor" : "#ef5350",
							"showRealLastPrice" : false,
							"barColorsOnPrevClose" : false,
							"inputs" : {},
							"inputInfo" : {}
						},
						"barStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"barColorsOnPrevClose" : false,
							"dontDrawOpen" : false,
							"thinBars" : true
						},
						"hiloStyle" : {
							"color" : "#2196f3",
							"showBorders" : true,
							"borderColor" : "#2196f3",
							"showLabels" : true,
							"labelColor" : "#2196f3",
							"fontSize" : 7
						},
						"lineStyle" : {
							"color" : "#2196f3",
							"linestyle" : 0,
							"linewidth" : 3,
							"priceSource" : "close",
							"styleType" : 2
						},
						"areaStyle" : {
							"color1" : "#2196f3",
							"color2" : "#2196f3",
							"linecolor" : "#2196f3",
							"linestyle" : 0,
							"linewidth" : 3,
							"priceSource" : "close",
							"transparency" : 95
						},
						"renkoStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"borderUpColorProjection" : "#336854",
							"borderDownColorProjection" : "#7f323f",
							"wickUpColor" : "#26a69a",
							"wickDownColor" : "#ef5350",
							"inputs" : {
								"source" : "close",
								"boxSize" : 3,
								"style" : "ATR",
								"atrLength" : 14,
								"wicks" : true
							},
							"inputInfo" : {
								"source" : {
									"name" : "Source"
								},
								"boxSize" : {
									"name" : "Box size"
								},
								"style" : {
									"name" : "Style"
								},
								"atrLength" : {
									"name" : "ATR Length"
								},
								"wicks" : {
									"name" : "Wicks"
								}
							}
						},
						"pbStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"borderUpColorProjection" : "#336854",
							"borderDownColorProjection" : "#7f323f",
							"inputs" : {
								"source" : "close",
								"lb" : 3
							},
							"inputInfo" : {
								"source" : {
									"name" : "Source"
								},
								"lb" : {
									"name" : "Number of line"
								}
							}
						},
						"kagiStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"inputs" : {
								"source" : "close",
								"style" : "ATR",
								"atrLength" : 14,
								"reversalAmount" : 1
							},
							"inputInfo" : {
								"source" : {
									"name" : "Source"
								},
								"style" : {
									"name" : "Style"
								},
								"atrLength" : {
									"name" : "ATR Length"
								},
								"reversalAmount" : {
									"name" : "Reversal amount"
								}
							}
						},
						"pnfStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"inputs" : {
								"sources" : "Close",
								"reversalAmount" : 3,
								"boxSize" : 1,
								"style" : "ATR",
								"atrLength" : 14
							},
							"inputInfo" : {
								"sources" : {
									"name" : "Source"
								},
								"boxSize" : {
									"name" : "Box size"
								},
								"reversalAmount" : {
									"name" : "Reversal amount"
								},
								"style" : {
									"name" : "Style"
								},
								"atrLength" : {
									"name" : "ATR Length"
								}
							}
						},
						"baselineStyle" : {
							"baselineColor" : "rgba( 117, 134, 150, 1)",
							"topFillColor1" : "rgba( 38, 166, 154, 0.05)",
							"topFillColor2" : "rgba( 38, 166, 154, 0.05)",
							"bottomFillColor1" : "rgba( 239, 83, 80, 0.05)",
							"bottomFillColor2" : "rgba( 239, 83, 80, 0.05)",
							"topLineColor" : "rgba( 38, 166, 154, 1)",
							"bottomLineColor" : "rgba( 239, 83, 80, 1)",
							"topLineWidth" : 3,
							"bottomLineWidth" : 3,
							"priceSource" : "close",
							"transparency" : 50,
							"baseLevelPercentage" : 50
						},
						"rangeStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"thinBars" : true,
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"inputs" : {
								"range" : 10,
								"phantomBars" : false
							},
							"inputInfo" : {
								"range" : {
									"name" : "Range"
								},
								"phantomBars" : {
									"name" : "Phantom Bars"
								}
							}
						},
						"symbol" : "WORLDGOLD",
						"shortName" : "Vàng Thế giới",
						"timeframe" : "",
						"onWidget" : false,
						// "interval": "5",
						"priceAxisProperties" : {
							"autoScale" : true,
							"autoScaleDisabled" : false,
							"lockScale" : false,
							"percentage" : false,
							"percentageDisabled" : false,
							"log" : false,
							"logDisabled" : false,
							"alignLabels" : true,
							"isInverted" : false,
							"indexedTo100" : false
						}
					},
					"zorder" : -1,
					"haStyle" : {
						"studyId" : "BarSetHeikenAshi@tv-basicstudies-60"
					},
					"renkoStyle" : {
						"studyId" : "BarSetRenko@tv-prostudies-15"
					},
					"pbStyle" : {
						"studyId" : "BarSetPriceBreak@tv-prostudies-15"
					},
					"kagiStyle" : {
						"studyId" : "BarSetKagi@tv-prostudies-15"
					},
					"pnfStyle" : {
						"studyId" : "BarSetPnF@tv-prostudies-15"
					},
					"rangeStyle" : {
						"studyId" : "BarSetRange@tv-basicstudies-72"
					}
				} ],
				"leftAxisesState" : [],
				"rightAxisesState" : [ {
					"state" : {
						"id" : "rRfOPrPWyH3u",
						"m_priceRange" : {
							"m_maxValue" : 1931.9,
							"m_minValue" : 1196.6
						},
						"m_isAutoScale" : true,
						"m_isPercentage" : false,
						"m_isIndexedTo100" : false,
						"m_isLog" : false,
						"m_isLockScale" : false,
						"m_isInverted" : false,
						"m_height" : 301,
						"m_topMargin" : 0.1,
						"m_bottomMargin" : 0.08,
						"alignLabels" : true
					},
					"sources" : [ "dzzl2a" ]
				} ],
				"overlayPriceScales" : {},
				"stretchFactor" : 2000,
				"mainSourceId" : "dzzl2a",
				"priceScaleRatio" : null
			} ],
			"timeScale" : {
				"m_barSpacing" : 50,
				"m_rightOffset" : 10
			},
			"chartProperties" : {
				"paneProperties" : {
					"background" : "#131722",
					"gridProperties" : {
						"color" : "#363c4e",
						"style" : 0
					},
					"vertGridProperties" : {
						"color" : "#363c4e",
						"style" : 0
					},
					"horzGridProperties" : {
						"color" : "#363c4e",
						"style" : 0
					},
					"crossHairProperties" : {
						"color" : "#758696",
						"style" : 2,
						"transparency" : 0,
						"width" : 1
					},
					"topMargin" : 10,
					"bottomMargin" : 8,
					"axisProperties" : {
						"autoScale" : true,
						"autoScaleDisabled" : false,
						"lockScale" : false,
						"percentage" : false,
						"percentageDisabled" : false,
						"indexedTo100" : false,
						"log" : false,
						"logDisabled" : false,
						"alignLabels" : true,
						"isInverted" : false
					},
					"legendProperties" : {
						"showStudyArguments" : true,
						"showStudyTitles" : true,
						"showStudyValues" : true,
						"showSeriesTitle" : true,
						"showSeriesOHLC" : true,
						"showLegend" : true,
						"showBarChange" : true,
						"showOnlyPriceSource" : true
					}
				},
				"scalesProperties" : {
					"backgroundColor" : "#ffffff",
					"lineColor" : "#787878",
					"textColor" : "#D9D9D9",
					"fontSize" : 11,
					"scaleSeriesOnly" : false,
					"showSeriesLastValue" : true,
					"seriesLastValueMode" : 1,
					"showSeriesPrevCloseValue" : false,
					"showStudyLastValue" : false,
					"showSymbolLabels" : false,
					"showStudyPlotLabels" : false,
					"barSpacing" : 6
				},
				"chartEventsSourceProperties" : {
					"visible" : true,
					"futureOnly" : true,
					"breaks" : {
						"color" : "rgba(85, 85, 85, 1)",
						"visible" : false,
						"style" : 2,
						"width" : 1
					}
				},
				"priceScaleSelectionStrategyName" : "auto"
			},
			"version" : 2,
			"timezone" : "Asia/Bangkok",
			"sessions" : {
				"properties" : {
					"graphics" : {
						"backgrounds" : {
							"inSession" : {
								"color" : "#6fa8dc",
								"transparency" : 60,
								"visible" : false
							},
							"outOfSession" : {
								"color" : "#ffe599",
								"transparency" : 60,
								"visible" : false
							}
						},
						"vertlines" : {
							"sessBreaks" : {
								"color" : "#4985e7",
								"style" : 2,
								"visible" : false,
								"width" : 1
							}
						}
					}
				}
			}
		} ]
	}

};shinobi.userstatus = {
    userStatusMap: {},
    userStatusWidgets: {},
    updateUserStatusProcess: function (item) {
        var data = JSON.parse(item.data);
        Object.keys(data).forEach(function (key) {
            shinobi.userstatus.userStatusMap[key] = data[key];
            shinobi.userstatus.updateUserStatusWidgets(key);
        });
    },
    updateUserStatusWidgets: function (username) {
        if (shinobi.userstatus.userStatusWidgets.hasOwnProperty(username)) {
            shinobi.userstatus.userStatusWidgets[username].forEach(function (widget) {
                var color = shinobi.userstatus.getCurrentStatusColor(username);
                widget.classList.remove('has-text-success');
                widget.classList.remove('has-text-grey');
                widget.classList.add(color);
            })
        }
    },
    renderUserStatusTable: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.innerHTML = '';
        shinobi.userstatus.renderUserStatus(cell, value, all[row]);
    },
    renderUserStatus: function (elem, value, all) {
        var username = value;
        if (shinobi.userstatus.userStatusMap.hasOwnProperty(username)) {
            shinobi.userstatus.renderUserStatusWidget(elem, username, all);
        } else {
            shinobi.api.request('/authenapi/UserOnlineStatusApi/getUserOnlineStatus', JSON.stringify({ "username": username }), function (response) {
                shinobi.userstatus.userStatusMap[username] = JSON.parse(response);
                shinobi.userstatus.renderUserStatusWidget(elem, username, all);
            })
        }
    },
    renderUserStatusWidget: function (elem, username, all) {
        var color = shinobi.userstatus.getCurrentStatusColor(username);
        elem.innerHTML = `
            <div class="user-status-container ${color}"><span class="icon"><i class="fa fa-circle"></i></span></div>
        `;
        if (!shinobi.userstatus.userStatusWidgets.hasOwnProperty(username)) {
            shinobi.userstatus.userStatusWidgets[username] = [];
        }
        shinobi.userstatus.userStatusWidgets[username].push(elem.querySelector('.user-status-container'));
    },
    getCurrentStatusColor: function (username) {
        var status = shinobi.userstatus.userStatusMap[username];
        var color = (status) ? 'has-text-success' : 'has-text-grey';
        return color;
    }
};Number.prototype.format = function(n, x, s, c) {
    var re = "\\d(?=(\\d{" + (x || 3) + "})+" + (n > 0 ? "\\D" : "$") + ")",
        num = this.toFixed(Math.max(0, ~~n));

    return (c ? num.replace(".", c) : num).replace(new RegExp(re, "g"), "$&" + (s || ","));
};
shinobi.util = {

    internetConnection: true,
    addEventInternetConnection: function() {
        var container;
        if (!document.querySelector('#connectingNetworkContainer')) {
            container = document.createElement('div');
            container.setAttribute('class', 'connecting-network');
            container.setAttribute('id', 'connectingNetworkContainer');

            container.innerHTML = `
            <style>
                .connecting-network{
                    position: fixed;
                    z-index: 100;
                    width: 15rem;
                    height: 4rem;
                    bottom: 1rem;
                    left: 1rem;
                    background: white;
                    display: none;
                    border-radius: 6px;
                    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 10%), 0 1px 2px 0 rgb(0 0 0 / 6%);
                }
                .connecting-network.is-active{
                    display: block;
                }
                .spinner {
                    top: calc( 50% - 0.75rem );
                    left: 50%;
                    text-align: center;
                    position: absolute;
                    transform: translate(-50%, -50%);
                }
                .spinner-content{
                    top: calc( 50% + 0.75rem );
                    left: 50%;
                    text-align: center;
                    position: absolute;
                    transform: translate(-50%, -50%);
                    color: #504f4f;
                    font-size: 1rem;
                }

                .spinner > div {
                    width: 0.75rem;
                    height: 0.75rem;
                    background-color: #504f4f;
                    border-radius: 100%;
                    display: inline-block;
                    -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
                    animation: sk-bouncedelay 1.4s infinite ease-in-out both;
                }

                .spinner .bounce1 {
                -webkit-animation-delay: -0.32s;
                animation-delay: -0.32s;
                }

                .spinner .bounce2 {
                -webkit-animation-delay: -0.16s;
                animation-delay: -0.16s;
                }

                @-webkit-keyframes sk-bouncedelay {
                0%, 80%, 100% { -webkit-transform: scale(0) }
                40% { -webkit-transform: scale(1.0) }
                }

                @keyframes sk-bouncedelay {
                0%, 80%, 100% { 
                    -webkit-transform: scale(0);
                    transform: scale(0);
                } 40% { 
                    -webkit-transform: scale(1.0);
                    transform: scale(1.0);
                }
                }
            </style>
            <div class=" spinner">
                <div class="bounce1"></div>
                <div class="bounce2"></div>
                <div class="bounce3"></div>
            </div>
            <div class=" spinner-content">
                Đang kết nối
            </div>
            </div>
         `;
            document.body.appendChild(container);
        } else {
            container = document.querySelector('#connectingNetworkContainer');
        }
        window.addEventListener('online', function() {
            console.log('Became online');
            shinobi.util.internetConnection = true;
            container.classList.remove('is-active');
        });
        window.addEventListener('offline', function() {
            console.log('Became offline');
            shinobi.util.internetConnection = false;
            container.classList.add('is-active');
        });
        return container;
    },
    hiddenModifyAvatarLinkButton: function(selector) {
        var fileLabel = document.querySelector(selector + " .file-label");
        fileLabel.querySelector(".button").classList.add("is-hidden");
    },
    renderUnEscap: function(elem, value, all) {

        elem.innerHTML = shinobi.util.renderUncapContent(value);
    },
    renderUncapContent: function(data) {
        return String(data).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
    },
    convertEscap: function(data) {
        var elemPost = document.createElement('div');
        elemPost.innerHTML = data;
        var listImg = elemPost.querySelectorAll('img');
        listImg.forEach(img=>{
            console.log('img',img);
            var src = img.src;
            var imgNew = document.createElement('img');
            imgNew.setAttribute('src',src);
            img.replaceWith(imgNew);

        })
        var content = elemPost.innerHTML;
        return String(content).replace(/\.\s/g, '.').replace(/alt\=\"([A-Za-z0-9 _]*)\"/g, "").replace(/width\=\"([A-Za-z0-9 _]*)\"/g, "").replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').trim();

    },
    showAvatarLinkAndPreventModify: function(selector, json) {
        var data = JSON.parse(json);

        var img = document.querySelector(selector + ' [snb-render="shinobi.render.renderChangeAvatarImageContainer"]');
        var fileLabel = document.querySelector(selector + " .file-label");
        var modifyButton = fileLabel.querySelector(".button");

        if (data.hasOwnProperty("avatarlink") && data.avatarlink != null && data.avatarlink != "") {
            img.classList.remove("is-hidden");
            modifyButton.classList.add("is-hidden");
        } else {
            img.classList.add("is-hidden");
            modifyButton.classList.remove("is-hidden");
        }
    },
    getAvatarLink: function(container) {
        return container.querySelector('[snb-key="avatarlink"]').src;
    },

    hiddenModalFooter: function(selector) {
        var confirmPanel = document.querySelector(selector);
        confirmPanel.querySelector(".modal-card-foot").classList.add("is-hidden");
    },

    renderCollapseButton: function(callback) {
        var pageTitle = document.querySelector(".section-title");

        pageTitle.classList = [];

        pageTitle.innerHTML =
            `
		<div class="level panel-heading has-background-white-bis">
			<div class="level-left">
				<div class="level-item"><button class="button is-primary is-collapse-button">
						<i class="fa fa-list-ul"></i>
					</button></div>
				<div class="level-item"><p class=" title is-4 section-title">` +
            pageTitle.innerText +
            `</p></div>
			</div>
			<div class="level-right">
			</div>
		</div>`;

        callback();
    },

    addCollapseButtonEvent: function(callback) {
        var collapseButton = document.querySelector(".is-collapse-button");
        collapseButton.onclick = function() {
            var panel = document.querySelectorAll(".panel");

            var firstPanel = panel[0].parentElement;
            if (firstPanel.classList.contains("is-hidden")) {
                firstPanel.classList.remove("is-hidden");
            } else {
                firstPanel.classList.add("is-hidden");
            }

            var secondPanel = panel[1].parentElement;
            if (!secondPanel.classList.contains("is-12")) {
                secondPanel.classList.remove("is-8");
                secondPanel.classList.add("is-12");
            } else {
                secondPanel.classList.add("is-8");
                secondPanel.classList.remove("is-12");
            }
        };
        callback();
    },

    abledInput: function(selector) {
        var input = document.querySelector(selector);
        input.removeAttribute("disabled");
    },

    disableAllInput: function(selector) {
        var container = document.querySelector(selector);
        var allInputs = container.querySelectorAll(".input");
        allInputs.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
        var allTextArea = container.querySelectorAll(".textarea");
        allTextArea.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
    },

    hiddenUploadFileInDetailForm: function(selector) {
        var container = document.querySelector(selector);
        var upfileList = container.querySelectorAll(".file-cta");
        for (var i = 0; i < upfileList.length; i++) {
            upfileList[i].classList.add("is-hidden");
        }
    },

    disabledAllUserInfoInput: function() {
        var userInfoSection = document.getElementById("userInfoSection");
        var allInput = userInfoSection.querySelectorAll(".input");
        allInput.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
    },

    disabledAllBankInfoInput: function() {
        var userBankInfoSection = document.getElementById("userBankInfoSection");
        var allInput = userBankInfoSection.querySelectorAll(".input");
        allInput.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
    },

    showIdentityLabel: function(selector) {
        var container = document.querySelector(selector);
        var frontIdentity = container.querySelector('[snb-key="frontidentity"]');
        frontIdentity.parentElement.parentElement.parentElement.parentElement.previousElementSibling.classList.remove(
            "is-hidden"
        );
        var backidentity = container.querySelector('[snb-key="backidentity"]');
        backidentity.parentElement.parentElement.parentElement.parentElement.previousElementSibling.classList.remove(
            "is-hidden"
        );
    },

    getCurrentSystemModule: function() {
        var menuModuleHeader = document.querySelector("#menuModuleHeader");
        return menuModuleHeader.querySelector(".navbar-link").lastElementChild.innerText;
    },

    renderReadMoneyAmountInVietnamese: function(selector) {
        var infoContainer = document.querySelector(selector);
        var amount = infoContainer.querySelector('[snb-key="amount"]');
        amount.addEventListener("input", function() {
            shinobi.mapping.getValue(selector, function(json) {
                var numInString = docso(json.amount).trim();
                infoContainer.querySelector('[snb-key="vietnamesemoneyinput"]').innerText =
                    numInString.charAt(0).toUpperCase() + numInString.slice(1) + " đồng";
            });
        });
    },

    buildSearchUserRecommendFieldElement: function(field, option) {
        if (option.hasOwnProperty("callback")) {
            shinobi.util.addCallbackEvent(field, option);
        }

        if (option.hasOwnProperty("buttonSearchEvent")) {
            shinobi.util.addButtonSearchEvent(field, option);
        }

        if (option.hasOwnProperty("selectItem")) {
            shinobi.util.addSelectItemEvent(field, option);
        }
    },

    addCallbackEvent: function(field, option) {
        var input = field.querySelector(".input");

        input.addEventListener("input", function() {
            var input = field.querySelector(".input");
            var searchKey = input.value.trim();
            if (searchKey != "") {
                var request = {
                    searchkey: searchKey,
                };

                if (option.showloadingnotification) {
                    shinobi.notification.notification.loading();
                }

                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    if (option.showloadingnotification) {
                        shinobi.notification.notification.loaded();
                    }
                    option.callback(response);
                });
            }
        });
    },

    addSelectItemEvent: function(field, option) {
        var input = field.querySelector(".input");

        input.addEventListener("change", function() {
            var input = field.querySelector(".input");
            var searchKey = input.value.trim();
            if (searchKey != "") {
                var request = {
                    searchkey: searchKey,
                    type: "=",
                };

                if (option.showloadingnotification) {
                    shinobi.notification.notification.loading();
                }

                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    if (option.showloadingnotification) {
                        shinobi.notification.notification.loaded();
                    }

                    option.selectItem(response);
                });
            }
        });
    },

    addButtonSearchEvent: function(field, option) {
        var button = field.querySelector(".button.is-search");

        button.addEventListener("click", function() {
            var input = field.querySelector(".input");
            var searchKey = input.value.trim();
            if (searchKey != "") {
                var request = {
                    searchkey: searchKey,
                    type: "=",
                };

                if (option.showloadingnotification) {
                    shinobi.notification.notification.loading();
                }

                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    if (option.showloadingnotification) {
                        shinobi.notification.notification.loaded();
                    }

                    option.buttonSearchEvent(response);
                });
            }
        });
    },

    hexEncode: function(str) {
        var hex, i;

        var result = "";
        for (i = 0; i < str.length; i++) {
            hex = str.charCodeAt(i).toString(16);
            result += ("000" + hex).slice(-4);
        }

        return result;
    },

    hexDecode: function(str) {
        var j;
        var hexes = str.match(/.{1,4}/g) || [];
        var back = "";
        for (j = 0; j < hexes.length; j++) {
            back += String.fromCharCode(parseInt(hexes[j], 16));
        }

        return back;
    },

    onScreenDisable: function(callback) {
        var preStatus = false;
        var currentStatus = false;
        setInterval(function() {
            preStatus = currentStatus;
            currentStatus = document.hidden;

            if (currentStatus == false && preStatus == true) {
                if (typeof callback == "function") {
                    callback();
                }
            }
        }, 1000);
    },

    sumAllDataAndKeyJson: function(result, json) {
        var entriesResult = Object.entries(result);
        var entriesJson = Object.entries(json);
        entriesJson.forEach(function(entriesJsonItem) {
            if (result.hasOwnProperty(entriesJsonItem[0])) {
                if (!isNaN(result[entriesJsonItem[1]])) {
                    result[entriesJsonItem[0]] += entriesJsonItem[1];
                }
            } else {
                result[entriesJsonItem[0]] = entriesJsonItem[1];
            }
        });
    },
    checkMobile: function() {
        const toMatch = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];

        return toMatch.some((toMatchItem) => {
            return navigator.userAgent.match(toMatchItem);
        });
    },

    countNumberInInput: function(input) {
        if (input.match(/\d/g) == null) {
            return 0;
        } else {
            var numbers = input.match(/\d/g).map(Number);

            return numbers.length;
        }
    },
    countTextCharacterInInput: function(input) {
        if (input.match(/[a-zA-Z]/g) == null) {
            return 0;
        } else {
            var textCharaters = input.match(/[a-zA-Z]/g).map(String);

            return textCharaters.length;
        }
    },

    countSpecialCharacterInInput: function(input) {
        if (input.match(/[^0-9a-zA-Z]/g) == null) {
            return 0;
        } else {
            var specialCharaters = input.match(/[^0-9a-zA-Z]/g).map(String);

            return specialCharaters.length;
        }
    },

    hasSendRequestToAdmin: function(response, callback) {
        if (response == "update success") {
            shinobi.notification.notification.info("Đã tiếp nhận yêu cầu. Vui lòng đợi kiểm duyệt.");
            if (typeof callback == "function") {
                callback();
            }
        }
    },

    getCurrentDate: function(option) {
        var date = new Date();
        return shinobi.util.formatDate(date, option);
    },

    getFormatDate: function(dateInput, option) {
        dateInput = shinobi.util.preProcessDateInput(dateInput);
        var date = new Date(dateInput);
        return shinobi.util.formatDate(date, option);
    },

    preProcessDateInput: function(dateInput) {
        if (typeof dateInput == "string") {
            dateInput = dateInput.replace(/-/g, "/");
        }
        return dateInput;
    },

    addLoopAnimate: function(option) {
        var listElem = document.querySelectorAll("[animate-loop]");
        for (var i = 0; i < listElem.length; i++) {
            shinobi.util.addLoopAnimateProcess(listElem[i], option);
        }
    },

    getRandomInt: function(max) {
        return Math.floor(Math.random() * Math.floor(max));
    },

    addLoopAnimateProcess: function(elem, option) {
        if (!(elem.hasAttribute("stop-animate") && elem.getAttribute("stop-animate") == "true")) {
            var classList = elem.getAttribute("animate-loop").split(" ");
            var className = shinobi.util.randomInList(classList);
            elem.classList.add(className);
            elem.classList.add("animate__animated");
            setTimeout(function() {
                elem.classList.remove(className);
                setTimeout(function() {
                    shinobi.util.addLoopAnimateProcess(elem, option);
                }, 200);
            }, 1000);
        } else {
            setTimeout(function() {
                shinobi.util.addLoopAnimateProcess(elem, option);
            }, 1000);
        }
    },

    addAnimate: function(selector, option) {
        var itemList = document.querySelectorAll(selector);
        for (var i = 0; i < itemList.length; i++) {
            shinobi.util.addAnimateProcess(itemList[i], option);
        }
    },
    addAnimateProcess: function(item, option) {
        var listClassAppend = ["animated", "inifinite"];
        var classItem = option.hasOwnProperty("classItem") ? option["classItem"] : "bounce";
        listClassAppend.push(classItem);
        listClassAppend.forEach(function(itemClass) {
            item.classList.add(itemClass);
        });

        if (option.hasOwnProperty("infinity")) {
            setTimeout(function() {
                listClassAppend.forEach(function(itemClass) {
                    item.classList.remove(itemClass);
                });
                setTimeout(function() {
                    shinobi.util.addAnimateProcess(item, option);
                }, 2000);
            }, 2000);
        }
    },

    reverseFormatDate: function(dateInput, option) {
        var reverseFormat = option["reverseFormat"];
        var dd = dateInput.slice(reverseFormat.indexOf("dd"), reverseFormat.lastIndexOf("dd") + 2);
        var MM = dateInput.slice(reverseFormat.indexOf("MM"), reverseFormat.lastIndexOf("MM") + 2);
        var yyyy = dateInput.slice(reverseFormat.indexOf("yyyy"), reverseFormat.lastIndexOf("yyyy") + 4);
        var dateString = yyyy + "/" + MM + "/" + dd;
        var date = new Date(dateString);
        return shinobi.util.formatDate(date, option);
    },
    formatDate: function(date, options) {
        var dd = shinobi.util.getTwoDigit(date.getDate());
        var MM = shinobi.util.getTwoDigit(date.getMonth() + 1);
        var yyyy = date.getFullYear();
        var hh = shinobi.util.getTwoDigit(date.getHours());
        var mm = shinobi.util.getTwoDigit(date.getMinutes());
        var ss = shinobi.util.getTwoDigit(date.getSeconds());
        var dayOfWeek = shinobi.util.getDayOfWeek(date, options);
        var dayOfWeekShort = shinobi.util.getDayOfWeekShort(date, options);

        var returnValue = options && options.hasOwnProperty("format") ? options["format"] : "yyyy-MM-dd";
        returnValue = returnValue
            .replace("yyyy", yyyy)
            .replace("MM", MM)
            .replace("dd", dd)
            .replace("hh", hh)
            .replace("mm", mm)
            .replace("ss", ss)
            .replace("dayOfWeekShort", dayOfWeekShort).replace("dayOfWeek", dayOfWeek);
        return returnValue;
    },

    getDayOfWeek: function(date, options) {
        var lang = options && options.hasOwnProperty("language") ? options["language"] : "vn";
        var mapping = {
            vn: ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"],
            en: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        };
        var day = date.getDay();
        return mapping[lang][day];
    },
    getDayOfWeekShort: function(date, options) {
        var lang = options && options.hasOwnProperty("language") ? options["language"] : "vn";
        var mapping = {
            vn: ["CN", "Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7"],
            en: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        };
        var day = date.getDay();
        return mapping[lang][day];
    },

    getTagInputMappingElem: function(elem) {
        var returnElem;
        if (typeof shinobi.initbulma.tagsInput == "object") {
            shinobi.initbulma.tagsInput.forEach(function(item) {
                if (item["element"] == elem) {
                    returnElem = item;
                }
            });
        }
        return returnElem;
    },

    addEventEnter: function(elem, callback) {
        elem.addEventListener("keypress", function(e) {
            var key = e.which || e.keyCode;
            if (key === 13) {
                e.preventDefault();
                callback();
            }
        });
        var isMobile = shinobi.util.checkMobile();
        if (isMobile) {
            elem.addEventListener("focusout", function(e) {
                callback();
            });
        }
    },

    jsonToSearchParam: function(json) {
        var search = "";
        for (let key in json) {
            search += `&${key}=${json[key]}`;
        }

        return "?" + search.slice(1, search.length);
    },

    getCalendarMappingElem: function(elem) {
        var returnElem;
        if (typeof shinobi.initbulma.calendars == "object") {
            shinobi.initbulma.calendars.forEach(function(item) {
                if (item["element"] == elem) {
                    returnElem = item;
                }
            });
        }
        return returnElem;
    },

    getDateAfterCurrentDate: function(numberDate, elementAfter) {
        var currentDate = new Date();

        switch (elementAfter) {
            case "day":
                currentDate.setDate(currentDate.getDate() + numberDate);
                break;

            case "month":
                currentDate.setMonth(currentDate.getMonth() + numberDate);
                break;

            case "year":
                currentDate.setFullYear(currentDate.setFullYear() + numberDate);
                break;

            default:
                break;
        }

        var year = currentDate.getFullYear();
        var month = shinobi.util.getTwoDigit(currentDate.getMonth() + 1);
        var day = shinobi.util.getTwoDigit(currentDate.getDate());

        return year + "-" + month + "-" + day;
    },

    getDateAfterDate: function(date, numberDate, elementAfter) {
        date = shinobi.util.preProcessDateInput(date);
        var currentDate = new Date(date);

        switch (elementAfter) {
            case "day":
                currentDate.setDate(currentDate.getDate() + numberDate);
                break;

            case "month":
                currentDate.setMonth(currentDate.getMonth() + numberDate);
                break;

            case "year":
                currentDate.setFullYear(currentDate.setFullYear() + numberDate);
                break;

            default:
                break;
        }

        var year = currentDate.getFullYear();
        var month = shinobi.util.getTwoDigit(currentDate.getMonth() + 1);
        var day = shinobi.util.getTwoDigit(currentDate.getDate());

        return year + "-" + month + "-" + day;
    },

    getSearchKey: function(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    },

    getSearchParam: function(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    },

    renderUserInfo: function(selector) {
        var elem = document.querySelector(selector);
        shinobi.util.renderUserInfoElement(elem);
    },

    renderUserInfoElement: function(elem) {
        shinobi.coreapi.getLoggedUserInfo(function(response) {
            var jsonArr = JSON.parse(response);
            shinobi.mapping.renderElement(elem, jsonArr);
        });
    },

    buildSearchUserField: function(selector, option) {
        var field = document.querySelector(selector);
        shinobi.util.buildSearchUserFieldElement(field, option);
    },

    isEmpty: function(object) {
        return Object.keys(object).length === 0 && object.constructor === Object ? true : false;
    },

    uniqueArray: function(a) {
        return a.sort().filter(function(item, pos, ary) {
            return !pos || item != ary[pos - 1];
        });
    },
    buildUpfileButton: function(selector, option) {
        var element = document.querySelector(selector);
        var uploadUrl = option && option.hasOwnProperty("uploadUrl") ? option.uploadUrl : "uploadfile";
        shinobi.fileupload.registerElement(
            element,
            "change",
            uploadUrl,
            function() {
                return 0;
            },
            function(jsonResponse) {
                if (jsonResponse.result == "success") {
                    shinobi.notification.notification.info("Upload thành công");
                    var url = jsonResponse.content.url;
                    shinobi.render.renderImageFileInput(element, url, {});

                    // var link = document.getElementById('link');
                    // link.innerHTML = url;
                } else {
                    shinobi.notification.notification.error("Có lỗi vui lòng thử lại");
                }
            },
            option
        );
    },

    checkEmptyJson: function(json, callback, option) {
        if (option) {
            var entries = Object.entries(json);
            var listNotEmpty = option.hasOwnProperty("listNotEmpty") ? option.listNotEmpty : Object.keys(json);
            var listEmpty = option.hasOwnProperty("listEmpty") ? option.listEmpty : [];
            var hasEmpty = false;
            for (var i = 0; i < entries.length; i++) {
                var item = entries[i];
                if (!listEmpty.includes(item[0])) {
                    if (listNotEmpty.includes(item[0]) && item[1] == "") {
                        hasEmpty = true;
                    }
                }
            }
            hasEmpty ? shinobi.util.fillInputMessage() : callback();
        } else {
            Object.values(json).includes("") ? shinobi.util.fillInputMessage() : callback();
        }
    },

    getParentElementHasAttribute: function(item, option) {
        var parentNode = item.parentNode;
        var isFound = false;
        var returnElement = null;
        var type = option["type"];
        var value = option["value"];
        switch (type) {
            case "class":
                if (parentNode.classList.contains(value)) {
                    isFound = true;
                    returnElement = parentNode;
                }
                break;
            case "id":
                if (parentNode.id == value) {
                    isFound = true;
                    returnElement = parentNode;
                }
                break;
            case "tagName":
                if (parentNode.tagName == value) {
                    isFound = true;
                    returnElement = parentNode;
                }

            default:
                break;
        }

        if (parentNode.tagName == "BODY") {
            return returnElement;
        } else {
            return isFound ? returnElement : shinobi.util.getParentElementHasAttribute(parentNode, option);
        }
    },

    buildSearchUserFieldElement: function(field, option) {
        var input = field.querySelector(".input");
        var button = field.querySelector(".button");
        button.onclick = function() {
            var searchKey = input.value.trim();
            if (searchKey == "") {
                input.classList.add("is-danger");
                shinobi.util.fillInputMessage();
            } else {
                input.classList.remove("is-danger");
                var request = {
                    searchkey: searchKey,
                };
                shinobi.notification.notification.loading();
                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    shinobi.notification.notification.loaded();
                    if (option.hasOwnProperty("callback")) {
                        option.callback(response);
                    }
                });
            }
        };
    },

    buildAutoSuggestProvince: function(selector, submitFunction) {
        var inputElem = document.querySelector(selector);

        if (inputElem.hasAttribute("build-autocomplete")) {
            inputElem.nextElementSibling.remove();

            var newInput = document.createElement("input");
            newInput.setAttribute("id", inputElem.id);
            newInput.setAttribute("class", "input");
            inputElem.parentNode.replaceChild(newInput, inputElem);
            inputElem = newInput;
        }

        inputElem.classList.add("select-symbol-input");
        inputElem.classList.add("autocomplete-input");
        inputElem.setAttribute("placeholder", "Tỉnh/Thành phố");
        inputElem.setAttribute("build-autocomplete", "true");
        var parentNode = inputElem.parentNode;
        parentNode.classList.add("autocomplete");

        var ul = document.createElement("ul");
        ul.setAttribute("class", "autocomplete-result-list ");
        shinobi.util.insertAfterElem(ul, inputElem);

        shinobi.cacheapi.request(shinobi.coreapi.locationApi + "getAllVietNamProvince", "{}", function(response) {
            var jsonData = JSON.parse(response);

            var data = [];

            jsonData.forEach(function(json) {
                data.push(json["provincename"]);
            });

            var selectSymbolObject = new Autocomplete(parentNode, {
                search: function(input) {
                    var result = [];
                    if (input.length > 0) {
                        result = data.filter(function(item) {
                            return item.toUpperCase().includes(input.toUpperCase());
                        });
                    }

                    return result;
                },
                onSubmit: function(value) {
                    shinobi.a = selectSymbolObject;
                    if (typeof submitFunction == "function") {
                        submitFunction(value, selectSymbolObject);
                    }
                },
                autoSelect: true,
            });

            return selectSymbolObject;
        });
    },

    convertTextToElement: function(text) {
        var div = document.createElement("div");
        div.innerHTML = text;
        var content = div.firstElementChild;
        return content;
    },
    buildAutoSuggestBankName: function(selector, submitFunction) {
        var inputElem = document.querySelector(selector);

        if (inputElem.hasAttribute("build-autocomplete")) {
            inputElem.nextElementSibling.remove();

            var newInput = document.createElement("input");
            newInput.setAttribute("id", inputElem.id);
            newInput.setAttribute("class", "input");
            inputElem.parentNode.replaceChild(newInput, inputElem);
            inputElem = newInput;
        }

        inputElem.classList.add("autocomplete-input");
        inputElem.setAttribute("placeholder", "Ngân hàng");
        inputElem.setAttribute("build-autocomplete", "true");
        var parentNode = inputElem.parentNode;
        parentNode.classList.add("autocomplete");

        var ul = document.createElement("ul");
        ul.setAttribute("class", "autocomplete-result-list ");
        shinobi.util.insertAfterElem(ul, inputElem);

        shinobi.cacheapi.request(shinobi.coreapi.locationApi + "getAllBankName", "{}", function(response) {
            var jsonData = JSON.parse(response);

            var data = [];

            jsonData.forEach(function(json) {
                data.push(json["bankfullname"]);
            });

            var selectSymbolObject = new Autocomplete(parentNode, {
                search: function(input) {
                    var result = [];
                    if (input.length > 0) {
                        result = data.filter(function(item) {
                            return item.toUpperCase().includes(input.toUpperCase());
                        });
                    }

                    return result;
                },
                onSubmit: function(value) {
                    shinobi.a = selectSymbolObject;
                    if (typeof submitFunction == "function") {
                        submitFunction(value, selectSymbolObject);
                    }
                },
                autoSelect: true,
            });

            return selectSymbolObject;
        });
    },

    addClass: function(locationId, className) {
        var location = document.getElementById(locationId);
        location.classList.add(className);
    },
    removeClass: function(locationId, className) {
        var location = document.getElementById(locationId);
        location.classList.remove(className);
    },

    removeClassOfList: function(listId, className) {
        listId.forEach(function(itemId) {
            shinobi.aladinUtil.removeClass(itemId, className);
        });
    },

    getAllSearchInPath: function() {
        const params = {};
        document.location.search
            .substr(1)
            .split("&")
            .forEach((pair) => {
                [key, value] = pair.split("=");
                params[key] = value;
            });
        return params;
    },

    swapKeyAndValueJson: function(json) {
        var ret = {};
        for (var key in json) {
            ret[json[key]] = key;
        }
        return ret;
    },

    addClassOfList: function(listId, className) {
        listId.forEach(function(itemId) {
            shinobi.aladinUtil.addClass(itemId, className);
        });
    },

    addClassOfListClass: function(classNameOfListClass, className) {
        var listElem = document.getElementsByClassName(classNameOfListClass);

        for (var i = 0; i < listElem.length; i++) {
            var item = listElem[i];

            item.classList.add(className);
        }
    },
    removeClassOfListClass: function(classNameOfListClass, className) {
        var listElem = document.getElementsByClassName(classNameOfListClass);

        for (var i = 0; i < listElem.length; i++) {
            var item = listElem[i];

            item.classList.remove(className);
        }
    },
    removeAllClass: function(locationId, classNameLocation, className) {
        var location = document.getElementById(locationId);
        var listClassLocation = location.getElementsByClassName(classNameLocation);

        var length = listClassLocation.length;
        for (var i = 0; i < length; i++) {
            listClassLocation[i].classList.remove(className);
        }
    },

    decodeValue: function(input) {
        var txt = document.createElement("textarea");
        txt.innerHTML = input;
        return txt.value;
    },

    loadListAds: function(option) {
        var request = option["request"];
        shinobi.cacheapi.request("/api/UserRankingOverviewApi/getListAds", JSON.stringify(request), function(response) {
            var array = JSON.parse(response);
            if (array) {
                option.callback(array);
            }
        });
    },

    convertCSVToArray: function(strData, strDelimiter) {
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        strDelimiter = strDelimiter || ",";

        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp(
            // Delimiters.
            "(\\" +
            strDelimiter +
            "|\\r?\\n|\\r|^)" +
            // Quoted fields.
            '(?:"([^"]*(?:""[^"]*)*)"|' +
            // Standard fields.
            '([^"\\' +
            strDelimiter +
            "\\r\\n]*))",
            "gi"
        );

        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [
            []
        ];

        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;

        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while ((arrMatches = objPattern.exec(strData))) {
            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[1];

            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {
                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push([]);
            }

            var strMatchedValue;

            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            if (arrMatches[2]) {
                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[2].replace(new RegExp('""', "g"), '"');
            } else {
                // We found a non-quoted value.
                strMatchedValue = arrMatches[3];
            }

            // Now that we have our value string, let's add
            // it to the data array.
            arrData[arrData.length - 1].push(strMatchedValue);
        }

        // Return the parsed data.
        return arrData;
    },

    insertAfterElem: function(newElem, elem) {
        elem.parentNode.insertBefore(newElem, elem.nextSibling);
    },

    createNumberCleaveInput: function(selector, options) {
        var formatCharacter = shinobi.util.getFormatCharacters();
        var numberFormatCharacter = formatCharacter.numberFormatCharacter;
        var decimalFormatCharacter = formatCharacter.decimalFormatCharacter;
        var optionsCleave = Object.assign({
                numeral: true,
                numeralDecimalMark: decimalFormatCharacter,
                delimiter: numberFormatCharacter,
            },
            options
        );
        return new Cleave(selector, optionsCleave);
    },
    getValueNumberCleaveFormat: function(elem) {
        return shinobi.render.removeFormatNumber(elem.value.trim());
    },

    getRecordNumber: function(paginationContainerId) {
        var containerId;
        var paginationContainer;
        if (paginationContainerId) {
            var container = document.getElementById(paginationContainerId);
            paginationContainer = container.nextElementSibling.classList.contains("table-pagination") ?
                container.nextElementSibling :
                container.nextElementSibling.getElementsByClassName("table-pagination")[0];
        } else {
            containerId = "table-pagination";
            paginationContainer = document.getElementById(containerId);
        }
        var parentNodePaginationContainer = paginationContainer.parentElement;
        var recordNum;
        var recodeNumAttr = "record-num";
        if (parentNodePaginationContainer.hasAttribute(recodeNumAttr)) {
            recordNum = parentNodePaginationContainer.getAttribute(recodeNumAttr);
        } else {
            var recordNumSelect = paginationContainer.getElementsByClassName("shinobi-recordperpage")[0];
            recordNum = recordNumSelect.value;
        }
        shinobi.util.customRecordPerPagePagination(paginationContainer, recordNum);
        return recordNum;
    },
    customRecordPerPagePagination: function(container, recordNum) {
        var selectRecordNum = container.getElementsByClassName("shinobi-recordperpage")[0];
        var listOptionSelect = selectRecordNum.getElementsByTagName("option");
        for (var i = 0; i < listOptionSelect.length; i++) {
            var j = parseInt(i) + 1;
            var currentPageNum = j * recordNum;
            listOptionSelect[i].innerHTML = currentPageNum;
            listOptionSelect[i].value = currentPageNum;
        }
    },

    updateSuccess: function(callback) {
        shinobi.notification.notification.info("Cập nhật thành công");
        if (typeof callback == "function") {
            callback();
        }
    },

    fillInputMessage: function(callback) {
        shinobi.notification.notification.error("Vui lòng nhập đầy đủ thông tin");
        if (typeof callback == "function") {
            callback();
        }
    },

    checkValueEmpty: function(json, callback) {
        var values = Object.values(json);
        if (!values.includes("")) {
            if (typeof callback == "function") {
                callback();
            }
        } else {
            shinobi.util.fillInputMessage();
        }
    },

    getLoggedUser: function() {
        shinobi.util.checkAuthen();
    },
    checkAuthen: function(callback) {
        var request = {};
        shinobi.cacheapi.request(shinobi.coreapi.userApi + "checkAuthen", JSON.stringify(request), function(response) {
            var data = JSON.parse(response);

            if (typeof callback == "function") {
                data ? callback(data["username"]) : callback(false);
            }
        });
    },

    requestAuthen: function(callback) {
        shinobi.coreapi.checkAuthen(function(username) {
            if (typeof callback == "function") {
                username ? callback(username) : shinobi.notification.notification.error("Vui lòng đăng nhập để thao tác");
            }
        });
    },
    reCheckAuthen: function(callback) {
        var key = shinobi.coreapi.userApi + "checkAuthen";
        if (typeof shinobi.cacheapi.cache == "object") {
            shinobi.cacheapi.clearKey(key);
        }
        shinobi.util.checkAuthen(callback);
    },
    getSessionId: function(callback) {
        var request = {};
        shinobi.api.request(shinobi.coreapi.systemUserApi + "getSessionId", JSON.stringify(request), function(response) {
            if (typeof callback == "function") {
                var data = JSON.parse(response);
                if (data.hasOwnProperty("sessionid")) {
                    data["sessionid"] != -1 ? callback(data["sessionid"]) : callback(false);
                } else {
                    callback(false);
                }
            }
        });
    },
    getUserInfo: function(callback, option) {
        var userInfoRequest;
        if (!option) {
            shinobi.util.checkAuthen(function(username) {
                userInfoRequest = {
                    username: username,
                };
                shinobi.cacheapi.request(
                    shinobi.coreapi.userApi + "getAllUserInfo",
                    JSON.stringify(userInfoRequest),
                    function(response) {
                        if (typeof callback == "function") {
                            callback(response);
                        }
                    }
                );
            });
        } else {
            if (option.hasOwnProperty("username")) {
                userInfoRequest = {
                    username: option.username,
                };
                shinobi.cacheapi.request(
                    shinobi.coreapi.loggedUserApi + "getUserInfo",
                    JSON.stringify(userInfoRequest),
                    function(response) {
                        if (typeof callback == "function") {
                            callback(response);
                        }
                    }
                );
            }
        }
    },
    getLoggedUserInfo: function(callback) {
        shinobi.util.checkAuthen(function(username) {
            var userInfoRequest = {
                username: username,
            };
            shinobi.cacheapi.request(
                shinobi.coreapi.loggedUserApi + "getAllUserInfo",
                JSON.stringify(userInfoRequest),
                function(response) {
                    if (typeof callback == "function") {
                        callback(response);
                    }
                }
            );
        });
    },

    checkUpdateSuccess: function(response, callback, option) {
        if (["insert success", "update success"].includes(response)) {
            if (!(option && !option["showNotification"])) {
                var showContent =
                    option && option.hasOwnProperty("showContent") ? option["showContent"] : "Cập nhật thành công";
                shinobi.notification.notification.info(showContent);
            }

            if (typeof callback == "function") {
                callback();
            }
        }
    },

    getFormatCharacters: function() {
        var numberFormatCharacter = ",";
        var decimalFormatCharacter = ".";

        if (typeof shinobi.utilconfig == "object") {
            if (shinobi.utilconfig.hasOwnProperty("numberFormatCharacter")) {
                if (shinobi.utilconfig.numberFormatCharacter.hasOwnProperty("numberCharacter")) {
                    numberFormatCharacter = shinobi.utilconfig.numberFormatCharacter.numberCharacter;
                }
                if (shinobi.utilconfig.numberFormatCharacter.hasOwnProperty("numberCharacter")) {
                    decimalFormatCharacter = shinobi.utilconfig.numberFormatCharacter.decimalCharacter;
                }
            }
        }

        return {
            numberFormatCharacter: numberFormatCharacter,
            decimalFormatCharacter: decimalFormatCharacter,
        };
    },

    getAllStorage: function() {
        var entries = Object.entries(window.localStorage);
        var result = {};
        entries.forEach(function(item) {
            result[item[0]] = item[1];
        });
        return result;
    },

    setAllStorage: function(json) {
        var entries = Object.entries(json);
        entries.forEach(function(item) {
            window.localStorage.setItem(item[0], item[1]);
        });
    },
    formatNumber: function(value) {
        var formatCharacter = shinobi.util.getFormatCharacters();
        var numberFormatCharacter = formatCharacter.numberFormatCharacter;
        var decimalFormatCharacter = formatCharacter.decimalFormatCharacter;
        return Number(value).format(0, 3, numberFormatCharacter, decimalFormatCharacter);
    },

    getContentIframe: function(selector) {
        shinobi.util.getContentIframeElement(document.querySelector(selector));
    },

    getContentIframeElement: function(iframe) {
        var content = iframe.contentDocument || iframe.contentWindow.document;
        return content;
    },
    getTwoDigit: function(number) {
        return (number < 10 ? "0" : "") + number;
    },

    getInternationalTelephoneCode: function(intlTelInput) {
        var data = intlTelInput.getSelectedCountryData();
        return data["dialCode"];
    },
    getInternationalTelephoneCountry: function(intlTelInput) {
        var data = intlTelInput.getSelectedCountryData();
        return data["iso2"];
    },
    setRangeCalendar: function(selector, start, end) {
        var calendar = shinobi.util.getCalendarMappingElem(document.querySelector(selector));
        calendar.datePicker.start = start;
        calendar.datePicker.end = end;
        calendar.save();
    },
    addEventJumpToId: function() {
        var jumpId = shinobi.util.getSearch("jumpid");
        if (jumpId) {
            var elem = document.getElementById(jumpId);
            var newOffset = elem.offsetTop - Number(shinobi.util.getFontSize()) * 4;
            var offset = newOffset > 0 ? newOffset : 0;
            document.body.scrollTop = offset;
            document.documentElement.scrollTop = offset;
        }
    },

    randomInList: function(list) {
        return list[Math.floor(Math.random() * list.length)];
    },

    jumpTo: function(selector) {
        var elem = document.querySelector(selector);
        shinobi.util.jumpToElement(elem);
    },

    jumpToElement: function(elem) {
        if (elem) {
            var newOffset = elem.offsetTop - Number(shinobi.util.getFontSize()) * 4;
            var offset = newOffset > 0 ? newOffset : 0;
            document.body.scrollTop = offset;
            document.documentElement.scrollTop = offset;
        }
    },
    getStorage: function(key, option) {
        var storage = window.localStorage.getItem(key);
        var nullValue = "";
        return storage ? storage : nullValue;
    },
    setStorage: function(key, value, option) {
        window.localStorage.setItem(key, value);
    },

    getLoggedName: function(callback) {
        shinobi.util.getUserInfo(function(response) {
            var data = JSON.parse(response);
            var loggedName = "";
            if (data) {
                if (data.hasOwnProperty("firstname") && data.hasOwnProperty("lastname")) {
                    loggedName = data["firstname"] + " " + data["lastname"];
                }

                if (typeof callback == "function") {
                    callback(loggedName);
                }
            }
        });
    },

    getSearch: function(searchKey) {
        var search = window.location.search;
        var split = search.split("?");
        var value = null;
        var searchPatern = searchKey + "=";
        split.forEach(function(searchItem) {
            value = searchItem.includes(searchPatern) ? searchItem.replace(searchPatern, "") : value;
        });
        return value;
    },

    getFontSize: function(elem) {
        return shinobi.util.getComputedProperty(elem, "font-size").replace("px", "");
    },

    getComputedProperty: function(elem, property) {
        return elem ?
            window.getComputedStyle(elem, null).getPropertyValue(property) :
            window.getComputedStyle(document.body, null).getPropertyValue(property);
    },

    getValueInput: function(elem) {
        var type = elem.getAttribute("type");
        var value;
        switch (type) {
            case "checkbox":
                value = elem.checked;
                break;
            case "text":
            case "password":
            default:
                value = elem.value.trim();
                break;
        }

        value = elem.hasAttribute("snb-preprocess") ? eval(elem.getAttribute("snb-preprocess"))(value) : value;
        return value;
    },
    sha256: function(ascii) {
        var mathPow = Math.pow;
        var maxWord = mathPow(2, 32);
        var lengthProperty = "length";
        var i, j; // Used as a counter across the whole file
        var result = "";

        var words = [];
        var asciiBitLength = ascii[lengthProperty] * 8;

        var hash = (shinobi.util.sha256.h = shinobi.util.sha256.h || []);

        var k = (shinobi.util.sha256.k = shinobi.util.sha256.k || []);
        var primeCounter = k[lengthProperty];

        var isComposite = {};
        for (var candidate = 2; primeCounter < 64; candidate++) {
            if (!isComposite[candidate]) {
                for (i = 0; i < 313; i += candidate) {
                    isComposite[i] = candidate;
                }
                hash[primeCounter] = (mathPow(candidate, 0.5) * maxWord) | 0;
                k[primeCounter++] = (mathPow(candidate, 1 / 3) * maxWord) | 0;
            }
        }

        ascii += "\x80"; // Append Ƈ' bit (plus zero padding)
        while ((ascii[lengthProperty] % 64) - 56) ascii += "\x00"; // More zero
        // padding
        for (i = 0; i < ascii[lengthProperty]; i++) {
            j = ascii.charCodeAt(i);
            if (j >> 8) return; // ASCII check: only accept characters in
            // range 0-255
            words[i >> 2] |= j << (((3 - i) % 4) * 8);
        }
        words[words[lengthProperty]] = (asciiBitLength / maxWord) | 0;
        words[words[lengthProperty]] = asciiBitLength;

        // process each chunk
        for (j = 0; j < words[lengthProperty];) {
            var w = words.slice(j, (j += 16)); // The message is expanded
            // into 64 words as part of
            // the iteration
            var oldHash = hash;
            // This is now the undefinedworking hash", often labelled as
            // variables a...g
            // (we have to truncate as well, otherwise extra entries at the
            // end accumulate
            hash = hash.slice(0, 8);

            for (i = 0; i < 64; i++) {
                var i2 = i + j;
                // Expand the message into 64 words
                // Used below if
                var w15 = w[i - 15],
                    w2 = w[i - 2];

                // Iterate
                var a = hash[0],
                    e = hash[4];
                var temp1 =
                    hash[7] +
                    (shinobi.util.rightRotate(e, 6) ^ shinobi.util.rightRotate(e, 11) ^ shinobi.util.rightRotate(e, 25)) + // S1
                    ((e & hash[5]) ^ (~e & hash[6])) + // ch
                    k[i] +
                    // Expand the message schedule if needed
                    (w[i] =
                        i < 16 ?
                        w[i] :
                        (w[i - 16] +
                            (shinobi.util.rightRotate(w15, 7) ^ shinobi.util.rightRotate(w15, 18) ^ (w15 >>> 3)) + // s0
                            w[i - 7] +
                            (shinobi.util.rightRotate(w2, 17) ^ shinobi.util.rightRotate(w2, 19) ^ (w2 >>> 10))) | // s1
                        0);
                // This is only used once, so *could* be moved below, but it
                // only saves 4 bytes and makes things unreadble
                var temp2 =
                    (shinobi.util.rightRotate(a, 2) ^ shinobi.util.rightRotate(a, 13) ^ shinobi.util.rightRotate(a, 22)) + // S0
                    ((a & hash[1]) ^ (a & hash[2]) ^ (hash[1] & hash[2])); // maj

                hash = [(temp1 + temp2) | 0].concat(hash); // We don't

                hash[4] = (hash[4] + temp1) | 0;
            }

            for (i = 0; i < 8; i++) {
                hash[i] = (hash[i] + oldHash[i]) | 0;
            }
        }

        for (i = 0; i < 8; i++) {
            for (j = 3; j + 1; j--) {
                var b = (hash[i] >> (j * 8)) & 255;
                result += (b < 16 ? 0 : "") + b.toString(16);
            }
        }
        return result;
    },
    rightRotate: function(value, amount) {
        return (value >>> amount) | (value << (32 - amount));
    },
    removeUnicode: function(str) {
        return shinobi.util.remove_unicode(str);
    },

    listAudio: {},

    playAudio: function(url) {
        var snd = shinobi.util.listAudio.hasOwnProperty(url) ? shinobi.util.listAudio[url] : new Audio(url);
        snd.play();
        shinobi.util.listAudio[url] = snd;
    },

    remove_unicode: function remove_unicode(str) {
        str = str.toLowerCase();
        str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
        str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
        str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
        str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
        str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
        str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
        str = str.replace(/đ/g, "d");
        str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'| |\"|\&|\#|\[|\]|~|$|_/g, "-");

        str = str.replace(/-+-/g, "-");
        str = str.replace(/^\-+|\-+$/g, "");

        return str;
    },

    changeActiveElement: function(generalId, differentEleList, activeClass, eleActiveId) {
        for (var i = 0; i < differentEleList.length; i++) {
            var eleId = generalId + differentEleList[i];
            if (eleId == eleActiveId) {
                document.getElementById(eleId).classList.add(activeClass);
            } else {
                document.getElementById(eleId).classList.remove(activeClass);
            }
        }
    },
    modalEventListener: function(modal) {
        var closeButtonList = modal.getElementsByClassName("delete");
        var closeButton = closeButtonList[0];
        if (closeButton) {
            closeButton.onclick = function() {
                modal.classList.toggle("is-active");
            };
        }

        var cancelModalButtonList = modal.getElementsByClassName("cancel-modal-button");
        if (cancelModalButtonList) {
            for (var i = 0; i < cancelModalButtonList.length; i++) {
                cancelModalButtonList[i].onclick = function() {
                    modal.classList.toggle("is-active");
                };
            }
        }

        var modalBackground = modal.getElementsByClassName("modal-background");

        for (var j = 0; j < modalBackground.length; j++) {
            modalBackground[j].onclick = function() {
                modal.classList.toggle("is-active");
            };
        }

        window.addEventListener(
            "keydown",
            function(event) {
                if (event.key == "Escape") {
                    modal.classList.remove("is-active");
                }
            },
            true
        );

        var footer = modal.getElementsByTagName("footer")[0];

        if (footer) {
            var buttonFooterList = footer.getElementsByTagName("button");

            for (var j in buttonFooterList) {
                buttonFooterList[j].onclick = function() {
                    modal.classList.toggle("is-active");
                };
            }
        }

        if (modal.hasAttribute("control-button-list")) {
            var controlButtonList = modal.getAttribute("control-button-list").split("|");

            for (var k = 0; k < controlButtonList.length; k++) {
                var item = document.getElementById(controlButtonList[k]);

                item.onclick = function() {
                    modal.classList.add("is-active");

                    if (item.hasAttribute("snb-render")) {
                        var value = item.getAttribute("snb-key");

                        var render = item.getAttribute("snb-render");

                        eval(render)(item, value);
                    }
                };
            }
        }
    },

    createFireWork: function(option) {
        // Options
        var options = {
            /* Which hue should be used for the first batch of rockets? */
            startingHue: 120,
            /*
             * How many ticks the script should wait before a new firework gets
             * spawned, if the user is holding down his mouse button.
             */
            clickLimiter: 5,
            /* How fast the rockets should automatically spawn, based on ticks */
            // timerInterval: 40,
            timerInterval: 20,
            /* Show pulsing circles marking the targets? */
            // showTargets: true,
            showTargets: false,
            /* Rocket movement options, should be self-explanatory */
            rocketSpeed: 4,
            rocketAcceleration: 1.03,
            /* Particle movement options, should be self-explanatory */
            particleFriction: 0.95,
            particleGravity: 1,
            /* Minimum and maximum amount of particle spawns per rocket */
            particleMinCount: 25,
            particleMaxCount: 40,
            /* Minimum and maximum radius of a particle */
            particleMinRadius: 3,
            particleMaxRadius: 5,
        };

        // Local variables
        var fireworks = [];
        var particles = [];
        var mouse = { down: false, x: 0, y: 0 };
        var currentHue = options.startingHue;
        var clickLimiterTick = 0;
        var timerTick = 0;
        var cntRocketsLaunched = 0;

        // Helper function for canvas animations
        window.requestAnimFrame = (function() {
            return (
                window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                function(cb) {
                    window.setTimeout(callback, 1000 / 60);
                }
            );
        })();

        // Helper function to return random numbers within a specified range
        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Helper function to calculate the distance between 2 points
        function calculateDistance(p1x, p1y, p2x, p2y) {
            var xDistance = p1x - p2x;
            var yDistance = p1y - p2y;
            return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
        }

        // Setup some basic variables
        // var canvas = document.getElementById('canvas');
        var canvas = document.createElement("canvas");
        var canvasContainer = option && option.hasOwnProperty("container") ? option["container"] : document.body;
        canvasContainer.appendChild(canvas);
        var canvasCtx = canvas.getContext("2d");
        var canvasWidth = window.innerWidth;
        var canvasHeight = window.innerHeight;

        // Resize canvas
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;

        // Firework class
        function Firework(sx, sy, tx, ty) {
            // Set coordinates (x/y = actual, sx/sy = starting, tx/ty = target)
            this.x = this.sx = sx;
            this.y = this.sy = sy;
            this.tx = tx;
            this.ty = ty;

            // Calculate distance between starting and target point
            this.distanceToTarget = calculateDistance(sx, sy, tx, ty);
            this.distanceTraveled = 0;

            // To simulate a trail effect, the last few coordinates will be
            // stored
            this.coordinates = [];
            this.coordinateCount = 3;

            // Populate coordinate array with initial data
            while (this.coordinateCount--) {
                this.coordinates.push([this.x, this.y]);
            }

            // Some settings, you can adjust them if you'd like to do so.
            this.angle = Math.atan2(ty - sy, tx - sx);
            this.speed = options.rocketSpeed;
            this.acceleration = options.rocketAcceleration;
            this.brightness = random(50, 80);
            this.hue = currentHue;
            this.targetRadius = 1;
            this.targetDirection = false; // false = Radius is getting bigger,
            // true = Radius is getting smaller

            // Increase the rockets launched counter
            cntRocketsLaunched++;
        }

        // This method should be called each frame to update the firework
        Firework.prototype.update = function(index) {
            // Update the coordinates array
            this.coordinates.pop();
            this.coordinates.unshift([this.x, this.y]);

            // Cycle the target radius (used for the pulsing target circle)
            if (!this.targetDirection) {
                if (this.targetRadius < 8) this.targetRadius += 0.15;
                else this.targetDirection = true;
            } else {
                if (this.targetRadius > 1) this.targetRadius -= 0.15;
                else this.targetDirection = false;
            }

            // Speed up the firework (could possibly travel faster than the
            // speed of light)
            this.speed *= this.acceleration;

            // Calculate the distance the firework has travelled so far (based
            // on velocities)
            var vx = Math.cos(this.angle) * this.speed;
            var vy = Math.sin(this.angle) * this.speed;
            this.distanceTraveled = calculateDistance(this.sx, this.sy, this.x + vx, this.y + vy);

            // If the distance traveled (including velocities) is greater than
            // the initial distance
            // to the target, then the target has been reached. If that's not
            // the case, keep traveling.
            if (this.distanceTraveled >= this.distanceToTarget) {
                createParticles(this.tx, this.ty);
                fireworks.splice(index, 1);
            } else {
                this.x += vx;
                this.y += vy;
            }
        };

        // Draws the firework
        Firework.prototype.draw = function() {
            var lastCoordinate = this.coordinates[this.coordinates.length - 1];

            // Draw the rocket
            canvasCtx.beginPath();
            canvasCtx.moveTo(lastCoordinate[0], lastCoordinate[1]);
            canvasCtx.lineTo(this.x, this.y);
            canvasCtx.strokeStyle = "hsl(" + this.hue + ",100%," + this.brightness + "%)";
            canvasCtx.stroke();

            // Draw the target (pulsing circle)
            if (options.showTargets) {
                canvasCtx.beginPath();
                canvasCtx.arc(this.tx, this.ty, this.targetRadius, 0, Math.PI * 2);
                canvasCtx.stroke();
            }
        };

        // Particle class
        function Particle(x, y) {
            // Set the starting point
            this.x = x;
            this.y = y;

            // To simulate a trail effect, the last few coordinates will be
            // stored
            this.coordinates = [];
            this.coordinateCount = 5;

            // Populate coordinate array with initial data
            while (this.coordinateCount--) {
                this.coordinates.push([this.x, this.y]);
            }

            // Set a random angle in all possible directions (radians)
            this.angle = random(0, Math.PI * 2);
            this.speed = random(1, 10);

            // Add some friction and gravity to the particle
            this.friction = options.particleFriction;
            this.gravity = options.particleGravity;

            // Change the hue to a random number
            this.hue = random(currentHue - 20, currentHue + 20);
            this.brightness = random(50, 80);
            this.alpha = 1;

            // Set how fast the particles decay
            this.decay = random(0.01, 0.03);
        }

        // Updates the particle, should be called each frame
        Particle.prototype.update = function(index) {
            // Update the coordinates array
            this.coordinates.pop();
            this.coordinates.unshift([this.x, this.y]);

            // Slow it down (based on friction)
            this.speed *= this.friction;

            // Apply velocity to the particle
            this.x += Math.cos(this.angle) * this.speed;
            this.y += Math.sin(this.angle) * this.speed + this.gravity;

            // Fade out the particle, and remove it if alpha is low enough
            this.alpha -= this.decay;
            if (this.alpha <= this.decay) {
                particles.splice(index, 1);
            }
        };

        // Draws the particle
        Particle.prototype.draw = function() {
            var lastCoordinate = this.coordinates[this.coordinates.length - 1];
            var radius = Math.round(random(options.particleMinRadius, options.particleMaxRadius));

            // Create a new shiny gradient
            var gradient = canvasCtx.createRadialGradient(this.x, this.y, 0, this.x, this.y, radius);
            gradient.addColorStop(0.0, "white");
            gradient.addColorStop(0.1, "white");
            gradient.addColorStop(0.1, "hsla(" + this.hue + ",100%," + this.brightness + "%," + this.alpha + ")");
            gradient.addColorStop(1.0, "black");

            // Draw the gradient
            canvasCtx.beginPath();
            canvasCtx.fillStyle = gradient;
            canvasCtx.arc(this.x, this.y, radius, Math.PI * 2, false);
            canvasCtx.fill();
        };

        // Create a bunch of particles at the given position
        function createParticles(x, y) {
            var particleCount = Math.round(random(options.particleMinCount, options.particleMaxCount));
            while (particleCount--) {
                particles.push(new Particle(x, y));
            }
        }

        // Add an event listener to the window so we're able to react to size
        // changes
        window.addEventListener("resize", function(e) {
            canvas.width = canvasWidth = window.innerWidth;
            canvas.height = canvasHeight = window.innerHeight;
        });

        // Add event listeners to the canvas to handle mouse interactions
        canvas.addEventListener("mousemove", function(e) {
            e.preventDefault();
            mouse.x = e.pageX - canvas.offsetLeft;
            mouse.y = e.pageY - canvas.offsetTop;
        });

        canvas.addEventListener("mousedown", function(e) {
            e.preventDefault();
            mouse.down = true;
        });

        canvas.addEventListener("mouseup", function(e) {
            e.preventDefault();
            mouse.down = false;
        });

        // Main application / script, called when the window is loaded
        function gameLoop() {
            // This function will rund endlessly by using requestAnimationFrame
            // (or fallback to setInterval)
            requestAnimFrame(gameLoop);

            // Increase the hue to get different colored fireworks over time
            currentHue += 0.5;

            // 'Clear' the canvas at a specific opacity, by using
            // 'destination-out'. This will create a trailing effect.
            canvasCtx.globalCompositeOperation = "destination-out";
            canvasCtx.fillStyle = "rgba(0, 0, 0, 0.5)";
            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);
            canvasCtx.globalCompositeOperation = "lighter";

            // Loop over all existing fireworks (they should be updated & drawn)
            var i = fireworks.length;
            while (i--) {
                fireworks[i].draw();
                fireworks[i].update(i);
            }

            // Loop over all existing particles (they should be updated & drawn)
            var i = particles.length;
            while (i--) {
                particles[i].draw();
                particles[i].update(i);
            }

            // Draw some text
            // canvasCtx.fillStyle = 'white';
            // canvasCtx.font = '14px Arial';
            // canvasCtx.fillText('Rockets launched: ' + cntRocketsLaunched, 10,
            // 24);

            // Launch fireworks automatically to random coordinates, if the user
            // does not interact with the scene
            if (timerTick >= options.timerInterval) {
                if (!mouse.down) {
                    fireworks.push(
                        new Firework(canvasWidth / 2, canvasHeight, random(0, canvasWidth), random(0, canvasHeight / 2))
                    );
                    timerTick = 0;
                }
            } else {
                timerTick++;
            }

            // Limit the rate at which fireworks can be spawned by mouse
            if (clickLimiterTick >= options.clickLimiter) {
                if (mouse.down) {
                    fireworks.push(new Firework(canvasWidth / 2, canvasHeight, mouse.x, mouse.y));
                    clickLimiterTick = 0;
                }
            } else {
                clickLimiterTick++;
            }
        }
        canvas.setAttribute("style", "position: fixed;top: 0;left: 0;");
        if (option && option.hasOwnProperty("onClick")) {
            if (typeof option.onClick == "function") {
                canvas.onclick = function() {
                    option.onClick();
                };
            }
        } else {
            if (option && option.hasOwnProperty("href")) {
                canvas.classList.add("has-cursor-pointer");
                canvas.onclick = function() {
                    window.location.href = option.href;
                };
            }
        }

        window.onload = gameLoop();
        return canvas;
    },

    createCoinFall: function(option) {
        var container = option.container;

        // var exists = document.getElementsByClassName('coinContainer')[0];
        // if (exists) {
        // exists.parentNode.removeChild(exists);
        // return false;
        // }

        var element = document.createElement("div");
        element.setAttribute("style", "position: fixed;");
        container.appendChild(element);
        var canvas = document.createElement("canvas"),
            ctx = canvas.getContext("2d"),
            focused = false;

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        canvas.id = "gimmick";

        var coin = new Image();
        coin.src = option.hasOwnProperty("imageSrc") ? option.imageSrc : "http://i.imgur.com/5ZW2MT3.png";
        // 440 wide, 40 high, 10 states
        coin.onload = function() {
            element.appendChild(canvas);
            focused = true;
            drawloop();
        };
        var coins = [];

        function drawloop() {
            if (focused) {
                requestAnimationFrame(drawloop);
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (Math.random() < 0.3) {
                coins.push({
                    x: (Math.random() * canvas.width) | 0,
                    y: -50,
                    dy: 3,
                    s: 0.5 + Math.random(),
                    state: (Math.random() * 10) | 0,
                });
            }
            var i = coins.length;
            while (i--) {
                var x = coins[i].x;
                var y = coins[i].y;
                var s = coins[i].s;
                var state = coins[i].state;
                coins[i].state = state > 9 ? 0 : state + 0.1;
                coins[i].dy += 0.3;
                coins[i].y += coins[i].dy;

                ctx.drawImage(coin, 44 * Math.floor(state), 0, 44, 40, x, y, 44 * s, 40 * s);

                if (y > canvas.height) {
                    coins.splice(i, 1);
                }
            }
        }

        return element;
    },
    renderListPost: function(id, typepost = "news") {
        var dataList = null;
        if (id) {
            var parentID = id;
            var url = shinobi.coreapi.blogOverviewApi + "findDataList";
            var request = {
                recordPerPage: shinobi.util.getRecordNumber(parentID),
            };

            // shinobi.newspagerender.dataList = new
            // shinobi.datalist(parentID);
            // shinobi.newspagerender.dataList.staticfilters = [{ "colname":
            // "posttype", "operator": "like", "value": typepost }];
            // shinobi.newspagerender.dataList.staticsorts = [{ "colname":
            // "id", "value": "desc" }];
            // shinobi.newspagerender.dataList.initLoadApi(url, request);
            dataList = new shinobi.datalist(parentID);
            dataList.staticfilters = [{ colname: "posttype", operator: "like", value: typepost }];
            dataList.staticsorts = [{ colname: "id", value: "desc" }];
            dataList.initLoadApi(url, request);
        }
        return dataList;
    },
};shinobi.xhradapter = {
	'getResource' : function(url, callback) {
		this.accessResource("GET", url, callback);
	},
	'accessResource' : function(method, url, callback) {
		var xhttp = new XMLHttpRequest();
		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				callback(xhttp.responseText);
			}
		};
		xhttp.open(method, url, true);
		xhttp.send();
	},
	'login' : function(username, password, callback) {
		var xhttp = new XMLHttpRequest();

		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				callback(xhttp.responseText);
			}
		};

		xhttp.open("POST", "/login", true);
		xhttp.setRequestHeader('username', username);
		xhttp.setRequestHeader('password', password);
		xhttp.send();
	}
};
shinobi.seoMarkUpBuilder = {
	'baseURL': '/page/blogpost/',
	'JSON': [{
		'baseurl': '/page/blogpost/',
		'pagename': 'Bài viết',
		'markuprender': 'shinobi.articleMarkUp.build'
	}],

	'getJSON': function () {
		var request = {};
		request.baseurl = baseURL;

		shinobi.api.request('/api/Api/getJSON', JSON.stringify(request),
			function (response) {
				var jsonArr = JSON.parse(response);
				shinobi.seoMarkUpBuilder.JSON = jsonArr;
			});
	},

	'render': function () {
		// shinobi.seoMarkUpBuilder.getJSON();

		var jsonArr = shinobi.seoMarkUpBuilder.JSON;

		var pathName = window.location.pathname;

		for (var i = 0; i < jsonArr.length; i++) {
			var item = jsonArr[i];

			if (pathName.includes(item.baseurl)) {
				if (!item.markuprender || item.markuprender == ''
					|| item.markuprender == null) {

					shinobi.seoMarkUpBuilder.defaultRender();
				} else {

					eval(item.markuprender)();
				}

			}
		}

	},

	'defaultRender': function () {

	},

	'build': function () {

		shinobi.seoMarkUpBuilder.render();
	}

};
shinobi.api = {
    request: function(url, param, callback, options) {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                var data = JSON.parse(xhttp.responseText);
                if (!options ||
                    (options && !options.hasOwnProperty("responseHandleFunction"))
                ) {
                    if (data.result === "success") {
                        callback(data.content);
                    } else if (data.result === "notify") {
                        shinobi.notification.notification.info(data.content);
                    } else {
                        var showCotent =
                            data.hasOwnProperty("content") && data["content"].trim() != "" ?
                            data["content"] :
                            data["errorcode"];

                        ["content", "errorcode"].forEach(function(attribute) {
                            if (
                                data[attribute].trim() != "" &&
                                !data[attribute].startsWith("ERROR_") &&
                                !data[attribute].startsWith("PAGECODE_")
                            ) {
                                showCotent = data[attribute];
                            }
                        });

                        shinobi.notification.notification.error(showCotent);
                    }
                } else {
                    if (typeof options.responseHandleFunction == "function") {
                        options.responseHandleFunction({
                            data: data,
                            url: url,
                            request: param,
                            callback: callback,
                            options: options,
                        });
                    }
                }
            } else {
                if (this.readyState == 4) {
                    if (options && options.errorCallback) {
                        options.errorCallback(this.status);
                    } else {
                        console.log('response api code', this.status, url);
                    }
                }

            }
        };
        xhttp.open("POST", url, true);
        xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xhttp.send(param);
    },
};shinobi.areasplinechart = (function() {
	/*
	 * categories : [ 'Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas' ]
	 */
	/*
	 * [ { name : 'John', data : [ 5, 3, 4, 7, 2 ] }, { name : 'Jane', data : [
	 * 2, 2, 3, 2, 1 ] }, { name : 'Joe', data : [ 3, 4, 4, 2, 5 ] } ]
	 */
	// private static variable
	// constructor
	var constructor = function(chartId, options) {
		this.data = [];
		this.title = '';
		this.name = '';
		this.categories = [];
		this.options = (options) ? options : null;
		this.createAreaSplineChart = function(chartId, categories, data) {
			this.containerId = chartId;
			this.categories = categories;
			this.data = data;
			this.renderChart();
		}
		this.setData = function(data) {
			this.data = data;
		}
		this.setName = function(name) {
			this.name = name;
		}
		this.renderChart = function() {
			Highcharts.chart(this.containerId, {
				chart : {
					type : 'areaspline',
					height : (this.options == null) ? 400 : (this.options.height == null)
							? 400
							: this.options.height,
				},
				title : {
					text : ''
				},
				xAxis : {
					categories : this.categories
				},
				yAxis : {
					title : false
				},
				exporting : {
					enabled : false
				},
				credits : {
					enabled : false
				},
				series : this.data
			});
		}
		// public static method
		constructor.staticmethod = {
			'hello' : function() {
			}
		}
	}
	return constructor;
})();
shinobi.areastacksplinechart = (function() {

	/*
	 * categories : [ 'Apples', 'Oranges', 'Pears', 'Grapes', 'Bananas' ]
	 */

	/*
	 * [ { name : 'John', data : [ 5, 3, 4, 7, 2 ] }, { name : 'Jane', data : [
	 * 2, 2, 3, 2, 1 ] }, { name : 'Joe', data : [ 3, 4, 4, 2, 5 ] } ]
	 */

	// private static variable
	// constructor
	var constructor = function(chartId) {

		this.data = [];

		this.title = '';

		this.name = '';

		this.categories = [];

		this.createAreaStackSplineChart = function(chartId, categories, data) {

			this.containerId = chartId;

			this.categories = categories;

			this.data = data;

			this.renderChart();

		}

		this.setData = function(data) {

			this.data = data;
		}

		this.setName = function(name) {

			this.name = name;
		}
		this.renderChart = function() {

			Highcharts.chart(this.containerId, {
				chart : {
					type : 'areaspline'
				},
				title : {
					text : ''
				},
				xAxis : {
					categories : this.categories
				},
				yAxis : {
					title : false
				},
				exporting : {
					enabled : false
				},
				tooltip : {
					split : true,
				},
				credits : {
					enabled : false
				},
				plotOptions : {
					areaspline : {
						stacking : 'normal'
					}
				},
				series : this.data
			});

		}

		// public static method
		constructor.staticmethod = {
			'hello' : function() {

			}
		}
	}

	return constructor;
})();
shinobi.articleMarkUp = {
	'title' : 'Aladin | Nền tảng kết nối cộng đồng nhà đầu tư chứng khoán chuyên nghiệp',
	'gaid' : "UA-119675169-1",
	'headLine' : '',
	'postURL' : '',
	'image' : 'image.aladin.finance/aladin.finance.public.image/783d7f463d1a8269ab447d3593641cae/HVN.png',
	'datePublished' : new Date(),
	'dateModified' : new Date(),
	'authorName' : '',
	'authorImageURL' : '',
	'publisherName' : 'Aladin | aladin.finance',
	'publisherLogoURL' : 'https://image.aladin.finance/aladin.finance.public.image/c73f7e23e7ccb4d33744cd03cfc8a18f/Aladin-Logo-test.png',
	'description' : '',

	'buildArticleMarkupScript' : function() {
		var content = '';

		content += '<script type="application/ld+json">{';
		content += '"@context": "https://schema.org", "@type": "NewsArticle",';
		content += '"mainEntityOfPage": {"@type": "WebPage", "@id": "'
				+ shinobi.articleMarkUp.postURL + '"},';
		content += '"headline": "' + shinobi.articleMarkUp.title + '",';
		content += '"image": ["' + shinobi.articleMarkUp.image + '"],';
		content += '"datePublished": "' + shinobi.articleMarkUp.datePublished
				+ '",';
		content += '"dateModified": "' + shinobi.articleMarkUp.dateModified
				+ '",';
		content += '"author": {"@type": "Person", "name": "'
				+ shinobi.articleMarkUp.authorName + '",';
		content += '"image": {"@type": "ImageObject", "url": "'
				+ shinobi.articleMarkUp.authorImageURL + '"}},';
		content += '"publisher": {"@type": "Organization", "name": "'
				+ shinobi.articleMarkUp.publisherName + '",';
		content += '"logo": {"@type": "ImageObject", "url": "'
				+ shinobi.articleMarkUp.publisherLogoURL + '"}},';
		content += '"description": "' + shinobi.articleMarkUp.description
				+ '"}';
		content += '</script>';

		return content;
	},

	'addGA' : function() {
		ga("create", shinobi.articleMarkUp.gaid, "auto");
		ga("send", "pageview");
	},

	'buildArticleMarkUp' : function() {

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var postUrl = pathNameSplit[pathNameSplit.length - 1];

		var request = {};

		request.posturl = blogPostPageUrl + postUrl;

		// shinobi.api.request('/api/BlogOverviewApi/getTraderPostDetail', JSON

		shinobi.api.request('/api/BlogOverviewApi/getPreViewContent', JSON
				.stringify(request), function(response) {

			var jsonArr = JSON.parse(response);

			shinobi.articleMarkUp.getAuthorInfo(jsonArr.createduser,
					function() {
						shinobi.articleMarkUp.setNewParam(jsonArr);

						shinobi.articleMarkUp.applyToHead();

						shinobi.articleMarkUp.addGA();
					});
		});
	},

	'getAuthorInfo' : function(userName, callback) {
		var request = {};
		request.username = userName;
		shinobi.api.request('/api/UserApi/getAllUserInfo', JSON
				.stringify(request), function(response) {

			var jsonArr = JSON.parse(response);

			shinobi.articleMarkUp.authorImageURL = jsonArr.avatarlink;
			shinobi.articleMarkUp.authorName = jsonArr.firstname + " "
					+ jsonArr.lastname;

			callback();
		});
	},

	'setNewParam' : function(data) {

		if (data.posttitle.includes('"')) {
			shinobi.articleMarkUp.title = data.posttitle.replace(/"/g, '\\"');
		} else {
			shinobi.articleMarkUp.title = data.posttitle;
		}

		shinobi.articleMarkUp.dateModified = data.lastmodifieddate;
		shinobi.articleMarkUp.datePublished = data.createddate;
		shinobi.articleMarkUp.image = data.thumpnailurl;
		shinobi.articleMarkUp.postURL = 'https://www.aladin.finance'
				+ data.posturl;

	},

	'applyToHead' : function() {
		var headContent = document.head.innerHTML;

		headContent = headContent
				+ shinobi.articleMarkUp.buildArticleMarkupScript();
		document.head.innerHTML = headContent;

	},

	'build' : function() {

		shinobi.articleMarkUp.buildArticleMarkUp();
	}

}
shinobi.autocomplete = (function () {
  var constructor = function (selector, options) {
    this.autoCompleteObject = "";
    this.input = "";
    this.selector = selector;
    this.onUpdate = function (results, selectedIndex) {
      console.log(`${results.length} results`);
      if (selectedIndex > -1) {
        console.log(`Selected: ${results[selectedIndex]}`);
      }
    };
    this.getResultValue = function (result) {
      // return result.name
    };
    this.autoSelect = true;
    // this.containerSelector = selector.replace('#', "").replace('.', "") + "autoComplete";
    this.containerSelector =
      "shinobiAutoComplete" + shinobi.util.sha256(selector);
    this.options = options;
    this.onSearch = function (input, resolve) {
      return [];
    };
    this.renderResult = function (result, props) {
      return `<li ${props}> ${JSON.stringify(result)}</li>`;
    };
    this.onSubmit = function (result, object) {
      object.autoCompleteObject.input.value = JSON.stringify(result);
    };
    this.loadOptions = function () {
      var object = this;
      if (options.hasOwnProperty("onSearch")) {
        object.onSearch = options.onSearch;
      }
      if (options.hasOwnProperty("renderResult")) {
        object.renderResult = options.renderResult;
      }
      if (options.hasOwnProperty("onSubmit")) {
        object.onSubmit = options.onSubmit;
      }
      if (options.hasOwnProperty("onUpdate")) {
        object.onUpdate = options.onUpdate;
      }
      if (options.hasOwnProperty("autoSelect")) {
        object.autoSelect = options.autoSelect;
      }
    };

    this.createObject = function () {
      var object = this;
      object.autoCompleteObject = new Autocomplete(
        "#" + object.containerSelector,
        {
          search: (input) => {
            if (input.trim() != "" || (options.hasOwnProperty('emptySearch') && options['emptySearch'])) {
              return new Promise((resolve) => {
                object.onSearch(input.trim(), resolve);
                // var request = {};
                // request.searchkey = input.trim();
                // shinobi.api.request(shinobi.coreapi.loggedUserApi + 'searchUser', JSON.stringify(request), function (re) {
                //     var arrJson = JSON.parse(re);
                //     var data = arrJson;
                //     resolve(data);
                // });
              });
            } else {
              return [];
            }
          },
          renderResult: function (result, props) {
            return object.renderResult(result, props);
          },
          onSubmit: function (result) {
            object.onSubmit(result, object);
          },
          autoSelect: object.autoSelect,
          onUpdate: function (results, selectedIndex) {
            object.onUpdate(results, selectedIndex, object);
          },
        }
      );
    };

    this.createStructure = function (callback) {
      var object = this;
      object.input = document.querySelector(this.selector);
      if (!object.input.parentElement.classList.contains("autocomplete")) {
        var container = document.createElement("div");
        container.setAttribute("class", "autocomplete");
        container.setAttribute("id", this.containerSelector);
        container.innerHTML = `<ul class="autocomplete-result-list"></ul>`;
        object.input.classList.add("autocomplete-input");
        object.input.setAttribute("autocomplete", "nope");
        object.input.setAttribute("autocorrect", "off");
        // object.input.setAttribute("name", object.containerSelector);
        object.input.value = "";
        object.input.parentElement.replaceChild(container, object.input);
        container.insertBefore(object.input, container.firstElementChild);
        container.appendChild(object.input);

        var formContainer = document.createElement("form");
        formContainer.setAttribute("autocomplete", "off");
        formContainer.setAttribute("onSubmit", "return false;");
        container.parentElement.replaceChild(formContainer, container);
        formContainer.appendChild(container);
      }
      callback();
    };
    this.loadAll = function () {
      var object = this;
      this.loadOptions();
      this.createStructure(function () {
        object.createObject();
      });
    };

    this.loadAll();
  };

  // public static method
  constructor.staticmethod = {
    hello: function () { },
  };

  return constructor;
})();
shinobi.cacheapi = {
	cache : {},
	request : function(url, param, callback, option) {
		var cacheKey = url + '_' + JSON.stringify(param);
		if (shinobi.cacheapi.cache.hasOwnProperty(cacheKey)) {
			var currentCacheData = shinobi.cacheapi.cache[cacheKey];
			(currentCacheData == false) ? setTimeout(function() {
				shinobi.cacheapi.request(url, param, callback)
			}, 10) : callback(shinobi.cacheapi.cache[cacheKey]);

		} else {
			shinobi.cacheapi.cache[cacheKey] = false;
			shinobi.api.request(url, param, function(response) {
				shinobi.cacheapi.cache[cacheKey] = response;

				if (option && option.hasOwnProperty('cacheExpired')) {
					setTimeout(function() {
						delete shinobi.cacheapi.cache[cacheKey];
					}, option['cacheExpired'])
				}
				callback(response);
			});
		}
	},
	clearKey : function(url, param, option) {
		var tempSymbol = '_';
		var cacheKey = url + tempSymbol;
		if (param) {
			cacheKey += JSON.stringify(param);
			if (shinobi.cacheapi.cache.hasOwnProperty(cacheKey)) {
				delete shinobi.cacheapi.cache[cacheKey];
			}
		} else {
			var listKeyRef = Object.keys(shinobi.cacheapi.cache).filter(
					function(item) {
						return item.includes(url + tempSymbol);
					});

			listKeyRef.forEach(function(key) {
				delete shinobi.cacheapi.cache[key];

			})
		}

	},
	clear : function() {
		shinobi.cacheapi.cache = {};
	},

};shinobi.chartadapter = {

	'convertDataPieChart': function (data) {

		var returnData = [];

		var dataObject = data[0];

		var xNameArr = dataObject.xname;
		var value = dataObject.value;

		var dataLength = value.length;

		for (var i = 0; i < dataLength; i++) {

			var chartObject = {};

			chartObject.name = xNameArr[i];
			chartObject.y = parseInt(value[i]);

			returnData.push(chartObject);
		}

		return returnData;

	},

	'convertDataStockChart': function (data) {

		// series: [ {
		// name : 'Temperature',
		// data : [ [ 1317888000000, 372.5101 ], [ 1317888060000, 372.4 ],
		// [ 1317888120000, 372.16 ], [ 1317888180000, 371.62 ],
		// [ 1317888240000, 371.75 ], [ 1317888300000, 372 ] ],
		//
		// tooltip : {
		// valueDecimals : 1,
		// valueSuffix : '°C'
		// }
		// } ]

		var returnData = [];

		var dataObject = data.chartdata[0];

		var xname = dataObject.xname;
		var value = dataObject.value;

		var length = xname.length;

		for (var i = 0; i < length; i++) {

			var tempArray = [];

			tempArray.push(Number(xname[i]));
			tempArray.push(Number(value[i]));

			returnData.push(tempArray);

		}

		return returnData;

	},

	'convertDataSimpleChart': function (data) {

		var dataObject = data.chartdata[0];

		var dataChart = [];

		var valueList = dataObject.value;
		var xNameList = dataObject.xname;

		// var minValue = Math.min(...valueList);
		// var rootValue = Math.trunc(minValue*0.99);

		var tradeDemoCapitalValue = valueList[0];
		// var rootValue = Math.trunc(tradeDemoCapitalValue * 0.99);
		var rootValue = tradeDemoCapitalValue;

		var length = valueList.length;

		for (var i = 0; i < length; i++) {

			// var tempObject = [];

			var currentValue = Number(valueList[i]) - rootValue;

			// tempObject.push(Number(xNameList[i]));

			// tempObject.push(currentValue);

			// dataChart.push(tempObject);
			dataChart.push(currentValue);
		}

		return dataChart;

	},

	'convertDataColumnChart': function (data) {

		var returnObject = {};

		var dataObject = data.chartdata;

		returnObject.categories = [];

		returnObject.data = [];

		var dataLength = dataObject.length;

		if (dataLength == 0) {

			return returnObject;
		}

		var feeNameList = dataObject[0].yname;

		var feeNameListLength = feeNameList.length;

		for (var i = 0; i < feeNameListLength; i++) {

			var tempObject = {};

			tempObject.name = feeNameList[i];

			tempObject.data = [];

			for (var j = 0; j < dataLength; j++) {

				returnObject.categories.push(dataObject[j].xname[0]);

				tempObject.data.push(Number(dataObject[j].value[i]));

			}

			// reverse data in object
			tempObject.data = tempObject.data.reverse();

			returnObject.data.push(tempObject);
		}

		// reverse category in object
		returnObject.categories = returnObject.categories.reverse();

		return returnObject;

	},

	'convertOneObjectDataColumnChart': function (data) {

		var returnObject = {};
		returnObject.data = [];

		var chartDataArray = data.chartdata;

		for (var h = 0; h < chartDataArray.length; h++) {

			var dataObject = data.chartdata[h];

			var dateMilisecond = dataObject.xname;
			var dateArray = [];

			for (var j = 0; j < dateMilisecond.length; j++) {

				var currentDateValue = new Date(Number(dateMilisecond[j]));

				var formatDate = shinobi.util.getFormatDate(
					currentDateValue, {
					format: 'dd-MM-yyyy hh:mm'
				});

				dateArray.push(formatDate);
			}

			returnObject.categories = dateArray;

			var valueList = dataObject.value;

			var valueListLength = valueList.length;

			var tempObject = {};

			tempObject.name = dataObject.yname[0];

			tempObject.data = [];

			for (var i = 0; i < valueListLength; i++) {

				tempObject.data.push(Number(valueList[i]));

			}

			returnObject.data.push(tempObject);
		}

		return returnObject;

	},

};if (typeof CKEDITOR == "object") {

	CKEDITOR.editorConfig = function(config) {
		config.language = 'vi';
		config.height = 300;
		config.toolbarCanCollapse = true;
		config.allowedContent = true;
		config.bodyClass = 'content column';
		config.contentsCss = 'https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css';
	};
};if (typeof CKEDITOR == "object") {
	CKEDITOR.editorConfig = function(config) {
		config.language = 'vi';
		config.height = 300;
		config.toolbarCanCollapse = true;
		config.allowedContent = true;
		config.bodyClass = 'document-editor content has-padding-1-rem';
		config.contentsCss = '/static/production/shinobi_2.css';
	}
};shinobi.coreapi = {
    logo: '<span class="title is-2">CFV</span>',
    lotteryResultApi: "/api/LotteryResultApi/",
    lotteryStatisticApi: "/api/LotteryStatisticApi/",
    userApi: "/api/UserApi/",
    menuNotiApi: "/authenapi/MenuNotiApi/",
    productApi: "/api/ProductApi/",
    getSessionIdApi: "/authenapi/userapi/",

    getLoggedUser: function () {
        shinobi.coreapi.checkAuthen();
    },
    checkAuthen: function (callback) {
        var request = {};
        shinobi.cacheapi.request(shinobi.coreapi.userApi + "checkAuthen", JSON.stringify(request), function (response) {
            var data = JSON.parse(response);

            if (typeof callback == "function") {
                data ? callback(data["username"]) : callback(false);
            }
        });
    },
    checkNotCacheAuthen: function (callback) {
        var request = {};
        shinobi.api.request(shinobi.coreapi.userApi + "checkAuthen", JSON.stringify(request), function (response) {
            var data = JSON.parse(response);

            if (typeof callback == "function") {
                data ? callback(data["username"]) : callback(false);
            }
        });
    },

    requestAuthen: function (callback) {
        shinobi.coreapi.checkAuthen(function (username) {
            if (typeof callback == "function") {
                username ? callback(username) : shinobi.notification.notification.error("Vui lòng đăng nhập để thao tác");
            }
        });
    },
    reCheckAuthen: function (callback) {
        var key = shinobi.coreapi.userApi + "checkAuthen";
        if (typeof shinobi.cacheapi.cache == "object") {
            shinobi.cacheapi.clearKey(key);
        }
        shinobi.coreapi.checkAuthen(callback);
    },
    getSessionId: function (callback) {
        var request = {};
        shinobi.api.request(shinobi.coreapi.systemUserApi + "getSessionId", JSON.stringify(request), function (response) {
            if (typeof callback == "function") {
                var data = JSON.parse(response);
                if (data.hasOwnProperty("sessionid")) {
                    data["sessionid"] != -1 ? callback(data["sessionid"]) : callback(false);
                } else {
                    callback(false);
                }
            }
        });
    },
    getUserInfo: function (callback) {
        shinobi.coreapi.checkAuthen(function (username) {
            var userInfoRequest = {
                username: username,
            };
            shinobi.cacheapi.request(
                shinobi.coreapi.userApi + "getAllUserInfo",
                JSON.stringify(userInfoRequest),
                function (response) {
                    if (typeof callback == "function") {
                        callback(response);
                    }
                }
            );
        });
    },
    getLoggedUserInfo: function (callback) {
        shinobi.coreapi.checkAuthen(function (username) {
            var userInfoRequest = {
                username: username,
            };
            shinobi.cacheapi.request(
                shinobi.coreapi.loggedUserApi + "getAllUserInfo",
                JSON.stringify(userInfoRequest),
                function (response) {
                    if (typeof callback == "function") {
                        callback(response);
                    }
                }
            );
        });
    },
};shinobi.datalist = (function() {

    // private static variable
    var paginationClass = ".table-pagination";

    var prevPaginationClass = ".shinobi-pagination-prev";
    var curPagePaginationClass = ".shinobi-pagination-curpage";
    var nextPaginationClass = ".shinobi-pagination-next";
    var pageTotalClass = ".shinobi-page-total";
    var recordPerPageClass = ".shinobi-recordperpage";
    var detailIdKey = "snb-detailid";
    var colnameAttribute = "snb-colname";
    var colcontrolAttribute = "snb-header-control";
    var sortAttribute = "snb-sort";

    var sortDescIcon = "<i class='fas fa-sort-down'></i>";
    var sortAscIcon = "<i class='fas fa-sort-up'></i>";
    var sortIcon = "<i class='fas fa-sort'></i>";

    // constructor
    var constructor = function(tableid) {

        this.loadingContainer = '';

        this.url = "";

        this.colNames = [];

        this.filters = [];

        this.staticfilters = [];

        this.sorts = [];

        this.paramsList = '';

        this.staticsorts = [];

        this.renders = [];

        this.tableRows = [];

        this.pageNum = 1;

        this.recordPerPage = 10;

        this.pageTotal = 10;

        this.rowTotal = 10;

        this.tableNode = document.getElementById(tableid);

        this.tableContainerNode = this.tableNode.parentNode;

        this.sampleNode = this.tableNode.querySelector("[snb-datalist-parent=" + this.tableNode
            .getAttribute("snb-datalist-node") +
            "]");

        this.pageNumNode = this.tableContainerNode
            .querySelector(curPagePaginationClass);

        this.recordPerPageNode = this.tableContainerNode
            .querySelector(recordPerPageClass);

        this.getColnames = function() {
            var table = document.getElementById(tableid);

            var colNames = table.querySelectorAll("[" + colnameAttribute + "]");

            var headerColnames = [];
            for (var i = 0; i < colNames.length; i++) {
                var colElem = colNames[i];
                headerColnames[i] = colElem.getAttribute(colnameAttribute);
            }

            return headerColnames;
        };

        this.registerSorts = function() {
            var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute +
                "]");

            for (var i = 0; i < sortElems.length; i++) {
                var sortElem = sortElems[i];

                this.registerSort(sortElem);
            }
        };

        this.registerPagination = function() {

            var parentNode = this.tableNode.parentNode;

            this.paginationContainer = parentNode
                .querySelector(paginationClass);
        };

        this.updatePagination = function(data) {

            shinobi.mapping.renderElement(this.paginationContainer, JSON
                .parse(data));

            if (JSON.parse(data).pageNum) {

                var currentPage = this.paginationContainer
                    .querySelectorAll(curPagePaginationClass)[0];
                if (JSON.parse(data).pageTotal == 0) {

                    currentPage.value = 0;

                } else {

                    currentPage.value = JSON.parse(data).pageNum;

                }
            }

        };

        this.registerSort = function(sortElem) {

            var table = this;

            sortElem.addEventListener("click", function() {
                var currentSortValue = this.getAttribute(sortAttribute);

                var colName = this.parentNode.getAttribute(colnameAttribute);

                if ("" === currentSortValue) {
                    this.setAttribute(sortAttribute, "asc");
                    this.innerHTML = sortAscIcon;
                    this.classList.add("is-visible");
                } else if ("asc" === currentSortValue) {
                    this.setAttribute(sortAttribute, "desc");
                    this.innerHTML = sortDescIcon;
                    this.classList.add("is-visible");
                } else {
                    this.setAttribute(sortAttribute, "");
                    this.innerHTML = sortIcon;
                    this.classList.remove("is-visible");
                }

                table.reloadApi(table.pageNum);

            });

        };

        this.getSorts = function() {
            this.sorts = [];

            this.sorts = this.sorts.concat(this.staticsorts);

            var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute +
                "]");

            for (var i = 0; i < sortElems.length; i++) {
                var sortElem = sortElems[i];

                var colName = sortElem.parentNode
                    .getAttribute(colnameAttribute);
                var currentSortValue = sortElem.getAttribute(sortAttribute);

                if ("" !== currentSortValue) {
                    var sort = {};
                    sort.colname = colName;
                    sort.value = currentSortValue;

                    this.sorts.push(sort);
                }

            }

        };

        this.registerHeaders = function() {
            var tableElem = document.getElementById(tableid);
            var headers = tableElem.querySelectorAll("[" + colcontrolAttribute +
                "]");

            for (var i = 0; i < headers.length; i++) {
                var header = headers[i];

                this.registerHeader(header);
            }
        };

        this.registerHeader = function(header) {
            var title = header.innerHTML;

            var table = this;

            header.addEventListener("dblclick", function() {

                var childNode = this.childNodes[0];

                if (childNode.nodeType == 3) {

                    if (this.querySelector("input") !== null) {
                        // this.innerHTML = title;
                        table.removeFilterControls(this);

                        table.resetPageNum();

                        table.reloadApi(table.pageNum);

                        return;
                    }

                    var select = document.createElement("select");
                    table.addFilterToElement(select, this);

                    var input = document.createElement("input");
                    input.setAttribute("type", "text");
                    input.setAttribute("value", "");
                    input.style.width = this.offsetWidth + "px";

                    // this.removeChild(this.childNodes[0]);
                    this.appendChild(document.createElement("br"));
                    this.appendChild(select);
                    this.appendChild(input);
                }
            });

            header.addEventListener("keyup", function(event) {
                if (event.keyCode === 13) {
                    var currentvalue = this.querySelector("input").value;

                    if (currentvalue == "") {
                        // this.innerHTML = title;
                        table.removeFilterControls(this);
                    }

                    table.resetPageNum();

                    table.reloadApi(table.pageNum);

                }
            });

        };

        this.removeFilterControls = function(elem) {
            var br = elem.querySelector("br");
            var select = elem.querySelector("select");
            var input = elem.querySelector("input");

            elem.removeChild(br);
            elem.removeChild(select);
            elem.removeChild(input);
        };

        this.resetPageNum = function() {
            this.pageNum = 1;
            this.pageNumNode.value = 1;
        };

        this.addFilterToElement = function(select, node) {

            var datatype = node.getAttribute("snb-datatype");

            var textArr = [];
            var valueArr = [];

            if (datatype === "number") {
                textArr = ["=", ">", ">=", "<", "<="];
                valueArr = ["equal", ">", ">=", "<", "<="];
            } else {
                textArr = ["=", "like"];
                valueArr = ["equal", "like"];
            }

            for (var i = 0; i < textArr.length; i++) {
                var option = document.createElement("option");
                option.text = textArr[i];
                option.value = valueArr[i];
                select.appendChild(option);
            }

        };

        this.registerRecordPerPage = function() {
            var table = this;

            this.recordPerPageNode.addEventListener("change", function() {
                table.resetPageNum();
                table.reloadApi(table.pageNum);
            });
        };

        this.registerPrevPagination = function() {

            var parentNode = this.tableNode.parentNode;

            var prevPagination = parentNode.querySelector(prevPaginationClass);

            var table = this;

            prevPagination.addEventListener("click", function() {
                var currentPageNode = parentNode
                    .querySelector(curPagePaginationClass);
                var currentPage = currentPageNode.value;

                if (currentPage > 1) {
                    var pageNum = currentPage - 1;

                    currentPageNode.value = pageNum;

                    table.reloadApi(pageNum);
                }

            });

        };

        this.registerNextPagination = function() {
            var parentNode = this.tableNode.parentNode;

            var nextPagination = parentNode.querySelector(nextPaginationClass);

            var table = this;

            nextPagination.addEventListener("click", function() {
                var currentPageNode = parentNode
                    .querySelector(curPagePaginationClass);
                var currentPage = Number(currentPageNode.value);

                if (currentPage < table.pageTotal) {
                    var pageNum = currentPage + 1;
                    currentPageNode.value = pageNum;

                    table.reloadApi(pageNum);
                }
            });
        };

        this.registerCurrentPageEvent = function() {
            var parentNode = this.tableNode.parentNode;

            var currentPageNode = parentNode
                .querySelector(curPagePaginationClass);

            var table = this;
            currentPageNode.addEventListener("keyup", function(event) {
                if (event.keyCode === 13) {
                    var curPageNum = Number(currentPageNode.value);

                    if (curPageNum > 0 && curPageNum <= table.pageTotal) {
                        table.reloadApi(curPageNum);
                    }
                }
            });

        };

        this.registerPagination();

        this.registerPrevPagination();
        this.registerNextPagination();
        this.registerCurrentPageEvent();
        this.registerRecordPerPage();

        this.viewDetailPanelId = "";

        // public instance method
        this.renderTable = function(list, callback, options) {


            var table = this;
            var containerNodeValue = this.tableNode
                .getAttribute("snb-datalist-node");


            // if (childNode) {
            // 	table.sampleNode = childNode;
            // }

            table.clear();

            var childNode = this.tableNode
                .querySelector("[snb-datalist-parent=" + containerNodeValue +
                    "]");

            if (childNode) {
                table.tableNode.removeChild(childNode);
            }
            childNode = table.sampleNode;
            var currentlength = 0;
            if (options && options.hasOwnProperty('lazyload') && options.lazyload == true) {
                var lazyloadSplitDataLength = (options.hasOwnProperty('lazyloadSplitDataLength')) ? options.lazyloadSplitDataLength : 20;
                var lazySplitDataInterval = (options.hasOwnProperty('lazySplitDataInterval')) ? options.lazySplitDataInterval : 20;

                table.insertListInterval = setInterval(function() {
                    var listData;
                    if (list.length < lazyloadSplitDataLength) {
                        listData = list;
                        list = [];
                    } else {
                        listData = list.splice(0, lazyloadSplitDataLength);
                    }
                    currentlength += listData.length;
                    table.renderTableListData(listData, childNode, options);

                    if (list.length == 0) {
                        clearInterval(table.insertListInterval);
                    }

                }, lazySplitDataInterval);

            } else {

                table.renderTableListData(list, childNode);
            }

            if (list.length == 0) {
                table.tableNode.innerHTML = '<i>Chưa có dữ liệu</i>';
            }

            // this.updatePageTotal();

            if (typeof callback === 'function') {
                callback();
            }

        };

        this.renderTableListData = function(list, childNode, options) {
            for (var i = 0; i < list.length; i++) {
                var clonedNode = childNode.cloneNode(true);
                var json = list[i];
                clonedNode.setAttribute("rowid", i);
                shinobi.mapping.renderElement(clonedNode, json);
                if (options && options.hasOwnProperty('insertType')) {
                    if (options['insertType'] == 'start') {
                        this.tableNode.insertBefore(clonedNode, this.tableNode.firstElementChild);
                    } else {
                        this.tableNode.appendChild(clonedNode);
                    }
                } else {
                    this.tableNode.appendChild(clonedNode);
                }
            }
        };

        this.initLoadApi = function(url, request, callback) {
            if (this.tableNode.tagName == 'TBODY') {
                this.loadingContainer = this.tableContainerNode;
            } else {
                this.loadingContainer = this.tableNode;
            }
            this.loadingContainer.classList.add('snb-datalist-item-container');
            var table = this;
            request.pageNum = 1;

            this.filters = this.filters.concat(this.staticfilters);
            this.sorts = this.sorts.concat(this.staticsorts);

            request.filters = this.filters;
            request.sorts = this.sorts;

            if (this.paramsList != '') {

                request.paramsList = this.paramsList;
            }

            table.loading();

            shinobi.api.request(url, JSON.stringify(request), function(data) {
                var content = JSON.parse(data);

                var tableContent = content.data;

                table.url = url;
                table.rowTotal = content.rowTotal;
                table.pageNum = content.pageNum;
                table.recordPerPage = content.recordPerPage;
                table.pageTotal = content.pageTotal;
                table.tableRows = tableContent;

                table.loaded();

                table.renderTable(tableContent, callback);

                table.updatePagination(data);
            });
        };

        this.reloadApi = function(pageNum, callback) {

            var table = this;

            this.getTableFilters();
            this.getSorts();
            this.recordPerPage = this.recordPerPageNode.value;

            var request = {};
            request.recordPerPage = this.recordPerPage;
            request.pageNum = (pageNum) ? pageNum : this.pageNum;
            request.filters = this.filters;
            request.sorts = this.sorts;

            if (this.paramsList != '') {

                request.paramsList = this.paramsList;
            }
            // add loading animation when call api
            // table.clear();
            table.loading();
            shinobi.api.request(this.url, JSON.stringify(request), function(
                data) {
                var content = JSON.parse(data);
                var tableContent = content.data;
                table.rowTotal = content.rowTotal;
                table.pageNum = content.pageNum;
                table.recordPerPage = content.recordPerPage;
                table.pageTotal = content.pageTotal;
                table.tableRows = tableContent;

                if (table.pageNum <= table.pageTotal ||
                    (table.pageTotal == 0 && table.pageNum == 1)) {
                    table.loaded();
                    table.renderTable(tableContent, callback);

                    table.updatePagination(data);

                } else {
                    table.reloadApi(table.pageTotal);
                }

            });
        };

        this.loading = function() {
            if (this.sampleNode != '') {
                this.sampleNode.classList.add('is-hidden');
            }

            this.changeState('loading');
        };
        this.loaded = function() {
            if (this.sampleNode != '') {
                this.sampleNode.classList.remove('is-hidden');
            }
            this.changeState('loaded');
        };

        this.changeState = function(action) {
            var buttonPrimary = document.querySelector('.button.is-primary');
            var primaryColor = (buttonPrimary) ? shinobi.util.getComputedProperty(buttonPrimary, 'background-color') : '#555';
            var style = document.createElement('style');
            style.setAttribute('class', 'table-node-loading-inline-style');
            style.innerHTML = `.is-borderless{
				border: none;
			}
			@-webkit-keyframes spin {
				0% {
					-webkit-transform: rotate(0deg);
				}
		
				100% {
					-webkit-transform: rotate(360deg);
				}
			}
		
			@keyframes spin {
				0% {
					transform: rotate(0deg);
				}
		
				100% {
					transform: rotate(360deg);
				}
			}
		
			.snb-datalist-item-container.is-loading {
				position: relative;
				min-height: 5rem;
			}
		
			.snb-datalist-item-container.is-loading::before {
				position: absolute;
				content: '';
				width: 100%;
				height: 100%;
				background: #ddd;
				z-index: 1;
				opacity: 0.3;
			}
		
			.snb-datalist-item-container.is-loading::after {
				position: absolute;
				content: '';
				border: 7px solid white;
				border-radius: 50%;
				border-top: 7px solid ${primaryColor};
				width: 4rem;
				height: 4rem;
				-webkit-animation: spin 2s linear infinite;
				animation: spin 1s linear infinite;
				left: calc(48% - 8px);
				top: calc(48% - 8px);
				z-index: 2;
			}
			`;

            var table = this;
            // var listClass = ['button', 'is-loading', 'is-primary',
            // 	'is-borderless', 'is-outlined'];
            table.tableNode.appendChild(style);
            if (action == 'loading') {
                table.loadingContainer.classList
                    .add('is-loading');
            } else {
                table.loadingContainer.classList
                    .remove('is-loading');
            }
            // listClass.forEach(function (classItem) {

            // 	(action == 'loading') ? table.tableNode.classList
            // 		.add(classItem) : table.tableNode.classList
            // 			.remove(classItem);
            // });

        };

        // public instance method
        this.clear = function() {

            clearInterval(this.insertListInterval);

            var node = this.tableNode;
            while (node.firstChild) {
                node.removeChild(node.firstChild);
            }

            node.appendChild(this.sampleNode);

        };

        this.updatePageTotal = function() {

            var parentNode = this.tableNode.parentNode;
            var pageTotalNode = parentNode.querySelector(pageTotalClass);

            pageTotalNode.innerHTML = this.pageTotal;

            if (this.pageNum > this.pageTotal) {
                this.pageNum = this.pageTotal;

                var pageNumNode = parentNode
                    .querySelector(curPagePaginationClass);
                pageNumNode.value = this.pageNum;
            }
        }

        // public instance method
        this.getRowObject = function(rowid) {
            return this.tableRows[rowid];
        };

        this.getTableFilters = function() {
            var table = document.getElementById(tableid);
            var headerFilters = table
                .querySelectorAll("[snb-header-control] > input");

            this.filters = [];

            this.filters = this.filters.concat(this.staticfilters);

            this.pageNum = 1;

            for (var i = 0; i < headerFilters.length; i++) {
                var inputElem = headerFilters[i];
                var currentvalue = inputElem.value;
                var parentNode = inputElem.parentNode;

                var select = parentNode.querySelector("select");
                var operator = select.options[select.selectedIndex].value;

                var filter = {};
                filter.colname = parentNode.getAttribute(colnameAttribute);
                filter.operator = operator;
                filter.value = currentvalue;

                if (currentvalue !== "") {
                    this.filters.push(filter);
                }

            }

        };

        // public instance method
        this.viewDetailRender = function(cell, rowindex, colindex, tableRows) {
            var button = document.createElement("a");
            button.setAttribute("class", "button is-small");
            button.innerHTML = "<span class='icon'> <i class='fa fa-search'></i></span>";
            cell.appendChild(button);

            var rowid = cell.getAttribute("rowid");

            var rowNode = cell.parentNode;

            var viewDetailPanelId = rowNode.getAttribute(detailIdKey);

            var rowObject = tableRows[rowid];

            button.addEventListener("click", function() {

                shinobi.mapping.render("#" + viewDetailPanelId, JSON
                    .stringify(rowObject));

            });
        }; // end viewDetailRender

    }; // end constructor

    // public static method
    constructor.staticmethod = {
        'hello': function() {

        }
    }

    return constructor;
})();shinobi.dynamicchart = (function () {

	// systax map data #{{key-json}}

	var constructor = function (chartId, options) {

		this.options = options;
		this.configChartId = '';
		this.chartId = chartId;
		this.isLoadChartData = false;
		this.chartData = {};
		this.isLoadConfigData = false;
		this.structureContent = {};
		this.chartStructure = "";
		this.chartStructureContent = {};
		this.configData = {};
		this.callback = '';
		this.chartRenderObject = {
			credits: {
				enabled: false
			},
		};

		this.loadOptions = function () {

			if (this.options.configChartId) {
				this.configChartId = this.options.configChartId;
			}

			if (this.options.callback) {
				this.callback = this.options.callback;
			}

			this.loadDataChart();

		};

		this.loadDataChart = function () {

			var chart = this;

			if (this.options.getData) {
				this.isLoadChartData = false;
				var url = this.options.getData.url;
				var request = JSON.stringify(this.options.getData.request);
				var callback = this.options.getData.callback;
				shinobi.api.request(url, request, function (response) {

					callback(response, function (chartData) {

						chart.isLoadChartData = true;
						chart.chartData = chartData;
					});

				});

			}

			this.loadConfigChart();

		};

		this.loadConfigChart = function () {

			var chart = this;
			var options = this.options;

			if (options.getConfig) {

				var loadConfigChartInterval = setInterval(
					function () {

						if (chart.isLoadChartData == true) {

							clearInterval(loadConfigChartInterval);

							chart.isLoadConfigData = false;
							var url = options.getConfig.url;
							var request = JSON
								.stringify(options.getConfig.request);
							var callback = options.getConfig.callback;
							shinobi.cacheapi
								.request(
									url,
									request,
									function (response) {

										// callback(response,
										// function(configData) {
										//
										// chart.isLoadConfigData =
										// true;
										// chart.configData =
										// configData;
										// });

										callback(
											response,
											function (
												structureContent) {

												chart.isLoadConfigData = true;
												chart.structureContent = structureContent;
											});

									});
						}

					}, 100);

			}

			this.renderChart();

		};

		this.renderChart = function () {

			var chart = this;

			var renderChartInterval = setInterval(function () {

				if (chart.isLoadChartData == true
					&& chart.isLoadConfigData == true) {

					clearInterval(renderChartInterval);

					chart.buildRenderChartObject();

					chart.reRender();

					if (typeof chart.createChartCallback == 'function') {

						chart.createChartCallback();
					}

				}
			}, 100);

		};

		this.reRender = function () {

			var chart = this;

			Highcharts.chart(chart.chartId, chart.chartRenderObject);

		};

		this.buildRenderChartObject = function () {

			var chart = this;

			this.chartStructure = this.structureContent['charttemplatecontent'];
			this.chartStructureContent = JSON
				.parse(this.structureContent['chartdetailcontent']);

			this.configData = this.chartStructure;

			this.fillStructureContent();

			chart.fillConfigAttributeValue();

			chart.fillRenderObjectConfigAttribute();

		};

		this.convertStringFunctionToFuntion = function (data) {

			var chart = this;

			var entries = Object.entries(data);

			for (var i = 0; i < entries.length; i++) {

				var key = entries[i][0];
				var value = entries[i][1];

				if (typeof value == 'object') {
					data[key] = chart.convertStringFunctionToFuntion(value);
				} else {

					if (typeof value == 'string'
						&& value.indexOf("function()") > -1)
						data[key] = eval("(" + value + ")");
				}

			}

			return data;

		};

		this.fillStructureContent = function () {

			var chart = this;

			// this.fillAttributeValue(chart.configData);

			var matchRegex = /\@{{.*?\}}/g;
			var replaceRegex = /[@{{}}]/g;

			var listMatch = chart.configData.match(matchRegex);
			if (listMatch) {

				for (var j = 0; j < listMatch.length; j++) {

					var mappingValueKey = listMatch[j]
						.replace(replaceRegex, "");

					var mappingValue = chart.chartStructureContent[mappingValueKey];

					mappingValue = chart.getMappingValue(mappingValue);

					chart.configData = chart.configData.replace(new RegExp(
						listMatch[j], 'g'), mappingValue);

				}
			}

		};

		this.fillConfigAttributeValue = function () {

			var chart = this;

			// this.fillAttributeValue(chart.configData);

			var matchRegex = /\#{{.*?\}}/g;
			var replaceRegex = /[#{{}}]/g;

			var listMatch = chart.configData.match(matchRegex);
			if (listMatch) {

				for (var j = 0; j < listMatch.length; j++) {

					var mappingValueKey = listMatch[j]
						.replace(replaceRegex, "");

					var mappingValue = chart.chartData[mappingValueKey];

					mappingValue = chart.getMappingValue(mappingValue);

					chart.configData = chart.configData.replace(new RegExp(
						listMatch[j], 'g'), mappingValue);

				}
			}

		};

		this.getMappingValue = function (input) {

			var mappingValueType = typeof input;
			var result;

			switch (mappingValueType) {

				case 'string':
					result = '\"' + input + '\"';
					break;
				case 'object':
					result = JSON.stringify(input);
					break;
				default:
					break;
			}

			return result;
		};

		this.fillAttributeValue = function (object) {

			var chart = this;

			if (typeof object == 'object') {

				var entries = Object.entries(object);

				for (var i = 0; i < entries.length; i++) {

					var key = entries[i][0];
					var value = entries[i][1];
					var typeValue = typeof value;

					switch (typeValue) {

						case 'object':
							chart.fillAttributeValue(object[key]);
							break;

						case 'string':

							var matchRegex = /\#{{.*?\}}/g;
							var replaceRegex = /[#{{}}]/g;

							var listMatch = value.match(matchRegex);

							if (listMatch && listMatch.length == 1
								&& value == listMatch[0]) {

								var mappingValueKey = listMatch[0].replace(
									replaceRegex, "");

								object[key] = chart.chartData[mappingValueKey];
							} else if (listMatch) {

								for (var j = 0; j < listMatch.length; j++) {

									mappingValueKey = listMatch[j].replace(
										replaceRegex, "");

									var mappingValue = chart.chartData[mappingValueKey];

									value = value.replace(new RegExp(listMatch[j],
										'g'), mappingValue);

									object[key] = value;
								}
							}

							break;

						default:
							break;
					}
				}

			}

		};

		this.fillRenderObjectConfigAttribute = function () {

			var data = JSON.parse(this.configData);

			var fullChartConfig = this.convertStringFunctionToFuntion(data)

			var entries = Object.entries(fullChartConfig);

			for (var i = 0; i < entries.length; i++) {

				this.chartRenderObject[entries[i][0]] = entries[i][1];

			}

			// this
			// .convertStringFunctionToFuntion(
			// data,
			// function(fullChartConfig) {
			//
			// var entries = Object.entries(fullChartConfig);
			//
			// // var entries =
			// // Object.entries(this.configData);
			//
			// for (var i = 0; i < entries.length; i++) {
			//
			// this.chartRenderObject[entries[i][0]] = entries[i][1];
			//
			// }
			// });

		};

		this.createChart = function (callback) {
			this.loadOptions();

			this.createChartCallback = callback;

		};

	};

	return constructor;
})();var publicAccountLink = '/page/account/';
var ratingDetailLink = '/page/ratingdetail/';
var blogPostPageUrl = '/page/blogpost/';
var adminPostCheckPageUrl = '/system/adminpostcheckdetail/';
var beginDateDatalist = '2019-01-01';
var endDateDatalist = '2100-01-01';
var blogIconImageLink = '/static/image/blogicon.svg';
var copyTradeIconImageLink = '/static/image/copytradeicon.svg';
var aladinLogo = '/static/image/aladin.svg';
var groupAvatar = 'https://image.aladin.finance/aladin.finance.public.file/517da259fc9feb05f65994fb850f09e4/groupchatavatar.png';
var format = function (value) {
	return Number(value).format(0, 3, ',', '.');
};
var formatInputTagDatalist = function (elem, value) {
	elem.value = format(value);
};
var formatNumberTable = function (cell, row, col, allData) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	formatInputTagDatalist(cell, value);
};
var cancelModal = function (id) {
	var modal = document.getElementById(id);
	modal.classList.remove('is-active');
};
var renderPriceOrderTable = function (cell, row, col) {
};
var renderRoomAvatarDataList = function (elem, value) {
	if (value.trim() == '') {
		elem.setAttribute('src', groupAvatar);
	} else {
		elem.setAttribute('src', value);
	}
};
var getCheckBoxList = function (elem) {
	var key = elem.getAttribute('snb-key');
	var attr = elem.getAttribute('snb-value-attr');
	var listCheckBox = document.querySelectorAll('[snb-key=' + key + ']');
	var result = [];
	for (var i = 0; i < listCheckBox.length; i++) {
		if (listCheckBox[i].checked
			&& listCheckBox[i].getAttribute('type') == 'checkbox') {
			result.push(listCheckBox[i].getAttribute(attr));
		}
	}
	return result.toString();
};
var getNation = function (elem) {
	var select = elem.getElementsByTagName('select')[0];
	return select.value;
};
var renderProvinceList = function (id, callback) {
	var container = document.getElementById(id);
	shinobi.aladinUtil.removeAllChild(container);
	var request = {};
	shinobi.api.request("/api/VietNamLocationNameApi/getAllVietNamProvince",
		JSON.stringify(request), function (response) {
			var jsonArr = JSON.parse(response);
			for (var i = 0; i < jsonArr.length; i++) {
				var option = document.createElement("option");
				option.setAttribute('value', jsonArr[i].provinceid);
				option.innerHTML = jsonArr[i].provincename;
				container.appendChild(option);
			}
			container.value = '79';
			if (typeof callback == 'function') {
				callback();
			}
		});
	return container;
};
var getCheckRadio = function (elem) {
	var attr = elem.getAttribute('snb-value-attr');
	if (elem.checked) {
		return elem.getAttribute(attr);
	}
};
var removeAllChild = function (elem, callback) {
	while (elem.firstChild) {
		elem.removeChild(elem.firstChild);
	}
	if (callback) {
		callback();
	}
};
var getAllUserInfo = function (request, callback) {
	var key = request.username.toString();
	if (!shinobi.global) {
		shinobi.global = {};
	}
	if (!shinobi.global.getAllUserInfo) {
		shinobi.global.getAllUserInfo = {};
	}
	if (!shinobi.global.getAllUserInfo[key]) {
		if (shinobi.global.getAllUserInfo[key] == false) {
			setTimeout(function () {
				getAllUserInfo(request, callback);
			}, 10);
		} else {
			shinobi.global.getAllUserInfo[key] = false;
			shinobi.api.request('/api/UserApi/getAllUserInfo', JSON
				.stringify(request), function (response) {
					shinobi.global.getAllUserInfo[key] = response;
					callback(response);
				})
		}
	} else {
		callback(shinobi.global.getAllUserInfo[key]);
	}
};
var displayResultSelect = function (selectId) {
	var x = document.getElementById(selectId);
	var txt = [];
	var i;
	for (i = 0; i < x.length; i++) {
		txt.push(x.options[i].value);
	}
	return txt;
}
var customRecordPerPagePagination = function (container, recordNum) {
	var selectRecordNum = container
		.getElementsByClassName('shinobi-recordperpage')[0];
	var listOptionSelect = selectRecordNum.getElementsByTagName('option');
	for (var i = 0; i < listOptionSelect.length; i++) {
		var j = parseInt(i) + 1;
		var currentPageNum = j * recordNum;
		listOptionSelect[i].innerHTML = currentPageNum;
		listOptionSelect[i].value = currentPageNum;
	}
};
var renderStockCompanyDeleteStaffButton = function (elem, value) {
	var id = value;
	var userName = elem.querySelectorAll('[snb-key=username]')[0].innerHTML;
	var loggedUserName = window.localStorage.getItem('loggedUserName');
	if (userName == loggedUserName) {
		elem.innerHTML = '';
	} else {
		elem.onclick = function () {
			er
				.confirm(function () {
					var request = {};
					request.id = id;
					shinobi.api
						.request(
							'/authenapi/StockComStaffManagementApi/deleteStaffFromGroup',
							JSON.stringify(request),
							function (response) {
								if (response == 'update success') {
									shinobi.notification.notification
										.info('Cập nhật thành công');
									elem.parentNode.remove();
								}
							});
				});
		}
	}
};
var gotoPublicPage = function (elem, data) {
	if (data.homepageurl) {
		var accountLink = publicAccountLink + data.homepageurl;
		elem.classList.add('has-redirect');
		elem.onclick = function () {
			window.location.href = accountLink;
		}
	}
};
var renderHasFee = function (cell, rowIndex, colIndex, allData) {
	var rowData = allData[rowIndex];
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var cellContent = '';
	// check data has post amount attribute
	if (value == 'false') {
		cellContent = shinobi.language.free;
	} else {
		if (rowData.hasOwnProperty('feeamount') == true) {
			cellContent = shinobi.aladinUtil
				.formatNumberValue(rowData.feeamount)
				+ ' đ';
		} else {
			cellContent = 'Có phí';
		}
	}
	cell.innerHTML = cellContent;
};
var renderPostType = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var cellContent = '';
	cellContent = shinobi.aladinUtil.convertPostTypeToVn(value);
	cell.innerHTML = cellContent;
};
var renderFullName = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var cellContent = '';
	cellContent = value;
	cell.innerHTML = cellContent;
};
var renderFirstNameLastName = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	removeAllChild(cell, function () {
		buildFirstNameLastNameDatalist(cell, value);
	});
};
var renderStockCompanyTreeTable = function (elem, value) {
	var level = value;
	var classLevel = 'level-' + level;
	elem.classList.add(classLevel);
	if (level == 1) {
		elem.parentNode.parentNode.parentNode.classList.remove('is-hidden');
	}
	var openButton = elem.parentNode.getElementsByClassName('open-button')[0];
	var closeButton = elem.parentNode.getElementsByClassName('close-button')[0];
	if (level == 2) {
		openButton.classList.add('is-hidden');
		closeButton.classList.add('is-hidden');
	}
	var tBody = document.getElementById('dataTable');
	openButton.onclick = function () {
		var childrenId = this.getAttribute('childrenid');
		this.classList.add('is-hidden');
		closeButton.classList.remove('is-hidden');
		var listChildren = tBody.querySelectorAll('[snb-key=parentid]');
		for (var i = 0; i < listChildren.length; i++) {
			if (listChildren[i].innerHTML == childrenId) {
				listChildren[i].parentNode.classList.remove('is-hidden');
			}
		}
	}
	closeButton.onclick = function () {
		var childrenId = this.getAttribute('childrenid');
		this.classList.add('is-hidden');
		openButton.classList.remove('is-hidden');
		var listChildren = tBody.querySelectorAll('[snb-key=parentid]');
		for (var i = 0; i < listChildren.length; i++) {
			if (listChildren[i].innerHTML == childrenId) {
				listChildren[i].parentNode.classList.add('is-hidden');
				var childrenCloseButton = listChildren[i].parentNode
					.getElementsByClassName('close-button')[0];
				childrenCloseButton.click();
				var childrenOpenButton = listChildren[i].parentNode
					.getElementsByClassName('open-button')[0];
				childrenOpenButton.classList.add('is-hidden');
			}
		}
	}
};
var renderStockCompanyTraderRegistrationInfo = function (elem, value) {
	var data = JSON.parse(value);
	var key = elem.getAttribute('snb-key-subkey');
	if (data[key]) {
		elem.innerHTML = data[key];
	}
};
var renderPostTitle = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var rowData = allData[rowIndex];
	var a = document.createElement('a');
	a.setAttribute('class', 'has-link');
	a.innerHTML = value;
	cell.appendChild(a);
	if (rowData.hasOwnProperty('posturl')) {
		a.setAttribute('href', rowData.posturl);
	}
};
var renderCheckRadio = function (elem, value) {
	var attr = elem.getAttribute('snb-value-attr');
	var checkedElem = document.querySelectorAll('[' + attr + '=' + value + ']')[0];
	checkedElem.checked = true;
};
var seenDetailOpenAccountForm = function (elem, value) {
	elem.onclick = function () {
		shinobi.stockcomrealaccountregistrationrender
			.getDetailData(
				value,
				function (data) {
					var openAccountDetailModal = document
						.getElementById('openAccountDetailModal');
					openAccountDetailModal.classList.add('is-active');
					shinobi.mapping.render('#openAccountDetailModal',
						JSON.stringify(data));
					document
						.getElementById('acceptPoliciesOpenTradingAccount').checked = true;
				});
	}
};
var renderCheckBoxList = function (elem, value) {
	var attr = elem.getAttribute('snb-value-attr');
	var listChecked = value.split(',');
	for (var i = 0; i < listChecked.length; i++) {
		var checkedElem = document.querySelectorAll('[' + attr + '='
			+ listChecked[i] + ']')[0];
		checkedElem.checked = true;
	}
};
var renderNation = function (elem, value) {
	var select = elem.getElementsByTagName('select')[0];
	select.value = value;
};
var removeOpenAccountFormButton = function (elem, value) {
	elem.onclick = function () {
		shinobi.stockcomrealaccountregistrationrender
			.showConfirmRemoveModal(function (statuscomment) {
				shinobi.stockcomrealaccountregistrationrender
					.sendRequestUpdate(elem, value, 'FAIL',
						statuscomment);
			});
	}
};
var acceptOpenAccountFormButton = function (elem, value) {
	elem.onclick = function () {
		er.confirm(function () {
			shinobi.stockcomrealaccountregistrationrender.sendRequestUpdate(
				elem, value, 'FINISHED', '');
		});
	}
};
var renderDate = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var contentCell = shinobi.aladinUtil.getFormatDate(value, 'dd-mm-yyyy');
	cell.setAttribute('class', 'date-time');
	cell.innerHTML = contentCell;
};
var renderFormatDate = function (elem, value) {
	var format = elem.getAttribute('snb-format');
	var contentCell = shinobi.aladinUtil.getFormatDate(value, format);
	elem.classList.add('date-time');
	elem.innerHTML = contentCell;
};
var renderDateTime = function (cell, rowIndex, colIndex, allData) {
	var value = cell.innerHTML;
	shinobi.aladinUtil.removeAllChild(cell);
	var contentCell = shinobi.aladinUtil.getFormatDate(value,
		'dd-mm-yyyy hh:mm');
	cell.setAttribute('class', 'date-time');
	cell.innerHTML = contentCell;
};
var getExpiredDate = function (elem, value) {
	var returnContent = shinobi.aladinUtil.remainDateWithCurrentDate(value);
	return returnContent;
};
var renderJoinDateDatalist = function (elem, value) {
	elem.innerHTML = getExpiredDate(elem, value);
};
var renderExpireddateDatalist = function (elem, value) {
	if (value) {
		elem.innerHTML = '<p>Còn ' + getExpiredDate(elem, value)
			+ ' ngày nữa</p>';
	} else {
		elem.innerHTML = 'Dịch vụ miễn phí ';
	}
};
var convertRatingPointToStar = function (elem, value) {
	elem.innerHTML = value / 2;
};
var buildRating = function (elem, value) {
	elem.classList.add('is-flex');
	value = value / 2;
	var starIconHtmlString = '<span class="icon is-small has-text-warning"><i class="fas fa-star"></i></span>';
	var noneStarIconHtmlString = '<span class="icon is-small has-text-light"><i class="fas fa-star"></i></span>';
	var numberRating = value;
	if (value > 5) {
		numberRating = 5;
	}
	if (value < 0 || value == 0) {
		numberRating = 0;
	}
	var contentRating = '';
	for (var i = 0; i < numberRating; i++) {
		contentRating += starIconHtmlString;
	}
	for (var j = 0; j < (5 - numberRating); j++) {
		contentRating += noneStarIconHtmlString;
	}
	elem.innerHTML = contentRating;
};
var convertFequency = function (value) {
	var elemContent;
	switch (value) {
		case 'MONTHLY':
			elemContent = '1 Tháng';
			break;
		case 'QUATERLY':
			elemContent = '3 Tháng';
			break;
		case 'HALF_YEAR':
			elemContent = '6 Tháng';
			break;
		case 'ANNUALLY':
			elemContent = '12 Tháng';
			break;
		default:
			break;
	}
	return elemContent;
};
var renderFequencyDatalist = function (elem, value) {
	var elemContent = convertFequency(value);
	elem.innerHTML = elemContent;
};
var renderInfoButton = function (elem, value) {
	var a = document.createElement('a');
	a.setAttribute('class', 'button is-info is-small ');
	a.innerHTML = value;
	elem.appendChild(a);
};
var addUserOriginLogo = function (elem, data) {
	if (data.userorigin
		&& !elem.parentNode.parentNode.querySelector('.table-logo')
		&& data.userorigin != 'ALADIN_MEMBER'
		&& data.isshoworiginavatar == true) {
		var url = aladinLogo;
		var p = document.createElement('p');
		p.setAttribute('class', 'stock-company-image ');
		elem.parentNode.appendChild(p);
		elem.parentNode.classList.add('stock-company-chat-avatar-container');
		var img = document.createElement('img');
		p.appendChild(img);
		img.setAttribute('class', 'table-logo');
		switch (data.userorigin) {
			case 'DAS_STOCK_COMPANY':
				url = '/static/image/daslogo.png';
				break;
			default:
				break;
		}
		img.setAttribute('src', url);
	}
};
var buildAvatarDatalist = function (elem, value) {
	var p = document.createElement('p');
	if (elem.parentElement) {
		elem.parentElement.insertBefore(p, elem);
		p.appendChild(elem);
	}
	if (value == 'system') {
		elem.setAttribute('src', '/static/image/aladin.svg');
	} else {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api
		// .request(
		// '/api/UserApi/getAllUserInfo',
		// JSON.stringify(request),
		// function(response) {
		getAllUserInfo(
			request,
			function (response) {
				data = JSON.parse(response);
				if (data.avatarlink) {
					value = data.avatarlink;
				} else {
					value = 'https://image.aladin.finance/aladin.finance.public.file/517da259fc9feb05f65994fb850f09e4/useravatar.jpg';
				}
				elem.parentNode.classList.add('has-text-centered');
				elem.setAttribute('src', value);
				elem.setAttribute('title', data.firstname + ' '
					+ data.lastname);
				addUserOriginLogo(elem, data);
				gotoPublicPage(elem, data);
			});
	}
};
var getHeaderRenderKey = function (cell, row, col) {
	var table = cell.parentElement.parentElement.parentElement;
	var header = table.getElementsByTagName('thead')[0];
	if (header) {
		var headerCell = header.rows[0].cells[col];
		if (headerCell.hasAttribute('snb-colname')) {
			return headerCell.getAttribute('snb-colname');
		} else {
			return null;
		}
	} else {
		return null;
	}
};
var buildNickIdTable = function (cell, row, col, all) {
	var key = getHeaderRenderKey(cell, row, col);
	cell.innerHTML = '<div snb-key="' + key
		+ '" snb-render="buildNickIdDatalist"></div>';
	shinobi.mapping.renderElement(cell, all[row]);
};
var buildConnectButton = function (cell, rowIndex, colIndex, allData) {
	var currentData = allData[rowIndex];
	var a = document.createElement('a');
	a.setAttribute('class', 'button is-link is-small');
	a.innerHTML = 'Tiếp cận';
	shinobi.aladinUtil.removeAllChild(cell);
	cell.appendChild(a);
	shinobi.investorlistingrender.addEventFollowButton(a, currentData.username)
};
var renderCellTable = function (cell, rowIndex, colIndex, allData) {
	shinobi.fragmenttraderfollowerrender
		.renderCellFollowerTable(cell, colIndex);
};
var renderLimitButton = function (cell, rowIndex, colIndex) {
	var customerUsername = cell.innerHTML;
	cell.innerHTML = "";
	shinobi.fragmenttraderfollowerrender.renderLimitButtonFunction(cell,
		rowIndex, colIndex, customerUsername);
};
var formatNumber = function (cell, rowIndex, colIndex) {
	shinobi.aladinUtil.formatNumberRender(cell, rowIndex, colIndex);
};
var buildNickIdDatalist = function (elem, value) {
	if (value != 'system') {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api.request('/api/UserApi/getAllUserInfo',
		// JSON.stringify(request), function(
		// response) {
		getAllUserInfo(
			request,
			function (response) {
				data = JSON.parse(response);
				var chatSpan = document.createElement('span');
				chatSpan
					.setAttribute('class',
						'icon has-text-orange create-public-chat-icon tooltip is-hidden');
				chatSpan.setAttribute('data-tooltip', 'Trò chuyện');
				chatSpan.innerHTML = '<i class="far fa-comment-dots fa-lg"></i>';
				er.buildPublicChat(chatSpan, data.id);
				elem.appendChild(chatSpan);
				var span = document.createElement('span');
				span.classList.add('id-nick-container');
				span.innerHTML = '#' + data.id;
				elem.appendChild(span);
				// gotoPublicPage(elem, data);
			});
	}
};
var buildAvatarDatalistNoHref = function (elem, value) {
	var p = document.createElement('p');
	p.classList.add('margin-right-1rem');
	if (elem.parentElement) {
		elem.parentElement.insertBefore(p, elem);
		p.appendChild(elem);
	}
	if (value == 'system') {
		elem.setAttribute('src', '/static/image/aladin.svg');
	} else {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api
		// .request(
		// '/api/UserApi/getAllUserInfo',
		// JSON.stringify(request),
		// function(response) {
		getAllUserInfo(
			request,
			function (response) {
				data = JSON.parse(response);
				data = JSON.parse(response);
				if (data.avatarlink) {
					value = data.avatarlink;
				} else {
					value = 'https://image.aladin.finance/aladin.finance.public.file/517da259fc9feb05f65994fb850f09e4/useravatar.jpg';
				}
				elem.setAttribute('src', value);
				elem.setAttribute('title', data.firstname + ' '
					+ data.lastname);
				addUserOriginLogo(elem, data);
			});
	}
};
var buildHomePageUrlDatalist = function (elem, value) {
	var userName = value;
	var request = {};
	request.username = userName;
	var data;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		data = JSON.parse(response);
		if (data.homepageurl) {
			var accountLink = publicAccountLink + data.homepageurl;
			elem.innerHTML = window.location.host + accountLink;
			elem.onclick = function () {
				window.location.href = accountLink;
			}
		}
	});
};
var buildFirstNameLastNameDatalist = function (elem, value) {
	if (value != 'system') {
		var userName = value;
		var request = {};
		request.username = userName;
		var data;
		// shinobi.api.request('/api/UserApi/getAllUserInfo',
		// JSON.stringify(request), function(
		// response) {
		getAllUserInfo(request, function (response) {
			data = JSON.parse(response);
			data = JSON.parse(response);
			var fullName = data.firstname + ' ' + data.lastname;
			elem.innerHTML = fullName;
			gotoPublicPage(elem, data);
		});
	}
};
var renderStockCompanyUpgradeRequestCommandButton = function (elem, value) {
	elem.onclick = function () {
		er.confirm(function () {
			var functionApi = elem.getAttribute('snb-function');
			var requestid = value;
			var api = "/authenapi/RequestUpgradeTraderOfStockCompanyApi/"
				+ functionApi;
			var request = {};
			request.requestid = requestid;
			shinobi.api.request(api, JSON.stringify(request),
				function (response) {
					if (response == 'update success') {
						shinobi.notification.notification
							.info('Cập nhật thành công');
						shinobi.stockcomtradersregistrationrender.datalist1
							.reloadApi(1);
					}
				});
		});
	}
};
var renderStockCompanyCustomerManagementButton = function (elem, value) {
	var link = '/private/stockcomtradersmanagementcustomer/' + value;
	elem.setAttribute('href', link);
};
var renderGoToPublicPageDatalist = function (elem, value) {
	var userName = value;
	var request = {};
	request.username = userName;
	var data;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		data = JSON.parse(response);
		gotoPublicPage(elem, data);
	});
};
var buildFirstNameLastNameDatalistNoHref = function (elem, value) {
	var userName = value;
	var request = {};
	request.username = userName;
	var data;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		data = JSON.parse(response);
		var fullName = data.firstname + ' ' + data.lastname;
		elem.innerHTML = fullName;
	});
};
var renderAvatar = function (cell, rowIndex, colIndex) {
	var value = cell.innerHTML;
	removeAllChild(cell, function () {
		var imge = document.createElement('img');
		imge.setAttribute('class', 'table-avatar');
		cell.appendChild(imge);
		buildAvatarDatalist(imge, value);
	});
};
var renderInvestingStrategy = function (elem, value) {
	if (value.trim() == '') {
		elem.innerHTML = 'Hiện chưa có!';
	} else {
		if (value.length > 400) {
			elem.innerHTML = value.slice(0, 400) + '...';
			var a = document.createElement('a');
			a.setAttribute('class', 'local-color');
			a.innerHTML = '[Xem thêm]';
			elem.appendChild(a);
		} else {
			elem.innerHTML = value;
		}
	}
};
var renderInvestingPeriodDataList = function (elem, value) {
	switch (value.trim()) {
		case 'MONTH_1':
			elem.innerHTML = '1 Tháng';
			break;
		case 'MONTH_1_3':
			elem.innerHTML = '1-3 Tháng';
			break;
		case 'MONTH_3_6':
			elem.innerHTML = '3-6 Tháng';
			break;
		case 'MONTH_6_12':
			elem.innerHTML = '6-12 Tháng';
			break;
		case 'YEAR_1_3':
			elem.innerHTML = '1-3 Năm';
			break;
		case 'YEAR_OVER_3':
			elem.innerHTML = 'Hơn 3 Năm';
			break;
		default:
			break;
	}
};
var renderInvestingPeriod = function (cell, rowIndex, colIndex) {
	var value = cell.innerHTML;
	removeAllChild(cell);
	renderInvestingPeriodDataList(cell, value);
};
var renderFormatNumber = function (cell, rowIndex, colIndex) {
	cell.innerHTML = Number(cell.innerHTML).format(0, 3, ',', '.');
};
var renderInvestingRisk = function (cell, rowIndex, colIndex) {
	var beginCell = '<div class="level width-50" ><input class="slider slider-width level-item" step="1" min="1" max="10" value="';
	var betweenCell = '" type="range" disabled="disabled"><span class="slider-value-padding level-item"> ';
	var endCell = '/10</span></div>';
	var valueCell = cell.innerHTML;
	cell.innerHTML = beginCell + valueCell + betweenCell + valueCell + endCell;
};
var renderHomePageUrl = function (elem, value) {
	var accountUrl = publicAccountLink + value;
	elem.setAttribute('href', accountUrl);
	elem.innerHTML = window.location.host + accountUrl;
};
var autoRedirectMobile = function () {
	var userAgent = navigator.userAgent || navigator.vendor || window.opera;
	// Windows Phone must come first because its UA also contains
	// "Android"
	if (/android/i.test(userAgent)) {
		window.location.href = "https://play.google.com/store/apps/details?id=com.aladinmobile.aladin";
	}
	// iOS detection from: http://stackoverflow.com/a/9039885/177710
	if (/iPhone|iPod/.test(userAgent) && !window.MSStream) {
		window.location.href = "https://apps.apple.com/app/id1474783146";
	}
};
var setHrefElem = function (elem, link) {
	elem.style.cursor = "pointer";
	var title = elem.innerHTML;
	if (title) {
		elem.setAttribute('title', title.replace(/\s+/g, " "));
	}
	elem.onclick = function () {
		window.location.href = link;
	}
};
var renderHref = function (elem, value, attr) {
	var link = value;
	setHrefElem(elem, link);
};
var renderHrefWithUserType = function (elem, value, attr) {
	var userType = window.localStorage.getItem('loggedUserType');
	var link;
	if (userType == 'stock_com_admin') {
		link = '/private/stockcom' + value;
	} else {
		link = '/private/' + userType + value;
	}
	if (elem.hasAttribute('rs-hidden-with')) {
		var userTypeHidden = elem.getAttribute('rs-hidden-with');
		if (userType == userTypeHidden) {
			elem.classList.add('is-hidden');
		}
	}
	if (elem.hasAttribute('rs-parent-show-with')) {
		var userTypeShow = elem.getAttribute('rs-parent-show-with');
		if (userType == userTypeShow) {
			elem.parentNode.classList.remove('is-hidden');
		}
	}
	setHrefElem(elem, link);
};
var renderDashboardLastOrderAvatar = function (elem, value, attr) {
	var userName;
	if (value == 1 || value == 2) {
		userName = window.localStorage.getItem('loggedUserName');
	} else {
		userName = value;
	}
	buildAvatarDatalist(elem, userName);
};
var renderDashboardLastOrderFullName = function (elem, value) {
	var userName;
	if (value == 1 || value == 2) {
		userName = window.localStorage.getItem('loggedUserName');
	} else {
		userName = value;
	}
	buildFirstNameLastNameDatalist(elem, userName);
};
var renderOrderSideDataList = function (elem, value) {
	var elemContent = '';
	if (value == 'S') {
		elemContent = 'Bán';
	} else {
		elemContent = 'Mua';
	}
	elem.innerHTML = elemContent;
};
var getNumberOfSessionBack = function (rankingtype) {
	var returnValue = 1;
	switch (rankingtype) {
		case 'ONE_DAY':
			returnValue = 1;
			break;
		case 'ONE_WEEK':
			returnValue = 5;
			break;
		case 'ONE_MONTH':
			returnValue = 20;
			break;
		case 'THREE_MONTH':
			returnValue = 60;
			break;
		case 'SIX_MONTH':
			returnValue = 120;
			break;
		case 'ALL_TIME':
			returnValue = 100000;
			break;
		default:
			break;
	}
	return returnValue;
};
var renderChartAnalysisSimpleDatalist = function (elem, value) {
	var userName = value;
	var chartParams = {};
	chartParams.account__0__String = userName;
	chartParams.numberofsessionback__1__int = Number(
		Number(getNumberOfSessionBack(shinobi.investortraderlistingcontentheaderrender.currentTab)) + 1)
		.toString();
	var request = {};
	request.chartParams = chartParams;
	shinobi.api
		.request('/api/AladinChartApi/getChartData/ACCOUNT_ASSET_CHART',
			JSON.stringify(request), function (response) {
				var jsonArr = JSON.parse(response);
				var data = jsonArr;
				var dataChart = shinobi.chartadapter
					.convertDataSimpleChart(data);
				var chart = new shinobi.overviewareachart(elem);
				chart.createOverviewAreaChart(elem, '8rem', '12rem',
					dataChart);
			});
};
var customStylePagination = function (paginationContainer) {
	var pagiContainerParent = paginationContainer.parentNode;
	var style = pagiContainerParent.getAttribute('pagi-style');
	var setRecordContainer = paginationContainer
		.getElementsByClassName('set-pagination-record-number-container')[0];
	switch (style) {
		// case 'mini':
		// setRecordContainer.classList.add('is-hidden');
		// break;
		default:
			break;
	}
};
var renderChexbox = function (cell, row, col, all) {
	var value = cell.innerHTML;
	cell.innerHTML = "";
	var elem = document.createElement('p');
	elem.setAttribute('class', 'has-text-centered');
	if (["PENDING", "PARTIAL_MATCHED"].includes(value)) {
		var checkbox = document.createElement('input');
		checkbox.setAttribute('type', 'checkbox');
		checkbox.setAttribute('snb-key-checkbox', all[row].systemorderid);
		elem.appendChild(checkbox);
		cell.appendChild(elem);
	}
};
var getUserInfo = function (callback) {
	var url = "/authenapi/SystemUserApi/getInfoLogin";
	var request = {};
	shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
		console.log(res);
		res = JSON.parse(res);
		if (callback) {
			callback(res);
		}
	});
};
var getUserInfoNotCache = function (callback) {
	var url = "/authenapi/SystemUserApi/getInfoLogin";
	var request = {};
	shinobi.capi.request(url, JSON.stringify(request), function (res) {
		console.log(res);
		res = JSON.parse(res);
		if (callback) {
			callback(res);
		}
	});
};
var getRecordNumber = function (paginationContainerId) {
	var containerId;
	var paginationContainer;
	if (paginationContainerId) {
		var container = document.getElementById(paginationContainerId);
		paginationContainer = container.nextElementSibling
			.getElementsByClassName('table-pagination')[0];
	} else {
		containerId = 'table-pagination';
		paginationContainer = document.getElementById(containerId);
	}
	var parentNodePaginationContainer = paginationContainer.parentNode;
	var recordNum;
	var recodeNumAttr = 'record-num';
	if (parentNodePaginationContainer.hasAttribute(recodeNumAttr)) {
		recordNum = parentNodePaginationContainer.getAttribute(recodeNumAttr);
	} else {
		var recordNumSelect = paginationContainer
			.getElementsByClassName('shinobi-recordperpage')[0];
		recordNum = recordNumSelect.value;
	}
	customRecordPerPagePagination(paginationContainer, recordNum);
	customStylePagination(paginationContainer);
	return recordNum;
};
var setHrefHomePageUrl = function (elem, homePageUrl) {
	var ratingDetailPageLink = ratingDetailLink + homePageUrl;
	renderHref(elem, ratingDetailPageLink);
};
var renderDetailRatingPage = function (elem, value) {
	elem.innerHTML = 'Chi tiết đánh giá';
	elem.classList.add('has-link');
	setHrefHomePageUrl(elem, value);
};
var renderDashboardRatingDetailLink = function (elem, value, attr) {
	var homePageUrl = window.localStorage.getItem('loggedUserHomePage');
	setHrefHomePageUrl(elem, homePageUrl);
};
var addColorElem = function (elem, value, attr) {
	var valueElem = elem.innerHTML;
	if (value > 0) {
		elem.innerHTML = `<span class="up-value">${valueElem}</span>`
	}
	if (value == 0) {
		elem.innerHTML = `<span class="unchange-value">${valueElem}</span>`
	}
	if (value < 0) {
		elem.innerHTML = `<span class="down-value">${valueElem}</span>`
	}
};
var renderPercent = function (elem, value, attr) {
	elem.innerHTML = value + '%';
	addColorElem(elem, value, attr);
};
var renderPercentNoColor = function (elem, value, attr) {
	elem.innerHTML = value + '%';
};
var renderProfitPercent = function (elem, value, attr) {
	renderPercent(elem, value, attr);
};
renderProfitpercent100NoColorTable = function (cell, row, col, all) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	cell.classList.add('has-text-right');
	renderProfitpercent100NoColor(cell, value, all[row])
};
var renderProfitpercent100Table = function (cell, row, col, all) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	cell.classList.add('has-text-right');
	renderProfitpercent100(cell, value, all[row])
};
var renderProfitpercent100 = function (elem, value, attr) {
	var profit = Math.round(Number(value) * 10000) / 100;
	renderPercent(elem, profit, attr);
};
var renderProfitpercent100NoColor = function (elem, value, attr) {
	var profit = Math.round(Number(value) * 10000) / 100;
	renderPercentNoColor(elem, profit, attr);
};
var renderformatNumberDatalist = function (elem, value, attr) {
	elem.classList.add('has-text-right');
	elem.innerHTML = format(value);
};
var renderProfit = function (elem, value, attr) {
	elem.innerHTML = format(value);
	addColorElem(elem, value, attr);
};
var renderProfitPercentTable = function (cell, rowIndex, colIndex) {
	cell.classList.add('has-text-right');
	var value = cell.innerHTML;
	removeAllChild(cell);
	renderProfitPercent(cell, value);
};
var renderOrderType = function (cell, row, col, all) {
	var value = cell.innerHTML;
	var listOrderType = {
		LO: 'Lệnh thường',
		CONDITION: 'Lệnh điều kiện',
		CANCEL: 'Hủy lệnh',
		EDIT: 'Sửa lệnh '
	}
	cell.classList.add('has-text-left');
	if (listOrderType[value]) {
		cell.innerHTML = listOrderType[value];
	} else {
		cell.innerHTML = value;
	}
};
var renderOrderTypeDatalist = function (elem, value, all) {
	var listOrderType = {
		LO: 'Lệnh thường',
		CONDITION: 'Lệnh điều kiện',
		CANCEL: 'Hủy lệnh',
		EDIT: 'Sửa lệnh '
	}
	elem.classList.add('has-text-left');
	if (listOrderType[value]) {
		elem.innerHTML = listOrderType[value];
	} else {
		elem.innerHTML = value;
	}
};
var renderNumberPriceTable = function (cell, row, col, all) {
	var value = cell.innerHTML;
	renderNumberPrice(cell, value, all[row]);
};
var renderNumberPrice = function (elem, value, all) {
	elem.parentNode.classList.add('has-text-right');
	elem.innerHTML = value;
};
var renderOrderBuy = function (cell, row, col, all) {
	cell.classList.add('has-text-centered')
	var value = cell.innerHTML;
	var listOrderType = {
		'BUY': 'Mua',
		'SELL': 'Bán',

	};

	if (listOrderType[value]) {
		cell.innerHTML = listOrderType[value];
	} else {

		cell.innerHTML = value;
	}
};
var getListStockSymbol = function (selector) {
	var selectorSearchStock = '#searchstocsympol';
	if (selector) {
		selectorSearchStock = selector;
	}
	console.log('selector', selector);
	var input = document.querySelector(selectorSearchStock);
	input.addEventListener('input', function () {
		input.value = input.value.toUpperCase();
	});

	new shinobi.autocomplete(selectorSearchStock, {
		onSearch: (input, resolve) => {
			if (input.length < 1) { return [] }
			var url = "/api/PriceBoardApi/findDataList";
			var request = {
				"recordPerPage": "20",
				"pageNum": 1,
				"filters": [{ 'colname': 'stocksymbol', 'operator': 'like', 'value': input }]
			}

			shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
				var array = JSON.parse(res).data;
				resolve(array);
			});
		},
		autoSelect: true,
		onSubmit: result => {
			document.querySelector(selectorSearchStock).value = result.stocksymbol.toUpperCase();
		},
		getResultValue: result => {
			return result.stocksymbol.toUpperCase();
		},

		renderResult: (result, props) => {
			return `
          <li ${props}>
              <div class="title has-text-primary is-size-5">
             ${result.stocksymbol}
              </div>
              <div class="subtitle">${result.securityname}</div>
          </li>`
		},
	});
};
var renderOrderTypeStatus = function (cell, row, col, all) {
	cell.classList.add('has-text-left');
	var value = cell.innerHTML;
	var listOrderType = {
		'NEW': 'Mới',
		'INPROCESS': 'Đang xử lý',
		'SUCCESS': 'Thành công',
		'PENDING': 'Chờ khớp',
		'MATCHED': 'Đã khớp',
		'EDITED': 'Đã sửa',
		'CANCELED': 'Đã hủy',
		'ERROR': 'Lỗi'

	};

	if (listOrderType[value]) {
		cell.innerHTML = listOrderType[value];
	} else {

		cell.innerHTML = value;
	}
};
var renderStockPriceDatalist = function (elem, value) {
	elem.innerHTML = value / 1000;
};
var renderStockPriceTable = function (cell, row, col, all) {
	renderStockPriceDatalist(cell, cell.innerHTML);
};
var renderProfitTable = function (cell, rowIndex, colIndex) {
	var value = cell.innerHTML;
	removeAllChild(cell);
	renderProfit(cell, value);
};
var getUserNameInUrl = function (callback) {
	var pathnameListItem = window.location.pathname.split('/');
	var nick = pathnameListItem[pathnameListItem.length - 1];
	var getUserNameRequest = {};
	getUserNameRequest.pageurl = nick;
	var returnValue;
	shinobi.api.request('/api/UserApi/getUsernameFromHomePage', JSON
		.stringify(getUserNameRequest), function (response) {
			var jsonArr = JSON.parse(response);
			if (jsonArr.username) {
				window.localStorage.setItem('currentUserDetail', jsonArr.username);
				callback(jsonArr.username);
			} else {
				shinobi.notification.notification
					.error('Không tìm thấy người dùng!');
				return false;
			}
			return returnValue;
		});
};
var getPathnameSplitIndex = function (index) {
	var pathName = window.location.pathname;
	var pathNameSplit = pathName.split('/');
	var content;
	if (index < 0) {
		content = pathNameSplit[pathNameSplit.length + index];
	}
	if (index == "length") {
		content = pathNameSplit.length;
	}
	if (index > 0) {
		content = pathNameSplit[index];
	}
	return content;
};
var renderPublicUserAssetInfo = function (querySelectorPatern, traderName) {
	var request = {};
	request.username = traderName;
	shinobi.api.request('/api/ViewUserPublicAssetApi/getUserPublicAssetInfo',
		JSON.stringify(request), function (response) {
			var jsonArr = JSON.parse(response);
			var data = JSON.stringify(jsonArr);
			shinobi.mapping.render(querySelectorPatern, data);
		});
};
var renderPublicUserInfo = function (querySelectorPatern, traderName) {
	var request = {};
	request.username = traderName;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		var jsonArr = JSON.parse(response);
		var data = JSON.stringify(jsonArr);
		shinobi.mapping.render(querySelectorPatern, data);
	});
};
var getPublicUserInfo = function (traderName, callback) {
	var request = {};
	request.username = traderName;
	// shinobi.api.request('/api/UserApi/getAllUserInfo',
	// JSON.stringify(request), function(response) {
	getAllUserInfo(request, function (response) {
		var jsonArr = JSON.parse(response);
		if (typeof callback == 'function') {
			callback(jsonArr);
		}
	})
};
var changeFeeType = function (value) {
	var content;
	switch (value) {
		case 'isfollowcopytrade':
		case 'COPY_TRADE':
			content = 'Copy trade';
			break;
		case 'TRAINING':
			content = 'Đào tạo';
			break;
		case 'isfollowblog':
		case 'INVESTING_BLOG':
			content = 'Blog đầu tư';
			break;
		case 'EVENT':
			content = 'Sự kiện';
			break;
		case 'ORTHER':
			content = 'Phí khác';
			break;
		case 'TRADER_POST_FEE':
			content = 'Phí bài viết';
			break;
		case 'COPY_TRADE_FREQUENT_FEE':
			content = 'Phí CopyTrade';
			break;
		default:
			content = 'Phí dịch vụ không xác định';
			break;
	}
	return content;
};
var changeOrderStatus = function (value) {
	var content;
	switch (value) {
		case 'INPROCESS':
			content = 'Copy trade';
			break;
		case 'TRAINING':
			content = 'Đào tạo';
			break;
		case 'isfollowblog':
		case 'INVESTING_BLOG':
			content = 'Blog đầu tư';
			break;
		case 'EVENT':
			content = 'Sự kiện';
			break;
		case 'ORTHER':
			content = 'Phí khác';
			break;
		case 'TRADER_POST_FEE':
			content = 'Phí bài viết';
			break;
		case 'COPY_TRADE_FREQUENT_FEE':
			content = 'Phí CopyTrade';
			break;
		default:
			content = 'Phí dịch vụ không xác định';
			break;
	}
	return content;
};
var renderFeeTypeDatalist = function (elem, value, attr) {
	var content = changeFeeType(value);
	elem.innerHTML = content;
};
var renderFeeTypeTable = function (cell, row, col, allData) {
	var value = cell.innerHTML;
	cell.innerHTML = '';
	renderFeeTypeDatalist(cell, value);
};
var buildTransStatus = function (cell, rowindex, colindex, allData) {
	cell.innerHTML = shinobi.aladinUtil.changeTransStatus(cell.innerHTML);
	var rowData = allData[rowindex];
	if (rowData.orthercomment.trim() != '') {
		var span = document.createElement('span');
		span.setAttribute('class',
			'tooltip is-tooltip-multiline icon has-text-warning');
		span.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
		span.setAttribute('data-tooltip', rowData.orthercomment.trim());
		cell.appendChild(span);
	}
};
var renderSettlementCode = function (elem, value) {
	elem.innerHTML = value;
	var orderId = elem.parentNode.querySelectorAll('[snb-key=orderid]')[0].innerHTML;
	var aTag = elem.parentNode;
	var userType = window.localStorage.getItem("loggedUserType");
	var pageurl = "accountrequestserviceformmanage";
	aTag.setAttribute("href", "/private/" + userType + pageurl + "/" + orderId);
};
var gotoOrderDetail = function (elem, value) {
};
var renderAmountDatalist = function (elem, value, attr) {
	if (value == 0) {
		elem.innerHTML = shinobi.language.free;
	} else {
		elem.innerHTML = format(value);
	}
};
var removeAllClassListInList = function (listElem, classList) {
	for (var i = 0; i < listElem.length; i++) {
		for (var j = 0; j < classList.length; j++) {
			listElem[i].classList.remove(classList[j]);
		}
	}
};
var addAllClassListInList = function (listElem, classList) {
	for (var i = 0; i < listElem.length; i++) {
		for (var j = 0; j < classList.length; j++) {
			listElem[i].classList.add(classList[j]);
		}
	}
};
var renderCopyTradeActionDatalist = function (elem, value, attr) {
	var content;
	switch (value) {
		case 'AUTOMATICAL':
			content = 'Tự đặt lệnh';
			break;
		case 'MANUAL':
			content = 'Thông báo đặt lệnh';
			break;
		default:
			break;
	}
	elem.innerHTML = content;
};
var goToPageFollowUserType = function (investorPageLink, traderPageLink) {
	var userType = window.localStorage.getItem('loggedUserType');
	if (userType == 'investor') {
		window.location.href = investorPageLink;
	} else {
		window.location.href = traderPageLink;
	}
};
var goToPageWithUserType = function (elem, pageGeneralName, beforeGeneralName,
	afterGeneralName) {
	var userType = window.localStorage.getItem('loggedUserType');
	var url = pageGeneralName;
	if (!beforeGeneralName && !afterGeneralName) {
		url = '/private/' + userType + pageGeneralName;
	}
	if (beforeGeneralName) {
		url = beforeGeneralName + url;
	}
	if (afterGeneralName) {
		url = url + afterGeneralName;
	}
	elem.onclick = function () {
		window.location.href = url;
	}
};
var er = {
	'addEventDropdown': function (id) {
		var container = document.getElementById(id);
		var button = container.querySelector('[aria-controls=dropdown-menu]');
		button.onclick = function () {
			container.classList.toggle('is-active');
		}
	},
	'buildPublicChat': function (elem, invitedUser) {
		er
			.checkAuthen(function (response) {
				if (JSON.parse(response) == null) {
					elem.classList.remove('is-hidden');
					elem.onclick = function () {
						shinobi.notification.notification
							.error(er.suggestLogin);
					}
				} else {
					if (invitedUser != 'system') {
						var loggedUserName = (JSON.parse(response))['username'];
						if (loggedUserName != invitedUser) {
							er
								.getPublicChatInfo(
									invitedUser,
									function (publicRoomChatInfo) {
										var data = JSON
											.parse(publicRoomChatInfo);
										if (data.chatroom) {
											elem.classList
												.remove('is-hidden');
											var roomId = data.chatroom['roomid'];
											elem.setAttribute(
												'roomid',
												roomId);
										} else {
											if (data.contactstatus != 'BLOCKED_STRANGER'
												&& data.contactstatus != 'NOT_TRADER_AND_INVESTOR') {
												elem
													.setAttribute(
														'inviteduser',
														invitedUser);
												elem.classList
													.remove('is-hidden');
											} else {
												elem.classList
													.add('tooltip');
												elem
													.setAttribute(
														'data-tooltip',
														'Không thể chat với người dùng chặn bạn hoặc bị chặn');
												elem.classList
													.replace(
														'has-text-orange',
														'has-text-grey');
												elem.innerHTML = '<i class="fa fa-comment-slash"></i>';
											}
										}
										elem.onclick = function () {
											if (this
												.hasAttribute('roomid')) {
												er
													.activeChatRoom(this
														.getAttribute('roomid'));
											} else if (this
												.hasAttribute('inviteduser')) {
												er
													.createStrangerContactRoomChat(
														this,
														invitedUser);
											}
										}
									});
						}
					}
				}
			});
	},
	'getPublicChatInfo': function (value, callback) {
		var request = {};
		request.inviteduser = value;
		shinobi.api.request(
			'/authenapi/ChatRoomManagementApi/getContactStatusInfo', JSON
				.stringify(request), function (response) {
					if (typeof callback == 'function') {
						callback(response);
					}
				});
	},
	'createStrangerContactRoomChat': function (elem, inviteduser) {
		var request = {};
		request.inviteduser = inviteduser;
		shinobi.api
			.request(
				'/authenapi/ChatRoomManagementApi/createStrangerContactRoomChat',
				JSON.stringify(request), function (response) {
					var data = JSON.parse(response);
					if (data.roomid) {
						var roomId = data.roomid;
						elem.setAttribute('roomid', roomId);
						elem.onclick();
					}
				});
	},
	'getValueBulmaCalendar': function (elem, param) {
		if (elem.value.trim() == '') {
			return false;
		} else {
			var returnObject = {};
			if (param.hasOwnProperty('isRange') == true) {
				if (elem.value.split('-')[0] && elem.value.split('-')[1]) {
					var startDate = elem.value.split('-')[0].trim().replace(
						/\//g, '-');
					var endDate = elem.value.split('-')[1].trim().replace(
						/\//g, '-');
					returnObject.startdate = startDate;
					returnObject.enddate = endDate;
					return returnObject;
				}
			}
		}
	},
	'renderValueBulmaCalendar': function (elem, value) {
		var info = elem.getAttribute('id') + '-info-render';
		var infoElem = document.getElementsByClassName(info)[0];
		if (infoElem.hasAttribute('is-range')) {
			if (infoElem.getAttribute('is-range') == 'true') {
				var startDate = infoElem.getAttribute('startdate');
				var endDate = infoElem.getAttribute('enddate');
				var startDateInput = elem.parentElement
					.querySelectorAll('.datetimepicker-dummy-input')[0];
				var endDateInput = elem.parentElement
					.querySelectorAll('.datetimepicker-dummy-input')[1];
				var startDateFormat = shinobi.aladinUtil.getFormatDate(
					startDate, 'dd/mm/yyyy');
				var endDateFormat = shinobi.aladinUtil.getFormatDate(endDate,
					'dd/mm/yyyy');
				startDateInput.value = startDateFormat;
				endDateInput.value = endDateFormat;
				elem.value = startDateFormat + ' - ' + endDateFormat;
			}
		}
	},
	'activeChatRoom': function (roomid) {
		var chatBoxColumn = document.getElementById('chatBoxColumn');
		chatBoxColumn.classList.remove('is-hidden');
		var chatMenuButton = document.getElementById('chatMenuButton');
		chatMenuButton.click();
		var listRoomChat = document.getElementById('listRoomChat');
		var listLi = listRoomChat.getElementsByClassName('room-chat');
		setTimeout(function () {
			for (var i = 0; i < listLi.length; i++) {
				if (listLi[i].getAttribute('id') == roomid) {
					listLi[i].click();
				}
			}
		}, 1000);
	},
	'investorRegistration': {
		'investorRegistration': '/page/investorregistration'
	},
	'login': {
		'login': '/page/login',
	},
	'traderlistingpage': {
		'traderlistingpage': '/page/traderlisting',
	},
	'investorlisting': {
		'investorlisting': '/page/investorlisting',
	},
	'suggestLogin': 'Bạn cần đăng nhập để thực hiện thao tác này!',
	'convertUsingServiceToVn': function (value) {
		var content;
		switch (value) {
			case 'NEED_TO_EXTEND':
				content = 'Gia hạn dịch vụ';
				break;
			case 'NEED_TO_SETTLE':
				content = 'Thanh toán dịch vụ';
				break;
			default:
				content = '';
				break;
		}
		return content;
	},
	'convertStringToDate': function (time) {
		return new Date(Date.parse(time.replace('-', '/').replace('-', '/')));
	},
	'buildChatTime': function (time) {
		var inputDate = er.convertStringToDate(time);
		var currentDate = new Date();
		var formatInput = shinobi.aladinUtil.getFormatDate(inputDate,
			'mm-dd-yyyy');
		var formatCurrent = shinobi.aladinUtil.getFormatDate(currentDate,
			'mm-dd-yyyy');
		if (formatInput == formatCurrent) {
			var inputHour = shinobi.aladinUtil
				.getFormatDate(inputDate, 'hh:mm');
			return inputHour;
		} else {
			var inputDateHour = shinobi.aladinUtil.getFormatDate(inputDate,
				'dd-mm-yyyy hh:mm');
			return inputDateHour;
		}
	},
	'renderServiceUsingStatus': function (elem, value) {
		if (value) {
			var content = er.convertUsingServiceToVn(value);
			elem.innerHTML = content;
		}
	},
	'reFormatDate': function (input, inputFormat, outputFormat) {
		var date = input.substring(inputFormat.indexOf('d'), inputFormat
			.lastIndexOf('d') + 1);
		var month = input.substring(inputFormat.indexOf('m'), inputFormat
			.lastIndexOf('m') + 1);
		var year = input.substring(inputFormat.indexOf('y'), inputFormat
			.lastIndexOf('y') + 1);
		var outPut = outputFormat.replace('dd', date).replace('mm', month)
			.replace('yyyy', year);
		return outPut;
	},
	'renderCopyTradeStatus': function (elem, value) {
		var request = {};
		request.feeid = value;
		request.publisher = elem.parentNode
			.querySelectorAll('[snb-key=publisher]')[0].innerHTML;
		shinobi.api
			.request(
				'/authenapi/ServiceUsingManagementApi/getCopyTradeServiceUsingDetailStatus',
				JSON.stringify(request),
				function (response) {
					var jsonArr = JSON.parse(response);
					if (jsonArr.serviceusingstatus == 'FREE_SERVICE') {
						elem.innerHTML = 'Dịch vụ miễn phí';
					} else if (jsonArr.serviceusingstatus == 'EXECUTING_PORTFOLIO') {
						elem.innerHTML = 'Đang xử lí';
					}
					if (jsonArr.serviceusingstatus == 'NEED_TO_SETTLE') {
						elem.innerHTML = '<p><a class="button open-order-button is-small is-link">Cần thanh toán</a></p>';
						elem
							.getElementsByClassName('open-order-button')[0].onclick = function () {
								shinobi.fragmentselectfollowrelationtypemodalrender
									.redirectPaymentPage(value);
							}
						var removeButton = document.createElement('a');
						removeButton.setAttribute('class',
							'button is-text is-small');
						removeButton.innerHTML = 'Xóa đơn hàng';
						elem.appendChild(removeButton);
						removeButton.onclick = function () {
							var data = jsonArr.followdetail;
							var requestDelete = {};
							requestDelete.feetype = data.feetype;
							requestDelete.subscriber = data.subscriber;
							requestDelete.publisher = data.publisher;
							shinobi.api
								.request(
									'/authenapi/AladinProductOrderApi/deleteServiceOrder',
									JSON
										.stringify(requestDelete),
									function (response) {
										if (response == 'update success') {
											shinobi.notification.notification
												.info('Xóa đơn hàng thành công');
											removeButton.parentNode.parentNode.classList
												.add('is-hidden');
										}
									});
						}
					} else if (jsonArr.serviceusingstatus == 'NEED_TO_EXTEND') {
						var exetendbutton = document.createElement('a');
						exetendbutton.setAttribute('class',
							'button  is-danger is-small');
						exetendbutton.innerHTML = 'Gia hạn';
						elem.appendChild(exetendbutton);
						var note = document.createElement('p');
						note.setAttribute('class', ' has-text-danger ');
						note.innerHTML = 'Còn ' + jsonArr.remainday
							+ ' ngày nữa';
						elem.appendChild(note);
						exetendbutton.onclick = function () {
							shinobi.fragmentextendrelationmodalrender
								.build(elem, jsonArr.followdetail);
						}
					} else {
						var data = jsonArr.followdetail;
						shinobi.fragmentaccountfollowingtraderender
							.buildServiceTimeContainer(elem, data);
					}
				});
	},
	'renderUnFollowButton': function (elem, value) {
		var request = {};
		request.feeid = value;
		request.publisher = elem.parentNode
			.querySelectorAll('[snb-key=publisher]')[0].innerHTML;
		shinobi.api
			.request(
				'/authenapi/ServiceUsingManagementApi/getCopyTradeServiceUsingDetailStatus',
				JSON.stringify(request),
				function (response) {
					if (JSON.parse(response).followdetail.isactive == true) {
						shinobi.fragmentaccountfollowingtraderender
							.buildUnFollowService(elem, JSON
								.parse(response).followdetail);
					}
				});
	},
	'renderDetailRating': function (elem, value, attr) {
		var spanStarContainer = document.createElement('span');
		spanStarContainer.setAttribute('class', 'star-container');
		elem.appendChild(spanStarContainer);
		var spanNumberRating = document.createElement('span');
		spanNumberRating.setAttribute('class', 'count-rating-container');
		elem.appendChild(spanNumberRating);
		var userName = value;
		var request = {};
		request.username = userName;
		shinobi.api.request('/api/ViewTraderRatingApi/getUserOverViewRating',
			JSON.stringify(request), function (response) {
				var jsonArr = JSON.parse(response);
				var averageratingpoint = jsonArr.averageratingpoint;
				er.buildRating(spanStarContainer, averageratingpoint);
				spanNumberRating.innerHTML = '('
					+ jsonArr.totalratingmember + ')';
				spanNumberRating.onclick = function () {
					window.location.href = '/page/ratingdetail/'
						+ jsonArr.homepageurl;
				}
			});
	},
	'getCurrentDayOfWeek': function () {
		var toDay = new Date();
		var currentDayOfWeek = toDay.getDay();
		// Sunday - Saturday : 0 - 6
		return currentDayOfWeek;
		// expected output: 2
	},
	'getParentNodeWithKey': function (elem, key, callback) {
		if (elem.hasAttribute(key)) {
			if (typeof callback == 'function') {
				callback(elem);
			}
		} else {
			if (elem.parentElement) {
				er.getParentNodeWithKey(elem.parentElement, key, callback);
			}
		}
	},
	'buildRating': function (elem, value) {
		value = value / 2;
		var starIconHtmlString = '<span class="icon is-small has-text-warning"><i class="fas fa-star"></i></span>';
		var noneStarIconHtmlString = '<span class="icon is-small has-text-light"><i class="fas fa-star"></i></span>';
		var numberRating = value;
		if (value > 5) {
			numberRating = 5;
		}
		if (value < 0 || value == 0) {
			numberRating = 0;
		}
		var contentRating = '';
		for (var i = 0; i < numberRating; i++) {
			contentRating += starIconHtmlString;
		}
		for (var j = 0; j < (5 - numberRating); j++) {
			contentRating += noneStarIconHtmlString;
		}
		elem.innerHTML = contentRating;
	},
	'renderUserType': function (elem, value, attr) {
		var userType = window.localStorage.getItem('loggedUserType');
		er.convertUserTypeDatalist(elem, userType);
	},
	'convertUserTypeDatalist': function (elem, value) {
		var content;
		switch (value.toLowerCase()) {
			case 'trader':
				content = 'Nhà tư vấn';
				break;
			case 'investor':
				content = 'Nhà đầu tư';
				break;
			case 'stock_com_admin':
				content = 'Tổ chức hợp tác';
				break;
			default:
				break;
		}
		elem.innerHTML = content;
	},
	'addEventFollowTable': function (cell, rowIndex, colIndex) {
		var value = cell.innerHTML;
		removeAllChild(cell);
		var a = document.createElement('a');
		a.setAttribute('class', 'button is-link  is-small');
		a.innerHTML = 'Theo';
		cell.appendChild(a);
		shinobi.fragmentselectfollowrelationtypemodalrender.addEventFollow(a,
			value);
	},
	'renderFreeOrUnFreeAmount': function (elem, value, attr) {
		var container = elem.parentNode.parentNode.parentNode.parentNode;
		var publisher = container.querySelectorAll('[snb-key=publisher]')[0].innerHTML;
		var feetype = container.querySelectorAll('[snb-key=feetype]')[0].innerHTML;
		var request = {};
		request.traderusername = publisher;
		request.feetype = feetype;
		shinobi.api
			.request(
				'/authenapi/TraderBuildFeeScheduleApi/checkTraderContainsUnFreeFeeSchedule',
				JSON.stringify(request), function (response) {
					var content;
					if (response == "true") {
						content = "Có phí";
					} else {
						content = shinobi.language.free;
					}
					elem.innerHTML = content;
				});
	},
	'getValueNumberCleaveFormat': function (elem) {
		return elem.value.trim().replace(/,/g, '');
	},
	'formatNameChatContainerHeader': function (elem, value) {
		var content = value;
		/*
		 * if (value.length > 15) {
		 * 
		 * content = value.slice(0, 12) + '...'; }
		 */
		elem.innerHTML = content;
	},
	'renderFeeValue': function (elem, value, attr) {
		var feeAmount = elem.parentNode.querySelectorAll('[snb-key=amount]')[0].innerHTML;
		var feeFequency = value;
		var content = 'Dịch vụ miễn phí';
		if (feeAmount > 0) {
			content = format(feeAmount) + '/' + convertFequency(feeFequency);
		}
		elem.innerHTML = content;
	},
	'checkAuthen': function (callback) {
		if (!shinobi.global.checkAuthen) {
			if (!shinobi.global.isCheckAuthen) {
				if (shinobi.global.isCheckAuthen == false) {
					setTimeout(function () {
						er.checkAuthen(callback);
					}, 10);
				} else {
					var request = {};
					shinobi.global.isCheckAuthen = false;
					shinobi.api.request('/api/UserApi/checkAuthen', JSON
						.stringify(request), function (response) {
							shinobi.global.checkAuthen = response;
							shinobi.global.isCheckAuthen = true;
							callback(response);
						});
				}
			} else {
				callback(shinobi.global.checkAuthen);
			}
		} else {
			callback(shinobi.global.checkAuthen);
		}
	},
	'renderPostStatusDatalist': function (elem, value, attr) {
		var content;
		var classList;
		switch (value) {
			case 'WAITING_FOR_AUDIT':
				content = 'Chờ duyệt';
				classList = 'is-light';
				break;
			case 'AVAILABLE':
				content = 'Đã duyệt';
				classList = 'is-success';
				break;
			case 'REJECTED':
				content = 'Từ chối';
				classList = 'is-danger';
				break;
			default:
				break;
		}
		elem.innerHTML = content;
		elem.classList.add(classList);
	},
	'activePathTabs': function () {
		var listTabs = document.querySelectorAll('.tabs.active-pathname-tabs');
		for (var i = 0; i < listTabs.length; i++) {
			var currentTab = listTabs[i].querySelector('[href='
				+ window.location.pathname.replace(/\//g, '\\/') + ']');
			if (currentTab) {
				currentTab.parentElement.classList.add('is-active');
			}
		}
	},
	'getFormatDatePickerInput': function (datepickerId, format) {
		var input = document.getElementById(datepickerId + '-inputDivID');
		var dateValue = input.value;
		var date = dateValue.split('-')[0];
		var month = dateValue.split('-')[1];
		var year = dateValue.split('-')[2];
		var dateString = month + '-' + date + '-' + year;
		return shinobi.aladinUtil.getFormatDate(dateString, format);
	},
	'getDatePickerValue': function (item) {
		var format = 'yyyy-mm-dd';
		var input = document.getElementById(item.id + '-inputDivID');
		var dateValue = input.value;
		var date = dateValue.split('-')[0];
		var month = dateValue.split('-')[1];
		var year = dateValue.split('-')[2];
		var dateString = year + '-' + month + '-' + date;
		return dateString;
		// return shinobi.aladinUtil.getFormatDate(dateString, format);
		// return er.getFormatDatePickerInput(item.id, format);
	},
	'renderFeeIconFromListFeeType': function (elem, value) {
		var jsonArr = JSON.parse(value);
		for (var i = 0; i < jsonArr.length; i++) {
			var currentData = jsonArr[i][0];
			var iconLink;
			if (currentData.feetype) {
				var iconSpanContainer = document.createElement('span');
				iconSpanContainer.setAttribute('class', 'service-icon tooltip');
				iconSpanContainer.setAttribute('data-tooltip',
					changeFeeType(currentData.feetype));
				var imageContainer = document.createElement('img');
				iconSpanContainer.appendChild(imageContainer);
				switch (currentData.feetype) {
					case 'INVESTING_BLOG':
						iconLink = blogIconImageLink;
						break;
					case 'COPY_TRADE':
						iconLink = copyTradeIconImageLink;
						break;
					default:
						break;
				}
				imageContainer.setAttribute('src', iconLink);
				elem.appendChild(iconSpanContainer);
			}
		}
	},
	'getListFeeIcon': function (elem, value) {
		er
			.checkAuthen(function (response) {
				if (response != 'null') {
					var request = {};
					request.traderusername = value;
					shinobi.api
						.request(
							'/authenapi/TraderCustomerApi/getAllServiceCustomerIsFollowing',
							JSON.stringify(request), function (
								response) {
							er.renderFeeIconFromListFeeType(
								elem, response);
						});
				}
			});
	},
	'listingTimeFrame': function (value) {
		var content;
		switch (value) {
			case 'ONE_DAY':
				content = 'phiên gần nhất';
				break;
			case 'ONE_WEEK':
				content = 'tuần';
				break;
			case 'ONE_MONTH':
				content = 'tháng';
				break;
			case 'THREE_MONTH':
				content = 'ba tháng';
				break;
			case 'SIX_MONTH':
				content = 'sáu tháng';
				break;
			case 'ONE_YEAR':
				content = 'một năm';
				break;
			default:
				break;
		}
		return 'Xếp hạng ' + content;
	},
	'postFiterConvert': function (value) {
		var content;
		switch (value) {
			case 'allpost':
				content = 'Tất cả bài viết';
				break;
			case 'hasfeepost':
				content = 'Bài viết có phí';
				break;
			case 'freepost':
				content = 'Bài viết miễn phí';
				break;
			case 'purchased':
				content = 'Bài viết đã mua';
				break;
			default:
				break;
		}
		return content;
	},
	'renderAdminPostCheckUrl': function (elem, value, attr) {
		if (value.trim == '') {
			return;
		} else {
			var url = value;
			var pageCheckUrl = url.replace(blogPostPageUrl,
				adminPostCheckPageUrl);
			var container = elem.parentNode;
			var adminPostCheckButtonElemList = container
				.querySelectorAll('[snb-target="goToPostCheckPage"');
			for (var i = 0; i < adminPostCheckButtonElemList.length; i++) {
				adminPostCheckButtonElemList[i].onclick = function () {
					window.location.href = pageCheckUrl;
				}
			}
		}
	},
	'createSimpleBar': function (patern) {
		var listElem = document.querySelectorAll(patern);
		for (var i = 0; i < listElem.length; i++) {
			var item = new SimpleBar(listElem[i]);
		}
	},
	'confirm': function (callback, options) {
		var confirmPanel = document.getElementById('confirmPanel');
		shinobi.aladinUtil.modalEventListener(confirmPanel);
		if (options) {
			if (options.title) {
				confirmPanel.getElementsByClassName('modal-card-title')[0].innerHTML = options.title;
			}
			if (options.content) {
				confirmPanel.getElementsByClassName('modal-card-body')[0].innerHTML = options.content;
			}
			if (options.yescontent) {
				confirmPanel.getElementsByClassName('yes')[0].innerHTML = options.yescontent;
			}
			if (options.nocontent) {
				confirmPanel.getElementsByClassName('cancel')[0].innerHTML = options.nocontent;
			}
			if (options.modalsize) {
				confirmPanel.classList.add(options.modalsize);
			}
			if (options.initfunction) {
				options.initfunction(confirmPanel);
			}
		} else {
			confirmPanel.getElementsByClassName('modal-card-title')[0].innerHTML = 'Cảnh báo';
			confirmPanel.getElementsByClassName('modal-card-body')[0].innerHTML = 'Bạn chắc chắn?';
			confirmPanel.getElementsByClassName('yes')[0].innerHTML = 'Xác nhận';
			confirmPanel.getElementsByClassName('cancel')[0].innerHTML = 'Hủy';
		}
		confirmPanel.classList.add('is-active');
		var yes = confirmPanel.getElementsByClassName('yes')[0];
		yes.focus();
		yes.onclick = function () {
			if (typeof callback == 'function') {
				confirmPanel.classList.remove('is-active');
				callback();
			}
		}
	},
	'runSnbReload': function (elem) {
		if (elem.hasAttribute('snb-reload')) {
			var reloadFunction = elem.getAttribute('snb-reload');
			if (elem.hasAttribute('snb-reload-key')) {
				var reloadKey = elem.getAttribute('snb-reload-key');
				if (reloadKey == 'this') {
					var reloadKeyValue = elem;
					eval(reloadFunction)(reloadKeyValue);
				}
			} else {
				eval(reloadFunction)();
			}
		}
	},
	'renderListFeeIsActive': function (elem, value) {
		var content = '';
		var listFee = elem.parentNode
			.querySelectorAll('[snb-render-key=feeType]');
		for (var i = 0; i < listFee.length; i++) {
			if (listFee[i].innerHTML == "true") {
				var feeType = listFee[i].getAttribute('snb-key');
				content = content + '/' + changeFeeType(feeType);
			}
		}
		content = content.slice(1, content.length);
		elem.innerHTML = content;
	},
	'addEventTabs': function (patern, renderType) {
		var elemList = document.querySelectorAll(patern);
		switch (renderType) {
			case 'hrefUserType':
				er.addEventHrefUserType(patern, elemList);
				break;
			default:
				break;
		}
	},
	'addEventHrefUserType': function (patern, elemList) {
		var item = elemList[0];
		var listTab = item.querySelectorAll('[snb-tab]');
		var json = {};
		var userType = window.localStorage.getItem('loggedUserType');
		for (var i = 0; i < listTab.length; i++) {
			var tab = listTab[i];
			if (tab.hasAttribute('snb-tab')) {
				var value = tab.getAttribute('snb-tab');
				json[value] = value;
				json[value + 'href'] = '/private/' + userType + value;
			}
		}
		shinobi.mapping.render(patern, JSON.stringify(json))
	},
	'renderCurrentCashPlaceHolder': function (elem, value) {
		elem.setAttribute('placeholder', 'Vốn khả dụng: ' + format(value));
	},
	'renderCopyTradeMessage': function (elem, value) {
		var copytradeSettingMessageContainer = document
			.getElementById('copytradeSettingMessageContainer');
		var copytradecapital = document.getElementById('copytradecapital');
		if (value.trim() == '') {
			copytradeSettingMessageContainer.classList.add('is-hidden');
		} else {
			copytradeSettingMessageContainer.classList.remove('is-hidden');
		}
		var currentCash = elem.parentNode
			.querySelectorAll('[snb-key=currentcash')[0].innerHTML;
		if (Number(currentCash) < 100000) {
			copytradecapital.classList.add('is-danger');
			copytradecapital.disabled = true;
		} else {
			copytradecapital.classList.remove('is-danger');
			copytradecapital.disabled = false;
		}
		elem.innerHTML = value;
	},
	'renderMaxQuantity': function (elem, value) {
		if (isNaN(Number(value))) {
			elem.parentNode.classList.add('is-hidden');
		} else {
			elem.parentNode.classList.remove('is-hidden');
			elem.innerHTML = format(value);
		}
	},
	'renderPriceDatalist': function (elem, value) {
		if (value == 0) {
			elem.innerHTML = shinobi.language.free;
		} else {
			elem.innerHTML = format(value) + 'VNĐ';
		}
	},
	'showDownloadFileModal': function () {
		var confirmDownloadFileModal = document
			.getElementById('confirmDownloadFileModal');
		confirmDownloadFileModal.classList.add('is-active');
		var button = confirmDownloadFileModal.querySelector('.button.is-white');
		// button.classList.remove('is-hidden');
		button.classList.add('is-loading');
		var shinobinotification = document
			.getElementById('shinobinotification');
		setTimeout(function () {
			if (shinobinotification.getAttribute('class').includes(
				'errormessage')) {
				confirmDownloadFileModal.classList.remove('is-active');
			}
		}, 2000);
	},
	'renderDownloadFileModal': function (response) {
		var confirmDownloadFileModal = document
			.getElementById('confirmDownloadFileModal');
		confirmDownloadFileModal.classList.add('is-active');
		var button = confirmDownloadFileModal
			.getElementsByClassName('is-loading')[0];
		if (response == 'update success') {
			// button.classList.add('is-hidden');
			button.classList.remove('is-loading');
			button.innerHTML = response;
		} else {
			confirmDownloadFileModal.classList.remove('is-active');
		}
	},
	'renderRemovePinLevel': function (elem, value) {
		var pinLevel = value;
		/* if (pinLevel != 1) { */
		elem.classList.remove('is-hidden');
		elem.onclick = function () {
			if (confirm('Xác nhận xóa đánh dấu')) {
				var postId = elem.parentNode
					.querySelectorAll('[snb-key=postid]')[0].innerHTML;
				var request = {};
				request.postid = postId;
				shinobi.api
					.request(
						'/authenapi/SystemAuditTraderPostApi/deletePinedTraderPost',
						JSON.stringify(request), function (response) {
							if (response == 'update success') {
								shinobi.notification.notification
									.info('Cập nhật thành công!');
								location.reload()
							}
						});
			}
		}
		/* } */
	},
	'renderDatePicker': function (elem, value) {
		var input = elem.getElementsByClassName('inputDivClass')[0];
		input.value = shinobi.aladinUtil.getFormatDate(value, 'dd-mm-yyyy');
	},
	'changeAllKeyChildren': function (array, keysMap, callback) {
		for (var i = 0; i < array.length; i++) {
			// var item = jsonArr[i];
			er.renameKeys(keysMap, array[i]);
			if (array[i].children && array[i].children.length != 0) {
				er.changeAllKeyChildren(array[i].children, keysMap);
			}
		}
		if (typeof callback == 'function') {
			callback(array);
		}
	},
	'renameKeys': function (keysMap, obj) {
		var listOldKey = Object.keys(keysMap);
		var listNewKey = Object.values(keysMap);
		for (var i = 0; i < listOldKey.length; i++) {
			var oldkey = listOldKey[i];
			var newKey = listNewKey[i];
			var oldkeyValue = obj[oldkey];
			obj[newKey] = oldkeyValue;
		}
	},
	'getAllObjectMenu': function (resultArray, sourceArray) {
		for (var i = 0; i < sourceArray.length; i++) {
			resultArray.push(sourceArray[i]);
			if (sourceArray[i].children && sourceArray[i].children.length != 0) {
				er.getAllObjectMenu(resultArray, sourceArray[i].children);
			}
		}
	},
	'getTokenValue': function (input) {
		var numberInput = Number(input.slice(1, input.length - 1));
		var LastNumberInput = Number(numberInput).toString().split('').pop();
		var returnValue = numberInput >>> LastNumberInput;
		return returnValue;
	},
	'encodeURIComponent': function (uri) {
		var uri_enc = encodeURIComponent(uri);
		return uri_enc;
	},
	'decodeURIComponent': function (uri_enc) {
		var uri = encodeURIComponent(uri_enc);
		return uri;
	},
	'addEventSearchUser': function (elemId) {
		var elem = document.getElementById(elemId);
		if (elem.getAttribute('type') == 'tags') {
			var interval = setInterval(function () {
				var inputBox = elem.nextElementSibling;
				if (inputBox) {
					var input = inputBox.getElementsByTagName('input')[0];
					er.addEventSearchUserElem(input, elem);
					clearInterval(interval);
				}
			}, 100);
		} else {
			er.addEventSearchUserElem(elem, elem);
		}
	},
	'addResultList': function (elem, data, elemInputFirstDeclare) {
		function insertAfter(el, referenceNode) {
			referenceNode.parentNode
				.insertBefore(el, referenceNode.nextSibling);
		}
		var container;
		if (elem.parentNode.getElementsByClassName('result-absolute-container').length > 0) {
			container = elem.parentNode
				.getElementsByClassName('result-absolute-container')[0];
		} else {
			container = document.createElement('div');
			container.setAttribute('class', 'result-absolute-container');
			insertAfter(container, elem);
		}
		container.parentNode.classList.add('is-relative');
		if (data.length == 0) {
			container.remove();
			elem.setAttribute('refid', '');
		} else {
			container.innerHTML = '';
			for (var i = 0; i < data.length; i++) {
				if (i < 3) {
					elem.setAttribute('refid', data[i].id);
					var record = document.createElement('div');
					record.setAttribute('class', 'level is-marginless');
					record.innerHTML = '<div class="level-left chat-avatar"><img src="'
						+ data[i].avatarlink
						+ '" class="chat-room-avatar margin-right-05rem"></div><div class="level-item ">'
						+ data[i].firstname
						+ ' '
						+ data[i].lastname
						+ '</div>';
					container.appendChild(record);
				}
			}
			elem.onblur = function () {
				container.classList.add('is-hidden');
			}
			elem.onclick = function () {
				container.classList.remove('is-hidden');
			}
		}
	},
	'addEventSearchUserElem': function (elem, elemInputFirstDeclare) {
		var api = '/api/UserApi/searchUserById';
		elem.onkeyup = function () {
			var value = elem.value.trim();
			if (value != '') {
				var request = {};
				request.searchkey = value;
				shinobi.api.request(api, JSON.stringify(request), function (
					response) {
					var jsonArr = JSON.parse(response);
					er.addResultList(elem, jsonArr, elemInputFirstDeclare);
				});
			} else {
				er.addResultList(elem, [], elemInputFirstDeclare);
			}
		}
	},
};
var erLib = {

	'data' : [],

	'reportLink' : '/static/report/',

	'renderCheckbox' : function(elem, row, col) {

		elem.innerHTML = '<label class="checkbox"><input type="checkbox"></label>';

	},

	'renderAllowDenyTable' : function(cell, row, col) {

		if (cell.innerHTML == 'allow') {

			cell.innerHTML = 'Cho phép';
		}
		if (cell.innerHTML == 'deny') {

			cell.innerHTML = 'Chặn';
		}
	},

	'showConfirmModal' : function(callback) {

		var confirmPanel = document.getElementById('confirmPanel');

		confirmPanel.classList.add('is-active');

		var yesButton = confirmPanel.getElementsByClassName('yes')[0];

		yesButton.onclick = function() {

			confirmPanel.classList.remove('is-active');

			callback();
		}

	},

	'createDataTreeRelation' : function(data, dataParent, callback) {

		if (!dataParent) {

			data.name = data.id;

		} else {

			var currentId = data.id;

			data.name = currentId;
			data.id = dataParent.id + '/' + currentId;

		}

		for (var i = 0; i < data.children.length; i++) {

			erLib.createDataTreeRelation(data.children[i], data);
		}

		if (typeof callback == 'function') {

			callback(data);
		}
	},

	'getFullPathSelectedNodeTree' : function(tree, callback) {

		var data = tree.treeNodes;

		var result = [];

		erLib.getFullPathSelected(result, data, '');

		callback(result);

	},

	'getFullPathSelected' : function(result, data, callback) {

		for (var i = 0; i < data.length; i++) {

			if (data[i].status == 2) {

				result.push(data[i].id);

			}

			if (data[i].status == 1) {

				erLib.getFullPathSelected(result, data[i].children, callback);
			}

		}

		if (typeof callback == 'function') {

			callback(result);
		}

	},

	'getFullAreaTreeData' : function(callback) {

		var request = {};

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);

					if (typeof callback == 'function') {

						callback(jsonArr);
					}
				});
	},

	'getAgencyAreaTreeData' : function(requestInput, callback) {

		var request = requestInput;

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);

					if (typeof callback == 'function') {

						callback(jsonArr);
					}
				});
	},

	'createFullAreaTree' : function(patern, callback) {

		erLib.getListProvinceDataTree(function(provinceData) {

			for (var i = 0; i < provinceData.length; i++) {

				erLib.getListDicTristDataTree(provinceData, i, function(
						dictristData) {

					for (var j = 0; j < dictristData.length; j++) {

						erLib.getListPrecinctDataTree(dictristData, j,
								function() {

									shinobi.createstafftreerender.tree = erLib
											.createTree(patern, provinceData);

									var container = document
											.querySelectorAll(patern)[0];

									shinobi.createstafftreerender
											.closeAllNode(container);

									if (typeof callback == 'function') {

										callback(tree);
									}

								});

					}

				});
			}

		});

	},

	'createTree' : function(patern, data) {

		var tree = new Tree(patern, {

			// root data
			data : data,
			loaded : function() {

				// pre-selected nodes
				// this.values = [ 'HCM_TPH', 'HCM_006_0009' ];

				// disabled nodes
				// this.disables = [ '1-1-1', '1-1-1', '1-1-2' ]

			}

		});

		return tree;
	},

	'getListPrecinctDataTree' : function(currentData, i, callback) {

		var item = currentData[i];

		var districtValue = item.id;

		var request = {};
		request.columnname = 'district';
		request.columnvalue = districtValue;

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var precinctData = JSON.parse(response);

					currentData[i].children = precinctData;

					if (typeof callback == 'function') {

						callback(precinctData);
					}

					return currentData;
				});
	},

	'getListDicTristDataTree' : function(currentData, i, callback) {

		var item = currentData[i];

		var provinceValue = item.id;

		var request = {};
		request.columnname = 'province';
		request.columnvalue = provinceValue;

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getAreaDistributionAsTree',
				JSON.stringify(request), function(response) {

					var dictristData = JSON.parse(response);

					currentData[i].children = dictristData;

					if (typeof callback == 'function') {

						callback(dictristData);
					}

					return currentData;
				});
	},

	'getListProvinceDataTree' : function(callback) {

		var request = {};

		request.columnname = 'province';

		shinobi.api.request(
				'/authenapi/AgencyWorkingAreaApi/getDefaultValueListAsTree',
				JSON.stringify(request), function(response) {

					var provinceData = JSON.parse(response);

					if (typeof callback == 'function') {

						callback(provinceData);
					}

					return provinceData;

				});
	},

	'getFileName' : function(elem, value) {

		var linkFile = value;
		var linkFileSplit = linkFile.split('/');

		elem.innerHTML = linkFileSplit[linkFileSplit.length - 1];
	},

	'renderDownloadFile' : function(elem, value) {

		var linkFile = value;
		var linkFileSplit = linkFile.split('/');

		elem.setAttribute('href', erLib.reportLink
				+ linkFileSplit[linkFileSplit.length - 1]);

		setTimeout(function() {

			elem.focus();

		}, 200);

		elem.onclick = function() {

			var modalId = elem.getAttribute('modal-parent');

			var modal = document.getElementById(modalId);
			modal.classList.remove('is-active');

		}

	},

	'addEventSelectAll' : function(selectAllCheckboxId, tableId) {

		var selectAllCheckBoxHeader = document
				.getElementById(selectAllCheckboxId);
		selectAllCheckBoxHeader.onchange = function() {

			var table = document.getElementById(tableId);

			var body = table.getElementsByTagName('tbody')[0];

			var listRow = body.getElementsByTagName('tr');

			for (var i = 0; i < listRow.length; i++) {

				var item = listRow[i];

				var listTd = item.getElementsByTagName('td');

				var checkbox = item.querySelectorAll('[type=checkbox]')[0];

				if (this.checked) {
					checkbox.checked = true;
				} else {

					checkbox.checked = false;
				}
			}

		}
	},

	'hiddenCommandButton' : function(className) {

		var commandGroup = document.getElementById('buttonGroup');

		var button = commandGroup.getElementsByClassName(className)[0];

		button.classList.add('is-hidden');

	},

	'addEventRemoveRowTable' : function(elem, row, col, controlApi) {

		var value = elem.innerHTML;

		removeAllChild(elem);

		erLib.addEventRemoveRowDatalist(elem, value, controlApi);
	},

	'addEventRemoveRowDatalist' : function(elem, value, controlApi) {

		var button = document.createElement('a');
		button.setAttribute('class', 'button is-danger is-small');
		button.innerHTML = '<span class="icon"><i class="fa fa-times"></i></span><span>Xóa</span>';
		elem.appendChild(button);

		button.onclick = function() {

			var id = value;

			var request = {};

			request.id = id;

			shinobi.api.request(controlApi, JSON.stringify(request), function(
					response) {

				erLib.removeMessage(response);
				location.reload();

			});
		}

	},

	'createMessage' : function(response) {

		if (response == 'update success') {

			shinobi.notification.notification.info('Tạo mới thành công');

		}
	},

	'renderCellChangeStaffValue' : function(elem, row, col, allData) {

		erLib.renderNodeChangeValueListener(elem, function() {

			var input = elem.getElementsByTagName('input')[0];

			var inputId = row + 'StaffId';

			input.setAttribute('list', 'fragmentStaffIdDatalist');

			var agency = allData[row].agency;

			erLib.renderDataListStaff('fragmentStaffIdDatalist', agency);
		});
	},

	'updateMessage' : function(response, callback) {

		if (response == 'update success') {

			shinobi.notification.notification.info('Cập nhật thành công');

			if (typeof callback == 'function') {

				callback();
			}

		}
	},

	'removeMessage' : function(response) {

		if (response == 'update success') {

			shinobi.notification.notification.info('Xóa thành công');

		}
	},

	'renderUserTypeTable' : function(elem, row, col) {

		var value = elem.innerHTML;

		erLib.renderUserTypeDatalist(elem, value);
	},

	'renderUserTypeDatalist' : function(elem, value) {

		var content;
		switch (value.toLowerCase()) {

		case 'shop':
			content = 'Đại lý';
			break;

		case 'agency':
			content = 'Pháp nhân';
			break;

		case 'staff':
			content = 'Nhân viên';
			break;

		case 'mobi_hcm_2':
			content = 'Mobifone';
			break;
		case 'system':
			content = 'Quản trị hệ thống';
			break;

		default:
			break;
		}

		elem.innerHTML = content;
		// elem.innerHTML = value;
	},

	'renderOrderResultTable' : function(elem, row, col) {

		var value = elem.innerHTML;

		erLib.renderOrderResultDatalist(elem, value);
	},

	'renderOrderResultDatalist' : function(elem, value) {

		var content;
		switch (value.toLowerCase()) {

		case 'inprocess':
			content = 'Đang xử lí';
			break;

		case 'fail':
			content = 'Thất bại';
			break;

		case 'success':
			content = 'Thành công';
			break;

		default:
			content = value;
			break;
		}

		elem.innerHTML = content;
		// elem.innerHTML = value;
	},

	'notiFillInput' : function() {

		shinobi.notification.notification.error('Điền đầy đủ thông tin');
	},

	'addStartDateEndDateRequest' : function(request, callback) {

		var fromDate = document.getElementById('fromDate-inputDivID');
		var toDate = document.getElementById('toDate-inputDivID');

		if (fromDate.value.trim() == '' || toDate.value.trim() == '') {

			erLib.notiFillDateInput();

		} else {

			request.startdate = er.getFormatDatePickerInput('fromDate',
					'yyyy-mm-dd');
			request.enddate = er.getFormatDatePickerInput('toDate',
					'yyyy-mm-dd');

			if (typeof callback == 'function') {

				callback(request);
			}

		}
	},

	'notiFillDateInput' : function() {

		shinobi.notification.notification.error('Chưa điền từ ngày đến ngày');
	},

	'createTableListener' : function(tableIdOrBodyId) {

		var container = document.getElementById(tableIdOrBodyId);

		var listNode = container.getElementsByTagName('td');

		for (var i = 0; i < listNode.length; i++) {

			erLib.renderNodeChangeValueListener(listNode[i]);
		}

	},

	'renderCellChangeValue' : function(elem, rowIndex, colIndex, callback) {

		if (typeof callback == 'function') {

			erLib.renderNodeChangeValueListener(elem, callback);
		} else {

			erLib.renderNodeChangeValueListener(elem);
		}

	},

	'renderHasSendProfileContentTable' : function(cell, row, col, allData) {

		var content = 'Đã nộp';

		if (!allData[row].staffsendprofiledate) {

			content = 'Chưa nộp';
		}

		cell.innerHTML = content;

	},

	'addHasSendProfileSelect' : function(cell, callback) {

		cell.innerHTML = '';

		var selectContainer = document.createElement('div');
		selectContainer.setAttribute('class', 'select is-fullwidth');
		selectContainer.setAttribute('snb-key', 'isprofilesent');
		selectContainer.innerHTML = '  <select class="profile-send-select"> <option value="true">Đã nộp</option> <option value="false">Chưa nộp</option>  </select>';

		cell.appendChild(selectContainer);

		return selectContainer.getElementsByTagName('select')[0];

	},

	'renderHasSendProfileTable' : function(cell, row, col, allData) {

		// if (allData[row].orderresult && allData[row].orderresult ==
		// "SUCCESS") {

		erLib.addHasSendProfileSelect(cell);

		var select = cell.getElementsByTagName('select')[0];

		if (allData[row].orderresult == 'SUCCESS') {

			if (allData[row].staffsendprofiledate) {

				select.value = 'true';

			} else {

				select.value = 'false';

			}

		} else {

			select.value = 'false';

			select.disabled = true;
		}

		select.onchange = function() {

			var row = cell.parentNode;

			var checkBox = row.querySelectorAll('[type=checkbox]')[0];

			if (checkBox) {

				checkBox.checked = true;
			}

		}
		// }

		// else {
		//
		// erLib.renderHasSendProfileContentTable(cell, row, col, allData);
		// }

	},

	'renderNodeChangeValueListener' : function(elem, callback, ortherFunction) {

		elem.ondblclick = function() {

			var currentValue = elem.innerText;

			elem.classList.add('table-change-value-cell');

			var inputChange = elem
					.getElementsByClassName('table-change-value-input')[0];

			var input;

			if (!inputChange) {

				input = document.createElement('input');
				input.setAttribute('class',
						'input is-small table-change-value-input');

			} else {

				input = inputChange;
			}

			// input.value = currentValue;

			elem.appendChild(input);

			input.focus();

			if (typeof callback == 'function') {

				callback(input);
			}

			input.onchange = function() {

				if (typeof ortherFunction == 'function') {

					ortherFunction();
				}

				elem.classList.remove('table-change-value-cell');

				var newValue = input.value;

				input.remove();

				if (newValue.trim() == '') {

					elem.innerHTML = currentValue;

				} else {

					elem.innerHTML = newValue;

				}

			}

			input.addEventListener('keypress', function(e) {
				var key = e.which || e.keyCode;
				if (key === 13) {

					if (typeof ortherFunction == 'function') {
						ortherFunction();
					}

					elem.classList.remove('table-change-value-cell');

					var newValue = input.value;

					input.remove();

					if (newValue.trim() == '') {

						elem.innerHTML = currentValue;

					} else {

						elem.innerHTML = newValue;

					}
				}
			});

		}
	},

	'createButtonEvent' : function(callback) {

		var commandGroup = document.getElementById('buttonGroup');

		var createButton = commandGroup.getElementsByClassName('createButton')[0];

		createButton.onclick = function() {

			callback();
		}
	},

	'updateButtonEvent' : function(callback) {

		var commandGroup = document.getElementById('buttonGroup');

		var createButton = commandGroup.getElementsByClassName('updateButton')[0];

		createButton.onclick = function() {

			callback();
		}
	},

	'getSelectFormShopcodeValue' : function(elemId, requestName, listRequest) {

		var elem = document.getElementById(elemId);

		var value = elem.value;

		if (value != 'ALL') {

			var tempObject = {};

			tempObject.columnname = requestName;

			tempObject.columnvalue = value.split('-')[0];

			if (elem.hasAttribute('user-level')) {

				tempObject.userlevel = elem.getAttribute('user-level');
			}

			listRequest.push(tempObject);

		}
	},

	'renderShopCodeCheckGroup' : function(elemId, columnName) {

		var datalistName = elemId;

		var request = {};

		request.columnname = columnName;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist
				.initLoadApi(
						"/authenapi/AgencyWorkingAreaApi/getDefaultValueListAfterCheckGroup",
						request);
	},

	'renderShopCode' : function(elemId) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'shopcode';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", request);
	},
	'renderStatusCodeDetail' : function(elemId) {

		var datalistName = elemId;

		var request = {};

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/OrderStatusCodeApi/getListStatusCodeWithCodeValue",
				request);
	},

	'renderObjectReport' : function(elemId) {

		var datalistName = elemId;

		var request = {};

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist
				.initLoadApi(
						"/authenapi/ExportTotalCommissionToExcelFileApi/getListShopAndAgency",
						request);
	},

	'renderShopCodeOfAgency' : function(elemId, agency, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnvalue = agency;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListShopOfAgencyWorking",
				request);

		if (typeof callback == 'function') {

			callback();
		}
		return datalist;
	},

	'renderShopCodeOfAgencyHasAllValue' : function(elemId, agency) {

		var datalistName = elemId;

		var request = {};

		request.columnvalue = agency;
		request.getallvalue = 'ALL';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListShopOfAgencyWorking",
				request);

		return datalist;
	},

	'renderEmtyCell' : function(cell, row, col) {

		cell.innerHTML = '';
	},

	'renderRemoveCell' : function(cell, row, col) {

		cell.classList.add('is-hidden');
	},

	'renderAgency' : function(elemId, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'agency';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", request,
				callback);
	},

	'renderAgencyOfShopcode' : function(elemId, shopcode, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'agency';
		request.columnvalue = shopcode;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListAgencyOfShopWorking",
				request, callback);
	},
	'renderAgencyOfShopcodeHasAllValue' : function(elemId, shopcode, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'agency';
		request.columnvalue = shopcode;
		request.getallvalue = 'ALL';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getListAgencyOfShopWorking",
				request, callback);
	},

	'getListAgency' : function(callback) {

		var request = {};

		request.columnname = 'agency';

		shinobi.api.request(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", JSON
						.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);
					callback(jsonArr.data);

				});
	},

	'convertListToTreeNode' : function(list, textMap, idMap, hasChildren) {

		var result = [];

		for (var i = 0; i < list.length; i++) {

			var item = list[i];

			var tempObject = {};

			tempObject.text = item[textMap];
			tempObject.id = item[idMap];

			if (hasChildren) {

				tempObject.children = [];
			}

			result.push(tempObject);
		}

		return result;
	},

	'renderProvince' : function(elemId, callback) {

		var datalistName = elemId;

		var request = {};

		request.columnname = 'province';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getDefaultValueList", request,
				callback);
	},

	'renderDistrictListener' : function(districtId, provinceSelectId, callback) {

		var districtSelectDatalist = erLib.renderDistrict(districtId, document
				.getElementById(provinceSelectId).value, function() {

			callback();

			var provinceSelect = document.getElementById(provinceSelectId);

			provinceSelect.onchange = function() {

				var datalistElem = document.getElementById(districtId);

				removeAllChild(datalistElem);

				datalistElem.appendChild(districtSelectDatalist.sampleNode);

				erLib.renderDistrict(districtId, this.value);

			}
		});
	},

	'renderDistrict' : function(elemId, provinceValue, callback) {

		var elem = document.getElementById(elemId);

		elem.disabled = false;
		var datalistName = elemId;

		var request = {};

		request.columnname = 'province';
		request.columnvalue = provinceValue;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getAreaDistribution", request,
				callback);

		return datalist;

	},

	'renderShopcodeHasAllValue' : function(elemId, callback) {

		var elem = document.getElementById(elemId);

		elem.disabled = false;
		var datalistName = elemId;

		var request = {};

		request.columnname = 'shopcode';

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist
				.initLoadApi(
						"/authenapi/AgencyWorkingAreaApi/getDefaultValueListWithAllValue",
						request, callback);

		return datalist;

	},

	'renderStaffInputListenner' : function(staffInputId, agencySelectId) {

		var controlElem = document.getElementById(agencySelectId);

		setTimeout(function() {

			var controlValue = controlElem.value;

			erLib.createStaffInputDatalist(staffInputId, controlValue);
		}, 2000)

		controlElem.onchange = function() {

			var currentValue = this.value;

			erLib.createStaffInputDatalist(staffInputId, currentValue);
		}
	},

	'createStaffInputDatalist' : function(inputId, controlValue) {

		var datalistId = inputId + 'Datalist';

		var datalistIdContainer = datalistId + 'Container';

		var currentDatalist = document.getElementById(datalistIdContainer);
		if (currentDatalist) {

			currentDatalist.remove();
		}

		var tempDatalist = document.getElementById('tempDataList');

		var cloneDatalist = tempDatalist.cloneNode(true);

		cloneDatalist.getElementsByTagName('datalist')[0].innerHTML = '<option  snb-datalist-parent="staffInputDatalist" snb-key="columnvalue"></option>';

		cloneDatalist.setAttribute('id', datalistIdContainer);

		document.getElementsByTagName('main')[0].appendChild(cloneDatalist);

		var input = document.getElementById(inputId);

		input.setAttribute('list', datalistId);

		input.value = '';

		var datalist = cloneDatalist.getElementsByTagName('datalist')[0];
		datalist.setAttribute('id', datalistId);
		datalist.setAttribute('snb-datalist-node', datalistId);

		var option = cloneDatalist.getElementsByTagName('option')[0];
		option.setAttribute('snb-datalist-parent', datalistId);
		option.setAttribute('snb-key', 'columnvalue');

		var datalist = erLib.renderDataListStaff(datalistId, controlValue);

		return datalist;

	},

	'getStaffList' : function(agencyObject, callback) {

		var request = {};

		request.agency = agencyObject.id;

		shinobi.api.request("/authenapi/StaffAreaDistributionApi/getStaffList",
				JSON.stringify(request), function(response) {

					var jsonArr = JSON.parse(response);
					var listStaff = jsonArr.data;

					var listStaffData = erLib.convertListToTreeNode(listStaff,
							'columnname', 'columnvalue', false);

					agencyObject.children = listStaffData;

					callback(agencyObject);

				});
	},

	'renderDataListStaff' : function(datalistId, controlValue) {

		var option = document.createElement('option');
		option.setAttribute('snb-datalist-parent', datalistId);
		option.setAttribute('snb-key', 'columnvalue');

		var datalist = document.getElementById(datalistId);

		removeAllChild(datalist);
		datalist.appendChild(option);

		var request = {};

		request.agency = controlValue;

		request.recordPerPage = getRecordNumber(datalistId);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistId);

		datalist.initLoadApi(
				"/authenapi/StaffAreaDistributionApi/getStaffList", request);

		return datalist;

	},

	'renderDataListOrderStatus' : function(datalistId, controlValue) {

		var option = document.createElement('option');
		option.setAttribute('snb-datalist-parent', datalistId);
		option.setAttribute('snb-key', 'orderstatus');
		option.setAttribute('snb-key-innerhtml', 'orderstatus');
		option.setAttribute('snb-key-result', 'orderresult');

		var datalist = document.getElementById(datalistId);

		removeAllChild(datalist);
		datalist.appendChild(option);

		var request = {};

		request.agency = controlValue;

		request.recordPerPage = getRecordNumber(datalistId);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistId);

		datalist.initLoadApi("/authenapi/OrderStatusCodeApi/getListStatusCode",
				request);

	},

	'renderWardListener' : function(wardId, districtSelectId) {

		var wardSelectDatalist = erLib.renderWard(wardId, document
				.getElementById(districtSelectId).value, function() {

			var districtSelect = document.getElementById(districtSelectId);

			districtSelect.onchange = function() {

				var datalistElem = document.getElementById(wardId);

				removeAllChild(datalistElem);

				datalistElem.appendChild(wardSelectDatalist.sampleNode);

				erLib.renderWard(wardId, this.value);

			}
		});
	},

	'renderWard' : function(elemId, districtValue, callback) {

		var elem = document.getElementById(elemId);

		elem.disabled = false;
		var datalistName = elemId;

		var request = {};

		request.columnname = 'district';
		request.columnvalue = districtValue;

		request.recordPerPage = getRecordNumber(datalistName);

		request.pageNum = 1;

		var datalist = new shinobi.datalist(datalistName);

		var sort = {};
		sort.colname = "createddate";
		sort.value = "desc";

		// datalist.staticsorts[0] = sort;

		datalist.initLoadApi(
				"/authenapi/AgencyWorkingAreaApi/getAreaDistribution", request,
				callback);

		return datalist;
	},
};shinobi.exportfile = {
	exportFile: function (url, request, option) {
		shinobi.notification.notification.loading();
		shinobi.api.request(url, JSON.stringify(request), function (response) {
			shinobi.notification.notification.loaded();
			console.log(response);
			var data = JSON.parse(response);
			console.log(data);
			if (data.hasOwnProperty('linkfile')) {
				var modal = document.getElementById('confirmDownloadExcelFileModal');
				shinobi.mapping.renderElement(modal, data);
				modal.classList.add('is-active');
			} else {
				shinobi.notification.notification.error('Không tìm thấy file');
			}
			console.log(data);
		})
	},

	request: function (url, param, fileType, callback) {

		var request = new XMLHttpRequest();
		// var url =
		// "http://localhost:7979/exportfile/excel/VseBankTransLogApi";
		request.open('POST', url, true);
		request.setRequestHeader('Content-Type',
			'application/x-www-form-urlencoded; charset=UTF-8');
		request.responseType = 'blob';

		request.onload = function (e) {
			// var fileName = "export.xlsx";
			var fileName = "export." + fileType;

			if (this.status === 200) {
				var blob = this.response;
				if (window.navigator.msSaveOrOpenBlob) {
					window.navigator.msSaveBlob(blob, fileName);
				} else {

					if (typeof callback == 'function') {

						callback();
					}

					var downloadLink = window.document.createElement('a');
					var contentTypeHeader = request
						.getResponseHeader("Content-Type");
					downloadLink.href = window.URL.createObjectURL(new Blob(
						[blob], {
						type: contentTypeHeader
					}));
					downloadLink.download = fileName;
					document.body.appendChild(downloadLink);
					downloadLink.click();
					document.body.removeChild(downloadLink);

				}
			}
		};
		request.send(param);

	},
};shinobi.fileupload = {
	'filelist': [],
	'register': function (uploadElemId, elemevent, uploadpoint, beforeupload,
		callback) {

		var uploadElem = document.getElementById(uploadElemId);
		shinobi.fileupload.registerElement(uploadElem, elemevent, uploadpoint,
			beforeupload, callback);

	},
	'registerElement': function (uploadElem, elemevent, uploadpoint,
		beforeupload, callback, option) {
		if (option && option.hasOwnProperty('type')) {
			if (option.type == 'public') {
				var sessionid = '###'
				if (elemevent == "change") {
					uploadElem
						.addEventListener(
							elemevent,
							function () {

								shinobi.notification.notification
									.loading();
								var type = shinobi.fileupload
									.isImage(uploadElem.files[0].type);

								var fileListIndex = beforeupload(type);

								var formData = new FormData();

								formData
									.append(
										"file",
										uploadElem.files[0]);
								formData.append("session",
									sessionid);
								formData.append(
									"fileindex",
									fileListIndex);

								shinobi.fileupload
									.uploadFile(
										formData,
										uploadpoint,
										callback);
							});
				} else if (elemevent == "paste") {
					uploadElem
						.addEventListener(
							elemevent,
							function (e) {
								shinobi.notification.notification
									.loading();
								var formData = new FormData();

								var file = e.clipboardData.files[0];

								if (Object.prototype.toString
									.call(file) === '[object File]') {
									var type = shinobi.fileupload
										.isImage(file.type);

									var fileListIndex = beforeupload(type);

									formData
										.append(
											"file",
											e.clipboardData.files[0]);
									formData.append(
										"session",
										sessionid);
									formData.append(
										"fileindex",
										fileListIndex);

									shinobi.fileupload
										.uploadFile(
											formData,
											uploadpoint,
											callback);
								}

							});
				} else if (elemevent == "drop") {
					uploadElem.addEventListener(elemevent,
						function (e) {
							shinobi.notification.notification
								.loading();
							beforeupload();

							var formData = new FormData();

							formData.append("file",
								e.dataTransfer.files[0]);
							formData.append("session",
								sessionid);

							shinobi.fileupload.uploadFile(
								formData, uploadpoint,
								callback);
						});
				}
			}

		}
		else {
			var userApi = (shinobi.hasOwnProperty('coreapi') && shinobi.coreapi.hasOwnProperty('userApi')) ? shinobi.coreapi.userApi : "/authenapi/userapi/";
			if (shinobi.hasOwnProperty('coreapi') && shinobi.coreapi.hasOwnProperty('getSessionIdApi')) {
				userApi = shinobi.coreapi.getSessionIdApi;
			}
			var request = {};
			shinobi.api
				.request(userApi + 'getSessionId'
					,
					JSON.stringify(request),
					function (response) {
						var json = JSON.parse(response);
						var sessionid = json.sessionid;

						if (elemevent == "change") {
							uploadElem
								.addEventListener(
									elemevent,
									function () {

										shinobi.notification.notification
											.loading();
										var type = shinobi.fileupload
											.isImage(uploadElem.files[0].type);

										var fileListIndex = beforeupload(type);

										var formData = new FormData();

										formData
											.append(
												"file",
												uploadElem.files[0]);
										formData.append("session",
											sessionid);
										formData.append(
											"fileindex",
											fileListIndex);

										shinobi.fileupload
											.uploadFile(
												formData,
												uploadpoint,
												callback);
									});
						} else if (elemevent == "paste") {
							uploadElem
								.addEventListener(
									elemevent,
									function (e) {
										shinobi.notification.notification
											.loading();
										var formData = new FormData();

										var file = e.clipboardData.files[0];

										if (Object.prototype.toString
											.call(file) === '[object File]') {
											var type = shinobi.fileupload
												.isImage(file.type);

											var fileListIndex = beforeupload(type);

											formData
												.append(
													"file",
													e.clipboardData.files[0]);
											formData.append(
												"session",
												sessionid);
											formData.append(
												"fileindex",
												fileListIndex);

											shinobi.fileupload
												.uploadFile(
													formData,
													uploadpoint,
													callback);
										}

									});
						} else if (elemevent == "drop") {
							uploadElem.addEventListener(elemevent,
								function (e) {
									shinobi.notification.notification
										.loading();
									beforeupload();

									var formData = new FormData();

									formData.append("file",
										e.dataTransfer.files[0]);
									formData.append("session",
										sessionid);

									shinobi.fileupload.uploadFile(
										formData, uploadpoint,
										callback);
								});
						}

					});
		}

	},
	'uploadFile': function (formData, uploadpoint, callback) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function () {
			if (this.readyState == 4 && this.status == 200) {
				shinobi.notification.notification.loaded();
				try {
					var json = JSON.parse(xhr.responseText);
					callback(json);

				} catch (e) {
					shinobi.notification.notification
						.error('Có lỗi vui lòng thử lại');
				}

				// var avatar = document.getElementById("avatar");
				// avatar.setAttribute("src", json.content);
			}
		};

		var hostname = window.location.hostname;
		var protocol = window.location.protocol;

		if (shinobi.hasOwnProperty('fileuploadconfig') && shinobi.fileuploadconfig.hasOwnProperty('uploadDomain')) {
			var uploadDomain = shinobi.fileuploadconfig.uploadDomain;
			xhr.open("POST", uploadDomain + uploadpoint, true);
		} else if (shinobi.hasOwnProperty('fileuploadconfig') && shinobi.fileuploadconfig.hasOwnProperty('uploadDomainProcess')
		) {
			uploadDomain = shinobi.fileuploadconfig.uploadDomainProcess();
			xhr.open("POST", uploadDomain + uploadpoint, true);
		} else {
			if (hostname == "localhost") {
				xhr.open("POST", "http://localhost:9999/" + uploadpoint, true);
			} else if (hostname === "www.aladin.finance") {
				xhr.open("POST", protocol + "//uploadfile.aladin.finance" + "/"
					+ uploadpoint, true);
			} else if (hostname === "chonso.cbv.com.vn") {
				xhr.open("POST", protocol + "//uploadfile.cbv.com.vn" + "/"
					+ uploadpoint, true);
			} else {
				xhr.open("POST", protocol + "//uploadfile." + hostname + "/"
					+ uploadpoint, true);
			}
		}

		xhr.withCredentials = true;
		xhr.send(formData);

	},
	'isImage': function (type) {
		if ('image/png' == type || 'image/jpeg' == type || 'image/gif' == type) {
			return true;
		} else {
			return false;
		}
	}

};shinobi.fragmentchangepassword = {
	classButtonControlSelector : 'fragment-change-password-button-control',
	listButtonControl : [],
	modal : '',
	modalId : 'fragmentChangePassword',
	init : function() {
		shinobi.fragmentchangepassword.modal = document
				.getElementById(shinobi.fragmentchangepassword.modalId);
		shinobi.fragmentchangepassword.addEventListButtonControl();
		shinobi.fragmentchangepassword.addEventButtonModal();
		// shinobi.fragmentchangepassword.addEventLogout();
		// shinobi.fragmentchangepassword.changeLoggedState();

	},

	addEventButtonModal : function() {

		shinobi.fragmentchangepassword.addEventChangePasswordButton();
	},
	addEventChangePasswordButton : function() {
		var button = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('submit-button')[0];

		shinobi.fragmentchangepassword.addEventButtonWhenClick(button);
		shinobi.fragmentchangepassword.addEventButtonWhenEnter(button);

	},

	addEventButtonWhenClick : function(elem) {
		elem.onclick = function() {
			shinobi.fragmentchangepassword.changePasswordProcess();
		}
	},
	addEventButtonWhenEnter : function(elem) {
		elem.addEventListener('keypress', function(e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentchangepassword.changePasswordProcess();
			}
		});
	},
	changePasswordProcess : function() {
		var oldPasswordInput = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('old-password-input')[0];
		var newPasswordInput = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('new-password-input')[0];
		var confirmPasswordInput = shinobi.fragmentchangepassword.modal
				.getElementsByClassName('confirm-password-input')[0];
		if (confirmPasswordInput.value.trim() == ""
				|| newPasswordInput.value.trim() == ""
				|| oldPasswordInput.value.trim() == "") {
			shinobi.notification.notification.error("Nhập đầy đủ thông tin!");
			return;
		} else if (confirmPasswordInput.value.trim() != newPasswordInput.value
				.trim()) {
			shinobi.notification.notification
					.error("Mật khẩu mới và xác nhận mật khẩu không giống nhau!");
			return;

		} else {
			shinobi.notification.confirm(function() {
				var request = {};
				request.oldpassword = shinobi.util
						.sha256(oldPasswordInput.value.trim());
				request.newpassword = shinobi.util
						.sha256(newPasswordInput.value.trim());
				shinobi.fragmentchangepassword.sendRequest(request);
			}, {
				title : 'Xác nhận',
				content : 'Bạn chắc chắn',

			});

		}
	},
	sendRequest : function(request) {
		shinobi.notification.notification.loading();
		shinobi.api.request(shinobi.coreapi.userApi + 'changeUserPassword',
				JSON.stringify(request), function(response) {
					shinobi.notification.notification.loaded();

					if (response == "update success") {
						shinobi.notification.notification
								.info('Đổi mật khẩu thành công');
						shinobi.fragmentchangepassword.close();
					}
				});

	},

	addEventListButtonControl : function() {
		shinobi.fragmentchangepassword.listButtonControl = document
				.getElementsByClassName(shinobi.fragmentchangepassword.classButtonControlSelector);

		for (var i = 0; i < shinobi.fragmentchangepassword.listButtonControl.length; i++) {
			var button = shinobi.fragmentchangepassword.listButtonControl[i];
			button.onclick = function() {
				shinobi.fragmentchangepassword.open();
			}
		}

	},

	open : function() {
		if (shinobi.fragmentchangepassword.modal != '') {
			shinobi.fragmentchangepassword.modal.classList.add('is-active');

		}
	},

	close : function() {
		if (shinobi.fragmentchangepassword.modal != '') {
			shinobi.fragmentchangepassword.modal.classList.remove('is-active');
		}
	},
};shinobi.fragmentforgotpassword = {
	classButtonControlSelector : 'fragment-forgot-password-button-control',
	listButtonControl : [],
	classLogoutButtonSelector : 'logout-button',
	classLoggedUserNameButtonSelector : 'logged-username-button',
	modal : '',
	modalId : 'fragmentForgotPassword',
	init : function() {

		shinobi.fragmentforgotpassword.modal = document
				.getElementById(shinobi.fragmentforgotpassword.modalId);
		shinobi.fragmentforgotpassword.modal
				.getElementsByClassName('note-field')[0].classList
				.add('is-hidden');
		shinobi.fragmentforgotpassword.addEventListButtonControl();
		shinobi.fragmentforgotpassword.addEventButtonModal();

	},

	addEventButtonModal : function() {

		shinobi.fragmentforgotpassword.addEventSubmitButton();

	},

	addEventSubmitButton : function() {
		var button = shinobi.fragmentforgotpassword.modal
				.getElementsByClassName('submit-button')[0];
		shinobi.fragmentforgotpassword.addEventWhenClick(button);
		shinobi.fragmentforgotpassword.addEventWhenEnter(button);

	},

	addEventWhenClick : function(elem) {
		elem.onclick = function() {
			shinobi.fragmentforgotpassword.request();
		}
	},
	addEventWhenEnter : function(elem) {
		elem.addEventListener('keypress', function(e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentforgotpassword.request();
			}
		});
	},
	request : function() {
		var emailInput = shinobi.fragmentforgotpassword.modal
				.querySelector('input[snb-key="email"]');
		if (emailInput.value.trim() == "") {
			shinobi.notification.notification.error("Nhập đầy đủ thông tin!");
			return;
		} else {
			var request = {};
			request.email = emailInput.value.trim();
			shinobi.notification.notification.loading();
			shinobi.api.request(shinobi.coreapi.userApi
					+ 'sendForGetPasswordEmail', JSON.stringify(request),
					function(data) {
						if (data == "update success") {
							shinobi.notification.notification.loaded();
							shinobi.mapping.renderElement(
									shinobi.fragmentforgotpassword.modal,
									request);
						}
					});
		}
	},

	disableInputAndButton : function(elem, value, all) {
		elem.setAttribute('disabled', true);
	},

	showNoteField : function(elem, value, all) {
		elem.classList.remove('is-hidden');
	},
	addEventListButtonControl : function() {
		shinobi.fragmentforgotpassword.listButtonControl = document
				.getElementsByClassName(shinobi.fragmentforgotpassword.classButtonControlSelector);

		for (var i = 0; i < shinobi.fragmentforgotpassword.listButtonControl.length; i++) {
			var button = shinobi.fragmentforgotpassword.listButtonControl[i];
			button.onclick = function() {
				// hidden sign up modal
				shinobi.fragmentsignup.close();
				// show login modal
				shinobi.fragmentforgotpassword.open();
			}
		}

	},

	open : function() {
		if (shinobi.fragmentforgotpassword.modal != '') {
			shinobi.fragmentforgotpassword.modal.classList.add('is-active');

		}
	},

	close : function() {
		if (shinobi.fragmentforgotpassword.modal != '') {
			shinobi.fragmentforgotpassword.modal.classList.remove('is-active');
		}
	},
};shinobi.fragmentlogin = {
	href: window.location.href,
	classButtonControlSelector: 'fragment-login-button-control',
	listButtonControl: [],
	classLogoutButtonSelector: 'logout-button',
	classLoggedUserNameButtonSelector: 'logged-username-button',
	modal: '',
	modalId: 'fragmentLogin',
	init: function () {
		//add event redirect to origin page when login done
		shinobi.fragmentlogin.addEventClickLoginButton();
		shinobi.fragmentlogin.checkHasLogged(function () {
			shinobi.fragmentlogin.modal = document
				.getElementById(shinobi.fragmentlogin.modalId);
			shinobi.fragmentlogin.addEventButtonModal();
			shinobi.fragmentlogin.addEventLogout();
			shinobi.fragmentlogin.changeLoggedState();
			shinobi.fragmentlogin.showLoginSignUpButton();
		});

	},

	addEventClickLoginButton: function () {
		var loginButtons = document.querySelectorAll('.is-login-button');
		if (window.location.pathname != '/page/login') {
			loginButtons.forEach(function (button) {
				button.setAttribute('href', '/page/login?originpage=' + window.location.pathname);

			})
		}
	},

	showLoginSignUpButton: function () {
		if (JSON.stringify(document.body.classList).includes('not-logged')) {

			var signupButton = document.querySelector('.is-signup-button');
			signupButton.classList.remove('is-hidden');

			var loginButton = document.querySelector('.is-login-button');
			loginButton.classList.remove('is-hidden');
		}
	},

	loadGoogleAndFacebookLib: function () {
		window.fbAsyncInit = function () {
			FB.init({
				appId: '515882212152388',
				autoLogAppEvents: true,
				xfbml: true,
				version: 'v3.2'
			});
		};

		(function (d, s, id) {
			var js, fjs = d.getElementsByTagName(s)[0];
			if (d.getElementById(id)) {
				return;
			}
			js = d.createElement(s);
			js.id = id;
			js.src = "https://connect.facebook.net/en_US/sdk.js";
			fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'facebook-jssdk'));
	},

	changeLoggedState: function () {
		shinobi.coreapi.reCheckAuthen(function (username) {

			if (username) {
				document.body.classList.add('has-logged');
				document.body.classList.remove('not-logged');

			} else {
				document.body.classList.remove('has-logged');
				document.body.classList.add('not-logged');
			}

		});
	},

	addEventLogout: function () {
		var listLogoutButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLogoutButtonSelector);
		for (var k = 0; k < listLogoutButton.length; k++) {
			listLogoutButton[k].onclick = function () {
				shinobi.fragmentloginextension.logoutProcess(function () {
					shinobi.fragmentlogin.logoutProcess();
				});

			}

		}
	},

	logoutProcess: function () {
		shinobi.xhradapter.getResource('/logout', function (response) {

		});

		var listSignUpButton = document
			.getElementsByClassName(shinobi.fragmentsignup.classButtonControlSelector);
		for (var i = 0; i < listSignUpButton.length; i++) {
			listSignUpButton[i].classList.remove('is-hidden');
		}

		var listLogInButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classButtonControlSelector);
		for (var j = 0; j < listLogInButton.length; j++) {
			listLogInButton[j].classList.remove('is-hidden');
		}

		var listLogoutButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLogoutButtonSelector);
		for (var k = 0; k < listLogoutButton.length; k++) {
			listLogoutButton[k].classList.remove('is-logged');
		}

		var listLoggedUserNameButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLoggedUserNameButtonSelector);
		for (var l = 0; l < listLoggedUserNameButton.length; l++) {
			listLoggedUserNameButton[l].classList.remove('is-logged');
			listLoggedUserNameButton[l].classList.remove('is-logged');
			listLoggedUserNameButton[l].innerHTML = '';

		}

		shinobi.cacheapi.clear();
		// when clear cache => check authen has reload `
		shinobi.fragmentlogin.changeLoggedState();
		window.location.href = '/';

	},

	checkHasLogged: function (callback) {
		shinobi.coreapi.checkAuthen(function (sessionId) {
			if (sessionId) {
				shinobi.fragmentlogin.hasLoginProcess();
				shinobi.fragmentloginextension.loginProcess();
			}

			if (typeof callback == 'function') {
				callback();
			}
		});
	},

	addEventButtonModal: function () {

		shinobi.fragmentlogin.addEventLoginButton();

	},

	addEventLoginButton: function () {
		var listSelector = ['.username-input', '.password-input',
			'.login-button'];
		listSelector.forEach(function (selector) {
			var elem = shinobi.fragmentlogin.modal.querySelector(selector);
			var tagName = elem.tagName;
			switch (tagName) {
				case 'INPUT':
					shinobi.fragmentlogin.addEventLoginWhenEnter(elem);
					break;
				case 'A':
				case 'BUTTON':
					shinobi.fragmentlogin.addEventLoginWhenEnter(elem);
					shinobi.fragmentlogin.addEventLoginWhenClick(elem);
					break;
				default:
					shinobi.fragmentlogin.addEventLoginWhenClick(elem);
					break;
			}

		});

	},

	addEventLoginWhenClick: function (elem) {
		elem.onclick = function () {
			shinobi.fragmentlogin.login();
		}
	},
	addEventLoginWhenEnter: function (elem) {
		elem.addEventListener('keypress', function (e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentlogin.login();
			}
		});
	},
	login: function () {
		var username = document.getElementsByClassName('username-input')[0];
		var password = document.getElementsByClassName('password-input')[0];
		if (username.value.trim() == "" || password.value.trim() == "") {
			shinobi.notification.notification.error("Nhập đầy đủ thông tin!");
			return;
		} else {
			var request = {};
			request.username = username.value.trim();
			request.password = shinobi.util.sha256(password.value.trim());
			request.secureinfo = "";
			shinobi.fragmentlogin.requestLogin(request, "/login");

		}
	},
	requestLogin: function (request, loginurl) {
		shinobi.notification.notification.loading();
		shinobi.api.request(loginurl, JSON.stringify(request), function (data) {
			shinobi.notification.notification.loaded();
			if (data == "authen success") {
//				shinobi.fragmentlogin.close();
				shinobi.fragmentlogin.hasLoginProcess();
				shinobi.fragmentloginextension.loginProcess();

			} else {
				shinobi.notification.notification
					.error("Tài khoản hoặc mật khẩu sai!!!");
				return;
			}
		});

	},

	hasLoginProcess: function () {
		// hidden all sign in and sign up button
		var listSignUpButton = document
			.getElementsByClassName(shinobi.fragmentsignup.classButtonControlSelector);
		for (var i = 0; i < listSignUpButton.length; i++) {
			listSignUpButton[i].classList.add('is-hidden');
		}

		var listLogInButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classButtonControlSelector);
		for (var j = 0; j < listLogInButton.length; j++) {
			listLogInButton[j].classList.add('is-hidden');
		}

		var listLogoutButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLogoutButtonSelector);
		for (var k = 0; k < listLogoutButton.length; k++) {
			listLogoutButton[k].classList.add('is-logged');
		}

		var listLoggedUserNameButton = document
			.getElementsByClassName(shinobi.fragmentlogin.classLoggedUserNameButtonSelector);
		for (var l = 0; l < listLoggedUserNameButton.length; l++) {
			listLoggedUserNameButton[l].classList.add('is-logged');
			listLoggedUserNameButton[l].classList.add('is-loading');

		}

		shinobi.fragmentlogin.changeLoggedState();

	},
};shinobi.fragmentloginextension = {
	loginProcess: function () {
		// shinobi.loggedusertemplaterender.renderHeaderMenu();
		if (shinobi.socketmanager.privateWebSocket == '') {
			shinobi.socketmanager.init();
		}

	},
	logoutProcess: function (callback) {
		if (typeof callback == 'function') {
			callback();
		}
	},
};shinobi.fragmentsignup = {
	classButtonControlSelector : 'fragment-sign-up-button-control',
	listButtonControl : [],
	modal : '',
	modalId : 'fragmentSignUp',
	intlTelInput : '',
	hasCheckTrashMail : true,
	init : function() {

		shinobi.fragmentsignup.modal = document
				.getElementById(shinobi.fragmentsignup.modalId);
		shinobi.fragmentsignup.addEventListButtonControl();
		shinobi.fragmentsignup.renderSelectPhoneTelephoneInput();
		shinobi.fragmentsignup.addEventButtonModal();

	},

	renderSelectPhoneTelephoneInput : function() {

		var input = shinobi.fragmentsignup.modal
				.getElementsByClassName('phone-number-input')[0];
		shinobi.fragmentsignup.intlTelInput = window.intlTelInput(input, {
			// allowDropdown: false,
			// autoHideDialCode: false,
			autoPlaceholder : "off",
			dropdownContainer : document.body,
			// excludeCountries: ["us"],
			// formatOnDisplay: false,
			// geoIpLookup: function(callback) {
			// $.get("http://ipinfo.io", function() {},
			// "jsonp").always(function(resp) {
			// var countryCode = (resp && resp.country) ? resp.country : "";
			// callback(countryCode);
			// });
			// },
			// hiddenInput: "full_number",
			initialCountry : "vn",
			// localizedCountries: { 'de': 'Deutschland' },
			// nationalMode: false,
			// onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
			// placeholderNumberType: "MOBILE",
			// preferredCountries: ['cn', 'jp'],
			// separateDialCode: true,
			utilsScript : "/static/js/library/intlTelInputUtil.js",
		});
	},

	addEventButtonModal : function() {
		shinobi.fragmentsignup.addEventSignUpButton();
		shinobi.fragmentsignup.signUpWithFacebook();
		shinobi.fragmentsignup.signUpWithGoogle();

	},

	signUpWithGoogle : function() {
		var button = shinobi.fragmentsignup.modal
				.querySelector('.google-button');
		gapi
				.load(
						'auth2',
						function() {
							// Retrieve the singleton for the GoogleAuth library
							// and set up the client.
							var auth2 = gapi.auth2
									.init({
										client_id : '92469729159-a402g2mqs9o0bje69k6gr2lheun6beer.apps.googleusercontent.com',
										cookiepolicy : 'single_host_origin',

									});

							auth2
									.attachClickHandler(
											button,
											{},
											function(googleUser) {

												var profile = googleUser
														.getBasicProfile();

												var accessToken;
												if (googleUser.Zi) {
													accessToken = googleUser.Zi.access_token;
												}
												if (googleUser.tc) {
													accessToken = googleUser.tc.access_token;
												}
												if (accessToken) {
													var password = shinobi.util
															.sha256(accessToken);
													var phonenumber = Math
															.floor(Math
																	.random()
																	* (999999999 - 100000000)
																	+ 100000000);

													var lastName = (googleUser.w3) ? googleUser.w3.ofa
															: googleUser.Pt.CU;
													var firstName = (googleUser.w3) ? googleUser.w3.wea
															: googleUser.Pt.BW;
													var username = (googleUser.El) ? googleUser.El
															: googleUser.Ca;
													var mappingJson = {
														lastname : lastName,
														firstname : firstName,
														email : profile
																.getEmail(),
														phonenumber : phonenumber,
														password : password,
														confirmPassword : password,
														username : "gg_"
																+ username,
														acceptRule : true,
													};

													var formContainer = shinobi.fragmentsignup.modal
															.getElementsByClassName('form-container')[0];

													shinobi.mapping
															.renderElement(
																	formContainer,
																	mappingJson);
													var signUpOption = {
														method : 'google',
														data : mappingJson,
													};
													shinobi.fragmentsignup
															.signup(signUpOption);

												} else {
													shinobi.notification.notification
															.error('Không thể kết nối với Google');
												}

											}, function(error) {
												alert(JSON.stringify(error,
														undefined, 2));
											});
						});
	},

	signUpWithFacebook : function() {
		var button = shinobi.fragmentsignup.modal
				.querySelector('.facebook-button');
		button.onclick = function() {
			FB
					.login(
							function(responseLogin) {
								if (responseLogin.authResponse) {
									var authResponse = responseLogin.authResponse;
									var accessToken = authResponse.accessToken;
									var userID = authResponse.userID;

									FB
											.api(
													'/' + userID,
													'GET',
													{
														"fields" : "id,first_name, last_name,birthday,email,hometown,location"
													},
													function(response) {

														var password = shinobi.util
																.sha256(accessToken);
														var phonenumber = Math
																.floor(Math
																		.random()
																		* (999999999 - 100000000)
																		+ 100000000);

														var mappingJson = {
															lastname : response.last_name,
															firstname : response.first_name,
															email : response.email,
															phonenumber : phonenumber,
															password : password,
															confirmPassword : password,
															username : "fb_"
																	+ userID,
															acceptRule : true,
														};

														var formContainer = shinobi.fragmentsignup.modal
																.getElementsByClassName('form-container')[0];
														shinobi.mapping
																.renderElement(
																		formContainer,
																		mappingJson);
														var signUpOption = {
															method : 'facebook',
															data : mappingJson,
														};
														shinobi.fragmentsignup
																.signup(signUpOption);

													});
								} else {
									shinobi.notification.notification
											.error('Không thể kết nối với Facebook');
								}

							},
							{
								scope : 'user_birthday, email, user_hometown, user_gender, user_location'
							});
		}
	},

	addEventSignUpButton : function() {

		var signUpButton = shinobi.fragmentsignup.modal
				.querySelector('.signup-button');
		shinobi.fragmentsignup.addEventWhenClick(signUpButton);
		shinobi.fragmentsignup.addEventWhenEnter(signUpButton);
	},

	addEventWhenClick : function(elem) {
		elem.onclick = function() {
			shinobi.fragmentsignup.signup();
		}
	},
	addEventWhenEnter : function(elem) {
		elem.addEventListener('keypress', function(e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.fragmentsignup.signup();
			}
		});
	},
	signup : function(signUpOption) {

		var request = shinobi.fragmentsignup.getInput();

		shinobi.fragmentsignup.checkInput(request, function(signUpRequest) {

			shinobi.fragmentsignup.sendRequest(signUpRequest);
		}, signUpOption);
	},

	sendRequest : function(signUpRequest) {
		shinobi.notification.notification.loading();
		shinobi.api.request(shinobi.coreapi.userApi + "createNewUser", JSON
				.stringify(signUpRequest), function(signUpResponse) {
			if (signUpResponse == 'update success') {
				shinobi.notification.notification.loaded();
				shinobi.fragmentsignup.checkMailProcess(signUpRequest);
				shinobi.fragmentsignup.showCheckMailModal(signUpRequest);
				shinobi.fragmentsignup.close()

			}
		});
	},

	showCheckMailModal : function(request) {
		var content = '<p>Xin chào <b>'
				+ request['lastname']
				+ ' '
				+ request['firstname']
				+ '</b>,<br>'
				+ 'Chúng tôi đã gửi mã xác nhận đến email: <b>'
				+ request['email']
				+ '</b><br>Vui lòng xác nhận địa chỉ email để hoàn tất đăng ký tài khoản.<br>Trân trọng. </p>';
		shinobi.notification.confirm(function() {

		}, {
			title : 'Xác nhận email',
			content : content,
			ishiddenfooter : true,
			modalsize : 'is-medium',
		});
	},
	checkMailProcess : function(signUpRequest) {
		if (shinobi.fragmentsignup.hasCheckTrashMail) {
			shinobi.api.request(shinobi.coreapi.mailApi + "sendMail", JSON
					.stringify(signUpRequest), function(sendMailResponse) {

			});
		}
	},

	getInput : function() {
		var formContainer = shinobi.fragmentsignup.modal
				.getElementsByClassName('form-container')[0];

		var listSnbKey = formContainer.querySelectorAll('[snb-key]');
		var request = {};
		for (var i = 0; i < listSnbKey.length; i++) {

			var key = listSnbKey[i].getAttribute('snb-key');
			var value = shinobi.util.getValueInput(listSnbKey[i]);
			request[key] = value;

		}
		return request;
	},

	checkInput : function(request, callback, signUpOption) {

		var formContainer = shinobi.fragmentsignup.modal
				.getElementsByClassName('form-container')[0];
		var hasFillAllInput = true;
		var entries = Object.entries(request);
		entries
				.forEach(function(item) {
					var key = item[0];
					var value = item[1];
					var elem = formContainer.querySelector('[snb-key="' + key
							+ '"]');
					if (typeof value == 'string' && value == ''
							|| typeof value == 'boolean' && value == false) {
						shinobi.notification.notification
								.error('Nhập đầy đủ thông tin và đồng ý các điều khoản');
						elem.classList.add('is-danger');
						hasFillAllInput = false;
					} else {
						elem.classList.remove('is-danger');
					}

				});

		if (hasFillAllInput) {
			if (request['password'] == request['confirmPassword']) {
				request['password'] = shinobi.util.sha256(request['password']);
				request['confirmPassword'] = shinobi.util
						.sha256(request['confirmPassword']);
				request['phonereligion'] = shinobi.fragmentsignup
						.getInternationalTelephoneCode();
				request['country'] = shinobi.fragmentsignup
						.getInternationalTelephoneCountry();
				if (signUpOption) {
					var method = signUpOption['method'];
					switch (method) {
					case 'google':
					case 'facebook':
						request['username'] = signUpOption['data']['username'];
						break;
					default:
						request['username'] = request['email'];
						break;
					}
				} else {
					request['username'] = request['email'];
				}

				if (typeof callback == 'function') {
					callback(request);
				}
			} else {
				shinobi.notification.notification
						.error('Xác nhận mật khẩu không trùng khớp');
			}
		}
	},

	getInternationalTelephoneCode : function() {
		return shinobi.util
				.getInternationalTelephoneCode(shinobi.fragmentsignup.intlTelInput);
	},
	getInternationalTelephoneCountry : function() {
		return shinobi.util
				.getInternationalTelephoneCountry(shinobi.fragmentsignup.intlTelInput);
	},

	addEventListButtonControl : function() {
		shinobi.fragmentsignup.listButtonControl = document
				.getElementsByClassName(shinobi.fragmentsignup.classButtonControlSelector);

		for (var i = 0; i < shinobi.fragmentsignup.listButtonControl.length; i++) {
			var button = shinobi.fragmentsignup.listButtonControl[i];
			button.onclick = function() {
				// hidden login modal
				shinobi.fragmentlogin.close();
				// show sign up modal
				shinobi.fragmentsignup.open();
			}
		}

	},
	open : function() {
		if (shinobi.fragmentsignup.modal != '') {
			shinobi.fragmentsignup.modal.classList.add('is-active');
		}

	},

	close : function() {
		if (shinobi.fragmentsignup.modal != '') {
			shinobi.fragmentsignup.modal.classList.remove('is-active');
		}
	},
};shinobi.gui = (function () {
  var constructor = function (url, option) {
    this.editors = [];
    this.tableId = "dataTable";
    this.detailPanelId = "detailpanel";
    this.buttonGroupId = "buttonGroup";
    this.apiurl = url;
    this.option = option;
    this.detailPanelElem = document.getElementById(this.detailPanelId);
    shinobi.tableHelper.getColname(this.tableId);
    this.tableObject = new shinobi.table(this.tableId);

    this.loadTable = function () {
      // this.tableObject = new shinobi.table(this.tableId);
      this.tableObject.viewDetailPanelId = this.detailPanelId;

      var colNames = this.tableObject.getColnames(this.tableId);
      var tableId = this.tableId;
      var renders = shinobi.tableHelper.getRender(tableId);
      if (!renders[0]) {
        renders[0] = this.tableObject.viewDetailRender;
      }

      var request = {};
      var recordNumber = shinobi.util.getRecordNumber(this.tableId);
      request.recordPerPage = isNaN(recordNumber) ? 10 : recordNumber;

      if (
        option != null &&
        option.hasOwnProperty["tableObjectOption"] &&
        option.tableObjectOption != null &&
        typeof option.tableObjectOption.staticfilters !== "undefined" &&
        option.tableObjectOption.staticfilters != null
      ) {
        this.tableObject.staticfilters = option.tableObjectOption.staticfilters;
      }

      var sort = {};
      sort.colname = "id";
      sort.value = "desc";

      this.tableObject.staticsorts[0] = sort;

      if (
        option != null &&
        option.hasOwnProperty["tableObjectOption"] &&
        option.tableObjectOption != null &&
        typeof option.tableObjectOption.hasCheckDuplicateFilterColumn !== "undefined" &&
        option.tableObjectOption.hasCheckDuplicateFilterColumn != null &&
        typeof option.tableObjectOption.checkDuplicateFilterColumnList !== "undefined" &&
        option.tableObjectOption.checkDuplicateFilterColumnList != null
      ) {
        this.tableObject.hasCheckDuplicateFilterColumn = option.tableObjectOption.hasCheckDuplicateFilterColumn;
        this.tableObject.checkDuplicateFilterColumnList = option.tableObjectOption.checkDuplicateFilterColumnList;
      }

      this.tableObject.initLoadApi(this.apiurl + "/findDataListExport", request, colNames, renders);

      return this;
    };

    this.createElem = function (nodetype, classlist) {
      var elem = document.createElement(nodetype);
      elem.classList.add(classlist);
      return elem;
    };

    this.buildViewPanelObject = function () {
      var object = this;
      var formElem = document.getElementById(this.detailPanelId);

      var snbElems = formElem.querySelectorAll("[snb-key]");

      var result = {};
      snbElems.forEach(function (elem) {
        var colname = elem.getAttribute("snb-key");

        if (elem.hasAttribute("snb-preprocess")) {
          shinobi.mapping.getValueElement(object.detailPanelElem, function (jsonMapping) {
            result[colname] = eval(elem.getAttribute("snb-preprocess"))(elem.value, {
              elem: elem,
              gui: object,
              all: jsonMapping,
            });
          });
        } else if (elem.hasAttribute("snb-editor-index")) {
          result[colname] = shinobiEditors[elem.getAttribute("snb-editor-index")].getData();
        } else if (elem.hasAttribute("snb-datatype")) {
          var datatype = elem.getAttribute("snb-datatype");

          if (datatype == "number") {
            result[colname] = Number(elem.value);
          }
        } else {
          result[colname] = elem.value;
        }
      });

      return result;
    };

    this.registerCreateButton = function () {
      var list = document.getElementById(this.buttonGroupId).getElementsByClassName("createButton");
      var gui = this;
      var createButton = list[0];
      var hasButton = true;
      if (option && option.hasOwnProperty("isHiddenCreateButton") && option["isHiddenCreateButton"] == true) {
        hasButton = false;
        createButton.classList.add("is-hidden");
      }

      if (hasButton) {
        createButton.onclick = function () {
          shinobi.mapping.getValue("#" + gui.detailPanelId, function (jsonMapping) {
            shinobi.notification.confirm(function () {
              gui.createProcess(jsonMapping);
            });
          });
        };
      }
    };

    this.createProcess = function (jsonMapping) {
      var gui = this;
      if (option && option.hasOwnProperty("createFunction")) {
        option["createFunction"](gui, jsonMapping);
        return;
      }
      if (option && option.hasOwnProperty("checkEmpty") && option["checkEmpty"]) {
        shinobi.mapping.getValueElement(
          gui.detailPanelElem,
          function (reJsonMapping) {
            delete reJsonMapping["id"];
            Object.values(reJsonMapping).includes("")
              ? shinobi.util.fillInputMessage()
              : gui.sendCreateRequest(jsonMapping);
          },
          {
            checkEmpty: true,
          }
        );
        return;
      }

      gui.sendCreateRequest(jsonMapping);
    };

    this.sendCreateRequest = function (jsonMapping) {
      var gui = this;
      delete jsonMapping.id;
      shinobi.notification.notification.loading();
      shinobi.api.request(gui.apiurl + "/create", JSON.stringify(jsonMapping), function (content) {
        shinobi.notification.notification.info(content);

        gui.loadTable();
      });
    };
    this.registerDeleteButton = function () {
      var list = document.getElementById(this.buttonGroupId).getElementsByClassName("deleteButton");
      var deleteButton = list[0];
      var gui = this;
      var hasButton = true;
      if (option && option.hasOwnProperty("isHiddenDeleteButton") && option["isHiddenDeleteButton"] == true) {
        hasButton = false;
        deleteButton.classList.add("is-hidden");
      }

      if (hasButton) {
        deleteButton.onclick = function () {
          gui.checkDetailPanelJsonHasId(gui, function (jsonMapping) {
            if (option && option.hasOwnProperty("deleteFunction")) {
              option["deleteFunction"](gui, jsonMapping);
            } else {
              shinobi.notification.notification.loading();
              shinobi.api.request(gui.apiurl + "/remove", JSON.stringify(jsonMapping), function (content) {
                shinobi.notification.notification.info(content);
                gui.loadTable();
              });
            }
          });
        };
      }
    };

    this.registerUpdateButton = function () {
      var updateButton = document.getElementById(this.buttonGroupId).getElementsByClassName("updateButton")[0];

      var gui = this;
      var hasButton = true;
      if (option && option.hasOwnProperty("isHiddenUpdateButton") && option["isHiddenUpdateButton"] == true) {
        hasButton = false;
        updateButton.classList.add("is-hidden");
      }
      if (hasButton) {
        updateButton.onclick = function () {
          gui.checkDetailPanelJsonHasId(gui, function (jsonMapping) {
            if (option && option.hasOwnProperty("updateFunction")) {
              option["updateFunction"](gui, jsonMapping);
            } else {
              gui.updateProcess(jsonMapping);
            }
          });
        };
      }
    };

    this.updateProcess = function (jsonMapping) {
      var gui = this;
      if (option && option.hasOwnProperty("updateFunction")) {
        option["updateFunction"](gui, jsonMapping);
        return;
      }
      if (option && option.hasOwnProperty("checkEmpty") && option["checkEmpty"]) {
        shinobi.mapping.getValueElement(
          gui.detailPanelElem,
          function (reJsonMapping) {
            Object.values(reJsonMapping).includes("")
              ? shinobi.util.fillInputMessage()
              : gui.sendUpdateRequest(jsonMapping);
          },
          {
            checkEmpty: true,
          }
        );
        return;
      }

      gui.sendUpdateRequest(jsonMapping);
    };

    this.sendUpdateRequest = function (jsonMapping) {
      var gui = this;
      shinobi.notification.notification.loading();

      shinobi.api.request(gui.apiurl + "/merge", JSON.stringify(jsonMapping), function (content) {
        shinobi.notification.notification.info(content);
        gui.loadTable();
      });
    };
    this.checkDetailPanelJsonHasId = function (gui, callback) {
      shinobi.mapping.getValue("#" + gui.detailPanelId, function (jsonMapping) {
        if (jsonMapping.hasOwnProperty("id") && jsonMapping["id"].trim() != "") {
          shinobi.notification.confirm(function () {
            if (typeof callback == "function") {
              callback(jsonMapping);
            }
          });
        } else {
          shinobi.notification.notification.error("Chưa chọn record nào trong danh sách để thao tác");
        }
      });
    };

    this.registerRefreshButton = function () {
      var list = document.getElementById(this.buttonGroupId).getElementsByClassName("refreshButton");

      var refreshButton = list[0];

      var table = this.tableObject;
      refreshButton.addEventListener("click", function () {
        location.reload();
      });
    };

    this.loadAll = function () {
      this.loadTable();
      this.registerCreateButton();
      this.registerRefreshButton();
      this.registerDeleteButton();
      this.registerUpdateButton();
    };
  };

  return constructor;
})();
shinobi.initbulma = {

	quickviews: [],
	calendars: '',
	tagsInput: '',
	iconpicker: '',
	bulmaSlider: '',

	build: function () {
		shinobi.initbulma.addEventNavbarBurger();
		shinobi.initbulma.addEventModal();
		shinobi.initbulma.addEventTabs();
		shinobi.initbulma.addEventDropdown();
		shinobi.initbulma.activeNavbarHeader();


		if (typeof bulmaSlider == 'function') {

			shinobi.initbulma.bulmaSlider = bulmaSlider.attach();
		}

		if (typeof bulmaTagsinput == 'function') {

			shinobi.initbulma.tagsInput = bulmaTagsinput.attach();
		}

		if (typeof bulmaIconpicker == 'function') {

			shinobi.initbulma.iconpicker = bulmaIconpicker.attach();
		}

		if (typeof bulmaCalendar == 'function') {

			shinobi.initbulma.calendars = bulmaCalendar.attach('[type="date"]:not(.is-init-bulma-false)',
				{
					'dateFormat': 'DD/MM/YYYY',
					'displayMode': 'dialog',
					closeOnOverlayClick: false,
				});

		}

	},

	addEventDropdown: function () {

		var dropdownList = document
			.querySelectorAll('.dropdown:not(.is-hoverable)');

		for (var i = 0; i < dropdownList.length; i++) {

			var dropdown = dropdownList[i];
			shinobi.initbulma.addEventDropdownElem(dropdown);
		}
	},

	addEventDropdownElem: function (dropdown) {
		var button = dropdown.getElementsByClassName('dropdown-trigger')[0]
			.getElementsByClassName('button')[0];
		if (button) {
			button.onclick = function () {
				dropdown.classList.toggle('is-active');
			}
		}
	},

	activeNavbarHeader: function () {

		var list = document.querySelectorAll('.navbar.is-init');
		for (var i = 0; i < list.length; i++) {
			var navbar = list[i];
			shinobi.initbulma.activeNavbar(navbar);
		}
	},

	activeNavbar: function (navbar) {
		var listItem = navbar
			.querySelectorAll('.navbar-item[href],.navbar-link[href]');
		var pathNameAppendSearch = shinobi.initbulma.getPathNameAppendSearch();
		for (var i = 0; i < listItem.length; i++) {
			var item = listItem[i];
			var href = item.getAttribute('href');

			if (pathNameAppendSearch.includes(href)) {
				item.classList.add('is-active');
				shinobi.initbulma.activeParentNavbarItem(item.parentNode);
			}
		}

		var refListItem = navbar
			.querySelectorAll('.navbar-item[ref-list],.navbar-link[ref-list]');

		for (var j = 0; j < refListItem.length; j++) {
			var item1 = refListItem[j];
			var refList = item1.getAttribute('ref-list').split(',');
			refList.forEach(function (refItem) {
				if (refItem == pathNameAppendSearch) {
					item1.classList.add('is-active');
					shinobi.initbulma.activeParentNavbarItem(item1.parentNode);
				}
			});
		}
	},

	getPathNameAppendSearch: function () {
		return window.location.pathname + window.location.search;
	},

	activeParentNavbarItem: function (parent) {

		if (parent.hasAttribute('class')) {
			var classList = parent.getAttribute('class');
			var listStopLoop = ['navbar-start', 'nabvar-end', 'navbar-menu',
				'navbar-brand', 'navbar'];
			listStopLoop.forEach(function (classItem) {
				if (classList.includes(classItem)) {
					return;
				}
			});

			if (classList.includes('navbar-item')
				&& classList.includes('has-dropdown')) {
				var navbarLink = parent.getElementsByClassName('navbar-link')[0];
				if (navbarLink) {
					navbarLink.classList.add('is-active');
				}
			} else {
				shinobi.initbulma.activeParentNavbarItem(parent.parentNode);
			}

		}
	},

	activeTab: function (listLi, li) {

		for (var l = 0; l < listLi.length; l++) {
			(listLi[l] == li) ? listLi[l].classList.add('is-active')
				: listLi[l].classList.remove('is-active');

			if (listLi[l].hasAttribute('tab-container-id')) {
				var container = document.getElementById(listLi[l].getAttribute('tab-container-id'));
				if (container) {
					(listLi[l] == li) ? container.classList.remove('is-hidden')
						: container.classList.add('is-hidden');
				}
			}
		}

	},

	addEventTabs: function () {
		var tabsList = document.querySelectorAll('.tabs.is-init');

		for (var i = 0; i < tabsList.length; i++) {
			shinobi.initbulma.addEvenOneTab(tabsList, i);
		}

	},

	addEvenOneTab: function (tabsList, i) {
		var tabs = tabsList[i];
		var listLi = tabs.getElementsByTagName('li');
		var classList = tabs.getAttribute('class');
		for (var l = 0; l < listLi.length; l++) {
			if (!classList.includes('is-not-active-click')) {
				listLi[l].onclick = function () {
					var li = this;
					shinobi.initbulma.activeTab(listLi, li);

				}
			}
			if (classList.includes('is-active-pathname')) {
				var pathname = shinobi.initbulma.getPathNameAppendSearch();
				var a = listLi[l].querySelector('a[href]');
				if (a) {
					var href = a.getAttribute('href');
					if (pathname.includes(href)) {
						listLi[l].classList.add('is-active');
					}
				}
			}
		}
	},

	addEventModal: function () {

		var listModal = document.querySelectorAll('.modal');

		listModal.forEach(function (item, index) {

			shinobi.initbulma.modalEventListener(item);
		});
	},

	modalOpen: function (modal) {
		modal.classList.add("is-active");
		document.documentElement.classList.add('is-clipped');
	},

	modalClose: function (modal) {
		modal.classList.remove("is-active");
		document.documentElement.classList.remove('is-clipped');
	},


	modalEventListener: function (modal) {

		var closeButtonList = modal
			.querySelectorAll('.delete,[aria-label="close"]');
		if (closeButtonList.length > 0) {
			var closeButton = closeButtonList[0];
			if (closeButton) {
				closeButton.onclick = function () {
					shinobi.initbulma.modalClose(modal);
				}
			}
		}

		var cancelModalButtonList = modal
			.getElementsByClassName("cancel-modal-button");

		for (var i = 0; i < cancelModalButtonList.length; i++) {

			cancelModalButtonList[i].onclick = function () {
				shinobi.initbulma.modalClose(modal);
			}
		}

		var modalBackground = modal.getElementsByClassName("modal-background");

		for (var j = 0; j < modalBackground.length; j++) {

			modalBackground[j].onclick = function () {
				shinobi.initbulma.modalClose(modal);
			}
		}

		window.addEventListener("keydown", function (event) {
			if (event.key == 'Escape') {
				shinobi.initbulma.modalClose(modal);
			}
		}, true);

		var footer = modal.getElementsByTagName("footer")[0];

		if (footer) {

			var buttonFooterList = footer.getElementsByTagName("button");

			for (var l in buttonFooterList) {

				buttonFooterList[l].onclick = function () {
					shinobi.initbulma.modalClose(modal);
				}
			}
		}

		if (modal.hasAttribute('control-button-list')) {

			var controlButtonList = modal.getAttribute('control-button-list')
				.split('|');

			for (var k = 0; k < controlButtonList.length; k++) {

				var item = document.getElementById(controlButtonList[k]);

				item.onclick = function () {
					shinobi.initbulma.modalOpen(modal);

					if (item.hasAttribute('snb-render')) {
						var value = item.getAttribute('snb-key');
						var render = item.getAttribute('snb-render');
						eval(render)(item, value);
					}
				}
			}
		}
	},

	addEventNavbarBurger: function () {

		var navbarBurgers = Array.prototype.slice.call(document
			.querySelectorAll('.navbar-burger'), 0);

		if (navbarBurgers.length > 0) {

			navbarBurgers.forEach(function (el) {
				el.addEventListener('click', function () {
					// Get the target from the "data-target" attribute
					var targetId = el.dataset.target;
					var target = document.getElementById(targetId);
					// Toggle the "is-active" class on both the "navbar-burger"
					// and the "navbar-menu"
					el.classList.toggle('is-active');
					target.classList.toggle('is-active');

				});
			});
		}
	},
};shinobi.language = {

	'currentPagelang': '',
	'existLangAttribte': 'snb-exist-lang',
	option: {},
	jsonArray: [],
	dataRender: {},
	hasChangeLanguage: true,
	warningList: [],

	'build': function (option) {

		this.option = option;
		this.setupOption();

		shinobi.language.renderLangCodeSelect(function () {
			shinobi.language.renderPageLanguage();

		});

	},

	setupOption: function () {
		var option = this.option;
		if (option) {
			if (option.hasOwnProperty('autoReload') && option['autoReload']) {
				setInterval(function () {
					shinobi.language.renderPageLanguage();
				}, 2000);
			}
		}
	},

	'renderPageLanguage': function () {

		if (shinobi.language.hasChangeLanguage) {
			shinobi.language.getLangCodeList(function () {
				shinobi.language.hasChangeLanguage = false;

				shinobi.language.buildDataRender(function () {
					shinobi.language.render();
				});
			})
		} else {
			shinobi.language.render();
		}

	},

	buildDataRender: function (callback) {
		shinobi.language.dataRender = {};
		shinobi.language.jsonArray
			.forEach(function (item) {

				shinobi.language.dataRender[item['resourcename']] = item['resourcevalue'];

			});

		if (typeof callback == 'function') {
			callback();
		}
	},
	'render': function () {

		var listSnbLang = document.querySelectorAll('[snb-lang]');
		for (var i = 0; i < listSnbLang.length; i++) {

			shinobi.language.renderElement(listSnbLang[i]);
		}
	},

	renderContainer: function (container) {

		var listSnbLang = container.querySelectorAll('[snb-lang]');
		for (var i = 0; i < listSnbLang.length; i++) {

			shinobi.language.renderElement(listSnbLang[i]);
		}
	},
	renderElement: function (elem) {

		var currentLangCode = window.localStorage.getItem('currentLangCode');
		if (!elem.hasAttribute('language')
			|| elem.getAttribute('language') != currentLangCode) {

			var dataRender = shinobi.language.dataRender;

			var listAttribute = Object.values(elem.attributes);

			var listSnbLangAttribute = listAttribute.filter(function (item) {

				return item.name.includes('snb-lang');
			});

			if (listSnbLangAttribute.length > 0) {
				var attrValue;
				if (listSnbLangAttribute.length == 1) {

					if (dataRender
						.hasOwnProperty(listSnbLangAttribute[0].value)) {
						elem.innerHTML = dataRender[listSnbLangAttribute[0].value];
					} else {

						attrValue = listSnbLangAttribute[0].value;

						shinobi.language.warningElem(elem, attrValue);

					}
				} else {
					listSnbLangAttribute.forEach(function (attributeItem) {
						var attrName = attributeItem.name;
						attrValue = attributeItem.value;
						if (attrName.includes('snb-lang-')) {
							var attributeKey = attrName
								.replace('snb-lang-', '');
							if (dataRender.hasOwnProperty(attrValue)) {
								var attributeData = dataRender[attrValue];

								if (attributeKey == 'innerhtml') {
									elem.innerHTML = attributeData
								} else if (attributeKey == 'value') {
									elem.value = attributeData;
								} else {
									elem.setAttribute(attributeKey,
										attributeData);

								}
							} else {

								shinobi.language.warningElem(elem, attrValue);

							}

						}
					});

				}
				elem.setAttribute('language', currentLangCode)

			}
		}

	},

	warningElem: function (elem, attrValue) {
		if (!shinobi.language.warningList.includes(attrValue)) {
			console.log('---');
			console.log(elem);
			console.log('resourcename: ' + attrValue + '    =    ????');
			shinobi.language.warningList.push(attrValue);
		}
	},

	'renderLangCodeSelect': function (callback) {

		var currentLangCode = window.localStorage.getItem('currentLangCode');
		var selectLangcode = document.getElementById('selectLangcode');
		if (selectLangcode) {
			if (!currentLangCode) {

				window.localStorage.setItem('currentLangCode',
					selectLangcode.value);

			} else {

				selectLangcode.value = currentLangCode;

			}

			selectLangcode.onchange = function () {

				window.localStorage.setItem('currentLangCode', this.value);
				if (shinobi.hasOwnProperty('userstorage')) {
					shinobi.userstorage.updateStorage();
				}
				shinobi.language.hasChangeLanguage = true;

				shinobi.language.renderPageLanguage();

				if (shinobi.language.option.hasOwnProperty('onchangeLangCodeSelectCallback')) {
					shinobi.language.option.onchangeLangCodeSelectCallback();
				}

			}
		} else {
			console.log(' not declare language select');
			window.localStorage.setItem('currentLangCode', 'VN');

		}

		if (typeof callback == 'function') {
			callback();
		}

	},

	'getLangCodeList': function (callback) {

		var currentLangCode = window.localStorage.getItem('currentLangCode');

		var request = {};

		request.langcode = currentLangCode;

		var url = (typeof shinobi.coreapi == 'object' && shinobi.coreapi.languageApi) ? shinobi.coreapi.languageApi
			: '/api/StaticPagePublicApi/';

		shinobi.cacheapi.request(url + 'getListPageCode', JSON
			.stringify(request), function (response) {
				shinobi.language.jsonArray = JSON.parse(response);
				callback(response);
			});

	},

	'free': '<span snb-lang="PAGECODE_FREE"></span>',
	'subscribed': '<span snb-lang="PAGECODE_SUBCRIBED"></span>',
	'onlyFollower': '<span snb-lang="PAGECODE_ONLYFORFOLLOWERS"></span>',
};/* usage: 
 * shinobi.mapping.render("body",json) 
 * shinobi.mapping.render("#elemid",json)
 * shinobi.mapping.render(".classname",json)
 * 
 * HTML:
 * <div snb-key="keyvalue"></div>
 * 
 *  */

shinobi.mapping = {
    'render': function (pattern, json) {
        var jsonArr = JSON.parse(json);

        var searchList = document.querySelectorAll(pattern);

        for (var index = 0; index < searchList.length; index++) {
            var search = searchList[index];

            shinobi.mapping.renderElement(search, jsonArr);
        }
    },
    'renderElement': function (search, jsonArr) {
        for (var elem in jsonArr) {
            var selectors = search.querySelectorAll("[snb-key=" + elem + "]");

            // check current node has snb-key=elem
            if (selectors.length == 0) {

                if (search.hasAttribute('snb-key')) {

                    if (search.getAttribute('snb-key') == elem) {

                        shinobi.mapping.renderSelector(search, jsonArr, elem);
                    }
                }
            }
            //

            for (var i = 0; i < selectors.length; i++) {
                shinobi.mapping.renderSelector(selectors[i], jsonArr, elem);
            }
        }
    },
    'renderSelector': function (selector, jsonArr, elem) {

        var nodeType = selector.nodeType;
        var value = jsonArr[elem];
        if (selector.hasAttribute("snb-render")) {
            var render = selector.getAttribute("snb-render");
            var option = {
                type: 'mapping',
            };
            eval(render)(selector, value, jsonArr);

            return;
        }

        // check formatter
        if (selector.hasAttribute("snb-format")) {
            var formatter = selector.getAttribute("snb-format");

            if ("number" === formatter) {
                var numberValue = Number(value);
                value = numberValue.format(0, 3, ',', '.');
            }

        }

        if (nodeType === 3) {
            selector.innerHTML = value;
        } else if (nodeType === 1) {

            // refactor 12/04/2020
            // check has render attribute

            if (selector.hasAttribute("snb-editor-index")) {
                if (typeof shinobiEditors == 'object') {
                    shinobiEditors[selector.getAttribute("snb-editor-index")]
                        .setData(value);
                } else {
                    if (typeof CKEDITOR == 'object' &&
                        selector.hasAttribute('id')) {
                        (CKEDITOR.instances.hasOwnProperty(selector.id)) ? CKEDITOR.instances[selector.id]
                            .setData(value) : console.log('elem has id' + selector.id +
                                ' has not been replace by CKEDITOR ');

                    } else {
                        console.log('CKEDITOR could not be declare');
                    }
                }

            } else {
                var attributes = selector.attributes;

                var isFound = false;
                for (var i = attributes.length - 1; i >= 0; i--) {
                    var attributeName = attributes[i].name;
                    var attributeValue = attributes[i].value;

                    var index = attributeName.search("snb-key-");
                    if (index >= 0) {
                        isFound = true;
                        var ref = attributeName.substring(8);

                        switch (ref) {
                            case 'value':
                                selector.value = jsonArr[attributeValue];
                                selector.setAttribute(ref, jsonArr[attributeValue]);
                                break;
                            case 'innerhtml':
                                selector.innerHTML = jsonArr[attributeValue];
                                break;
                            default:
                                selector.setAttribute(ref, jsonArr[attributeValue]);
                                break;
                        }
                    }
                }
                if (isFound === false) {

                    if (!['INPUT', 'SELECT', 'TEXTAREA']
                        .includes(selector.tagName)) {
                        selector.innerHTML = value;
                    } else {
                        value = shinobi.util.decodeValue(value);
                        switch (selector.tagName) {

                            case 'OPTION':
                                if (selector.hasAttribute("snb-key-innerhtml")) {
                                    selector.innerHTML = value;
                                }
                                break;
                            case 'INPUT':
                                switch (selector.type) {
                                    case 'checkbox':
                                        selector.checked = JSON.parse(value);
                                        break;
                                    case 'radio':
                                        if (value) {
                                            // var name = selector.getAttribute('name');
                                            // var checkedInput = document
                                            // 	.querySelector('input[type="radio"][name="'
                                            // 		+ name
                                            // 		+ '"][radio-value="'
                                            // 		+ value + '"]');
                                            // 		console.log(checkedInput);
                                            // if (checkedInput) {
                                            // 	checkedInput.checked = true;
                                            // }
                                            if (selector.hasAttribute('radio-value')) {
                                                (selector.getAttribute('radio-value') == value) ? selector.checked = true : selector.checked = false;
                                            }
                                        }
                                        break;
                                    default:
                                        selector.value = value;
                                        break;
                                }
                                break;
                            case 'SELECT':
                                selector.value = value;
                                break;

                            default:
                                selector.value = value;
                                break;
                        }
                    }
                }
            }

        }
    },
    'applySnbFormat': function (selector, value) {

    },
    getValue: function (selector, callback, option) {
        var elem = document.querySelector(selector);
        shinobi.mapping.getValueElement(elem, callback, option);
    },
    getValueElement: function (elem, callback, option) {
        var listSnb = elem.querySelectorAll('[snb-key]');
        var listRadioNameHasGetValue = [];
        var jsonMapping = {};
        listSnb
            .forEach(function (item) {

                var key = item.getAttribute('snb-key');

                if (item.hasAttribute('snb-editor-index')) {
                    jsonMapping[key] = shinobi.mapping
                        .getValueShinobiEditor(item, {
                            container: elem
                        });

                } else {
                    var getValueMappingNormalTagOption = {
                        container: elem,
                        listRadioNameHasGetValue: listRadioNameHasGetValue,
                    };
                    if (option && option.hasOwnProperty('getHtml') && option.getHtml) {
                        getValueMappingNormalTagOption.getHtml = true;
                    }
                    if (option && option.hasOwnProperty('getText') && option.getText) {
                        getValueMappingNormalTagOption.getText = true;
                    }
                    jsonMapping[key] = shinobi.mapping
                        .getValueMappingNormalTag(
                            item, getValueMappingNormalTagOption
                        )
                }

                shinobi.mapping.handleOptionMapping(item, jsonMapping,
                    option);
            });

        if (typeof callback == 'function') {
            callback(jsonMapping);
        }
    },

    handleOptionMapping: function (item, jsonMapping, option) {
        if (option) {
            var tagName = item.tagName;
            var key = item.getAttribute('snb-key');

            if (option.hasOwnProperty('checkEmpty')) {
                var isEmpty = (jsonMapping[key] == '') ? true : false;
                if (!item.classList.contains('disable-checkempty')) {


                    switch (tagName) {
                        case 'INPUT':
                        case 'TEXTAREA':
                            (isEmpty) ? item.classList.add('is-danger') : item.classList.remove('is-danger');
                            break;
                        case 'SELECT':
                            (isEmpty) ? item.parentElement.classList.add('is-danger') : item.parentElement.classList.remove('is-danger');
                            break;
                        default:
                            break;
                    }
                }

                if (item.hasAttribute('snb-editor-index')) {
                    var editorItem = CKEDITOR.instances[item.getAttribute('id')].container.$;
                    if (isEmpty) {
                        editorItem.classList.add('input');
                        editorItem.classList.add('is-danger');
                    } else {
                        editorItem.classList.remove('input');
                        editorItem.classList.remove('is-danger');
                    }

                }

                if (tagName == 'INPUT' && item.getAttribute('type') == 'file') {
                    var fileParentInput = shinobi.util.getParentElementHasAttribute(item, {
                        type: 'class',
                        value: 'file',
                    });



                    (isEmpty) ? fileParentInput.classList.add('is-danger') : fileParentInput.classList.remove('is-danger');
                }

                if (tagName == 'INPUT' && item.hasAttribute('snb-date-filter')) {
                    (isEmpty) ? item.parentElement.classList.add('has-border-danger') : item.parentElement.classList.remove('has-border-danger');
                }

            }
        }
    },

    getValueMappingNormalTag: function (item, option) {
        var returnValue;
        var listRadioNameHasGetValue = option['listRadioNameHasGetValue'];
        var tagName = item.tagName;
        switch (tagName) {
            case 'INPUT':
                var type = (item.hasAttribute('type')) ? item.getAttribute('type') :
                    'text';

                switch (type) {

                    case 'radio':
                        var name = item.getAttribute('name');
                        if (name) {
                            listRadioNameHasGetValue.push(name);
                            var checkedValue = document
                                .querySelector('input[type="radio"][name="' + name +
                                    '"]:checked');
                            returnValue = (checkedValue) ? checkedValue
                                .getAttribute('radio-value') : false;

                        } else {
                            returnValue = item.checked;
                        }
                        break;
                    case 'file':
                        returnValue = (item.hasAttribute('image-url')) ? item
                            .getAttribute('image-url') : item.value;
                        break;
                    case 'tags':
                        var tagInput = shinobi.util.getTagInputMappingElem(item);
                        if (tagInput) {
                            returnValue = tagInput.tags.toString();
                        }
                        break;
                    case 'checkbox':
                        returnValue = item.checked;
                        break;
                    case 'text':
                    default:
                        returnValue = item.value.trim();
                        break;
                }
                break;
            case 'SELECT':
            case 'TEXTAREA':
                returnValue = item.value.trim();
                break;
            default:

                if (option && option.hasOwnProperty('getHtml') && option.getHtml) {
                    returnValue = item.innerHTML.trim();
                }
                if (option && option.hasOwnProperty('getText') && option.getText) {
                    returnValue = item.innerText.trim();
                }
                break;
        }

        returnValue = shinobi.mapping.checkPreProcess(item, {
            container: option['container'],
            returnValue: returnValue,
        });

        return returnValue;
    },

    replaceFormWithLabel: function (selector) {
        shinobi.mapping.replaceFormWithLabelElement(document.querySelector(selector));
    },

    replaceFormWithLabelElement: function (elem) {
        var listSnb = elem.querySelectorAll('[snb-key]');
        for (var i = 0; i < listSnb.length; i++) {
            shinobi.mapping.replaceFormWithLabelSnbKey(listSnb[i]);
        }
    },

    replaceFormWithLabelSnbKey: function (item) {
        var tagName = item.tagName;
        var label = document.createElement('p');
        var value = item.value;
        label.setAttribute('class', 'is-italic');
        console.log(item);
        if (['INPUT', 'SELECT', 'TEXTAREA'].includes(tagName)) {

            switch (tagName) {
                case 'SELECT':
                    var content = (item.selectedIndex > 0) ? item.options[item.selectedIndex].text : '';
                    label.innerHTML = content;
                    item.parentElement.parentElement.replaceChild(label, item.parentElement);
                    break;
                case 'TEXTAREA':
                case 'INPUT':
                default:
                    label.innerHTML = value;
                    item.parentElement.replaceChild(label, item);
                    break;

            }

        }
    },

    checkPreProcess: function (item, option) {
        var inputValue = option['returnValue'];
        var container = option['container'];
        var outputValue = inputValue;

        if (item.hasAttribute('snb-preprocess')) {
            outputValue = eval(item.getAttribute("snb-preprocess"))(inputValue, {
                elem: item,
                container: container,
            })
        }

        if (item.getAttribute("snb-datatype")) {
            var newValueWithDatatype = JSON.parse(outputValue);
            outputValue = (newValueWithDatatype) ? newValueWithDatatype :
                outputValue;
        }

        return outputValue;
    },

    getValueShinobiEditor: function (item, option) {
        var returnValue;
        if (typeof shinobiEditors == 'object') {
            returnValue = shinobiEditors[item.getAttribute("snb-editor-index")]
                .getData();
        } else {
            if (typeof CKEDITOR == 'object' && item.hasAttribute('id')) {
                returnValue = (CKEDITOR.instances.hasOwnProperty(item.id)) ? CKEDITOR.instances[item.id]
                    .getData() :
                    '';

            } else {
                returnValue = '';
            }
        }

        returnValue = shinobi.mapping.checkPreProcess(item, {
            container: option['container'],
            returnValue: returnValue,
        });

        return returnValue;
    },
    clear: function (selector, callback, option) {
        var elem = document.querySelector(selector);
        shinobi.mapping.clearElement(elem, callback, option);
    },

    clearElement: function (elem, callback, option) {
        var listSnb = elem.querySelectorAll('[snb-key]');
        listSnb.forEach(function (item) {
            var tagName = item.tagName;
            switch (tagName) {
                case 'INPUT':
                    var type = item.type;
                    switch (type) {
                        case 'checkbox':
                        case 'radio':
                            item.checked = false;
                            break;
                        case 'file':
                            (item.hasAttribute('image-url')) ? item
                                .removeAttribute('image-url') : item.value = '';
                            var name = item.parentElement.querySelector('.file-name');
                            if (name) {
                                name.innerHTML = '';
                            }
                            var parent = shinobi.util.getParentElementHasAttribute(item, {
                                type: 'class',
                                value: 'field'
                            })

                            if (parent) {
                                var info = parent.querySelector('.image-info');
                                if (info) {
                                    info.remove();
                                }
                            }
                            break;
                        case 'text':
                        default:
                            item.value = '';
                            break;
                    }
                    break;
                case 'SELECT':
                case 'TEXTAREA':
                    item.value = '';
                    break;
                default:
                    break;
            }

            var attributes = item.attributes;

            for (var i = attributes.length - 1; i >= 0; i--) {
                var attributeName = attributes[i].name;

                var index = attributeName.search("snb-key-");
                if (index >= 0) {
                    var ref = attributeName.substring(8);

                    switch (ref) {
                        case 'value':
                            item.value = '';
                            item.removeAttribute(ref);
                            break;
                        case 'innerhtml':
                            item.innerHTML = '';
                            break;
                        default:
                            item.removeAttribute(ref);
                            break;
                    }
                }
            }
        });

        if (typeof callback == 'function') {
            callback();
        }
    },
};shinobi.menu = {

	'moduleTable': '',

	'tableId': 'dataTable',

	'previewPatern': '#previewContainer',

	'build': function () {

		shinobi.menu.renderListModule();

		shinobi.menu.addEventAddSubMenu();

		shinobi.menu.addEventIconPicker();
	},

	'addEventIconPicker': function () {

		if (!shinobi.initbulma) {
			bulmaIconpicker.attach();
		}

		setTimeout(function () {

			var iconpickerModal = document
				.getElementsByClassName('iconpicker-modal')[0];

			iconpickerModal.classList.add('is-medium');

		}, 2000);

	},

	'addEventAddSubMenu': function () {

		var createSubmenuButton = document
			.getElementById('createSubmenuButton');
		createSubmenuButton.onclick = function () {

			var previewContainer = document.getElementById('previewContainer');

			var parentMenuData = {};
			// parentMenuData.menuparent = null;
			parentMenuData.modulename = previewContainer.getAttribute('value');

			shinobi.menu
				.activeMenuItemInfomationModal(
					parentMenuData,
					function (menuData) {
						shinobi.menu
							.createAndInsertMenuItemChildNode(menuData);
					});
		}

	},
	'renderListModule': function () {

		shinobi.menu.moduleTable = new shinobi.table(shinobi.menu.tableId);
		// table1.viewDetailPanelId = "detailpanel";

		var colNames = shinobi.menu.moduleTable
			.getColnames(shinobi.menu.tableId);

		var renders = [];
		renders[0] = shinobi.menu.viewMenuStructure;
		// renders[1] = table1.numberFormatRender;
		// renders[2] = erLib.renderUserTypeTable;
		// renders[3] = table1.inputableRender;

		var request = {};
		request.recordPerPage = shinobi.util
			.getRecordNumber(shinobi.menu.tableId);

		var filter = {};
		filter.colname = "id";
		filter.operator = ">";
		filter.value = 0;

		shinobi.menu.moduleTable.staticfilters[0] = filter;

		var sort = {};
		sort.colname = "id";
		sort.value = "desc";

		shinobi.menu.moduleTable.sorts[0] = sort;

		shinobi.menu.moduleTable
			.initLoadApi("/authenapi/ModuleApi/findDataList", request,
				colNames, renders);

	},

	'viewMenuStructure': function (elem, row, col) {

		var moduleName = elem.innerHTML;

		elem.innerHTML = '<a class="button is-small is-icon is-info"><span class="icon"><i class="fal fa-search"></i></span></a>';

		elem.onclick = function () {

			shinobi.util.removeClass('menuButtonGroup', 'is-hidden');

			shinobi.menu.createStructure(moduleName);

		}
	},

	'createStructure': function (moduleName) {

		shinobi.menu.getModuleMenuData(moduleName, function (menuData) {

			var previewContainer = document.getElementById('previewContainer');
			previewContainer.innerHTML = '';

			previewContainer.setAttribute('value', moduleName);

			shinobi.menurender.build(shinobi.menu.previewPatern, menuData);

			shinobi.menurender.showAllMenu(shinobi.menu.previewPatern);

			setTimeout(function () {

				shinobi.menurender.showAllMenu(shinobi.menu.previewPatern);
			}, 1000);

			shinobi.menu.addEventInsertChildNode(shinobi.menu.previewPatern);

			shinobi.menu.addEventDeleteMenuItem(shinobi.menu.previewPatern);

			shinobi.menu.addEventUpdateMenuItem(shinobi.menu.previewPatern);

			shinobi.menu.addEventMoveUpMenuItem(shinobi.menu.previewPatern);

			shinobi.menu.addEventMoveDownMenuItem(shinobi.menu.previewPatern);

		});

	},

	'addEventMoveDownMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addMoveDownItemButton(listMenuItem, i);

		}
	},

	'addMoveDownItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon tooltip');
		span.setAttribute('data-tooltip', 'Chuyển xuống');
		span.innerHTML = '<i class="fal fa-arrow-down"></i>';

		var item = listMenuItem[i];

		if (item.parentNode.nextElementSibling) {

			// item.insertBefore(span, item.firstChild);
			item.appendChild(span);

			span.onclick = function () {

				var parentMenuData = shinobi.menu.getParentMenuData(this);

				parentMenuData.menucode = parentMenuData.menuparent;

				shinobi.menu.callApiUpdateMenu(
					'/authenapi/MenuApi/moveMenuDown', parentMenuData);

			}
		}

	},

	'addEventMoveUpMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addMoveUpItemButton(listMenuItem, i);

		}
	},

	'addMoveUpItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon tooltip');
		span.setAttribute('data-tooltip', 'Chuyển lên');
		span.innerHTML = '<i class="fal fa-arrow-up"></i>';

		var item = listMenuItem[i];

		if (item.parentNode.previousElementSibling) {

			// item.insertBefore(span, item.firstChild);
			item.appendChild(span);

			span.onclick = function () {

				var parentMenuData = shinobi.menu.getParentMenuData(this);

				parentMenuData.menucode = parentMenuData.menuparent;

				shinobi.menu.callApiUpdateMenu('/authenapi/MenuApi/moveMenuUp',
					parentMenuData);

			}
		}
	},

	'callApiUpdateMenu': function (api, parentMenuData) {
		shinobi.notification.notification.loading();
		shinobi.api.request(api, JSON.stringify(parentMenuData), function (
			response) {

			if (response == 'update success') {

				shinobi.notification.notification.info('Cập nhật thành công');
				setTimeout(function () {
					shinobi.menu.createStructure(parentMenuData.modulename);
				}, 1000)
			}
		})
	},

	'addEventUpdateMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addUpdateItemButton(listMenuItem, i);

		}
	},

	'addUpdateItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon has-text-info tooltip');
		span.setAttribute('data-tooltip', 'Chỉnh sửa');
		span.innerHTML = '<i class="fal fa-pen"></i>';

		var item = listMenuItem[i];

		// item.insertBefore(span, item.firstChild);
		item.appendChild(span);

		span.onclick = function () {

			var parentMenuData = shinobi.menu.getParentMenuData(this);
			var aTag = item.getElementsByTagName('a')[0];
			parentMenuData.menudes = aTag.getAttribute('title');
			parentMenuData.menucode = aTag.getAttribute('id');
			parentMenuData.menuicon = aTag.getAttribute('icon-class');
			parentMenuData.menuname = aTag.innerHTML;
			parentMenuData.menuurl = aTag.getAttribute('href');
			shinobi.menu
				.activeMenuItemInfomationModal(
					parentMenuData,
					function (menuData) {

						menuData.menucode = parentMenuData.menucode;

						shinobi.api
							.request(
								'/authenapi/MenuApi/updateMenu',
								JSON.stringify(menuData),
								function (response) {

									if (response == 'update success') {

										shinobi.notification.notification
											.info('Cập nhật thành công');
										setTimeout(
											function () {
												shinobi.menu
													.createStructure(parentMenuData.modulename);
											}, 1000)
									}
								});
					});

		}

	},

	'addEventDeleteMenuItem': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addDeleteItemButton(listMenuItem, i);

		}
	},

	'addDeleteItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon has-text-danger tooltip');
		span.setAttribute('data-tooltip', 'Xóa');
		span.innerHTML = '<i class="fal fa-times"></i>';

		var item = listMenuItem[i];

		// item.insertBefore(span, item.firstChild);
		item.appendChild(span);

		span.onclick = function () {

			var parentMenuData = shinobi.menu.getParentMenuData(this);

			var confirmRemoveMenuItemModal = document
				.getElementById('confirmRemoveMenuItemModal');
			confirmRemoveMenuItemModal.classList.add('is-active');

			var acceptRemoveMenuItemModal = document
				.getElementById('acceptRemoveMenuItemModal');

			acceptRemoveMenuItemModal.onclick = function () {

				parentMenuData.menucode = parentMenuData.menuparent;

				delete parentMenuData.menuparent;

				shinobi.api
					.request(
						'/authenapi/MenuApi/deleteMenu',
						JSON.stringify(parentMenuData),
						function (response) {

							if (response == 'update success') {

								shinobi.notification.notification
									.info('Xóa thành công');
								setTimeout(
									function () {
										shinobi.menu
											.createStructure(parentMenuData.modulename);
									}, 1000)
							}
						})

				confirmRemoveMenuItemModal.classList.remove('is-active');

			}

		}

	},

	'activeMenuItemInfomationModal': function (parentMenuData, callback) {

		if (!parentMenuData.menudes) {

			parentMenuData.menudes = '';
		}
		if (!parentMenuData.menuicon) {

			parentMenuData.menuicon = shinobi.menurender.defaultIcon;
		}
		if (!parentMenuData.menuname) {

			parentMenuData.menuname = '';
		}
		if (!parentMenuData.menuurl) {

			parentMenuData.menuurl = '';
		}

		var menuItemInfomationModal = document
			.getElementById('menuItemInfomationModal');

		if (!parentMenuData.menuparent) {

			menuItemInfomationModal.querySelectorAll('[snb-key=menuparent]')[0]
				.removeAttribute('value');
		}
		var previewIcon = menuItemInfomationModal
			.getElementsByClassName('iconpicker-preview')[0];

		previewIcon.innerHTML = '<i snb-key="menuicon" snb-key-class="menuicon" class="iconpicker-icon-preview icon-menu"></i>';

		menuItemInfomationModal.classList.add('is-active');

		shinobi.mapping.render('#menuItemInfomationModal', JSON
			.stringify(parentMenuData));

		var acceptModalButton = document.getElementById('acceptModalButton');

		acceptModalButton.onclick = function () {

			var menuData = shinobi.menu.getModalInput();

			callback(menuData);

			menuItemInfomationModal.classList.remove('is-active');

		}
	},

	'addEventInsertChildNode': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var listMenuItem = container.getElementsByClassName('shinobimenu-item');

		for (var i = 0; i < listMenuItem.length; i++) {

			shinobi.menu.addInsertItemButton(listMenuItem, i);

		}

	},
	'addInsertItemButton': function (listMenuItem, i) {

		var span = document.createElement('span');
		span.setAttribute('class', 'icon has-text-success tooltip');
		span.setAttribute('data-tooltip', 'Thêm menu con');
		span.innerHTML = '<i class="fal fa-plus"></i>';

		var item = listMenuItem[i];

		// item.insertBefore(span, item.firstChild);
		item.appendChild(span);

		span.onclick = function () {

			var parentMenuData = shinobi.menu.getParentMenuData(this);

			shinobi.menu
				.activeMenuItemInfomationModal(
					parentMenuData,
					function (menuData) {
						shinobi.menu
							.createAndInsertMenuItemChildNode(menuData);
					});

		}

		// remove event toggle
		item.onclick = function () {

		}
	},

	'createAndInsertMenuItemChildNode': function (menuData) {

		shinobi.notification.notification.loading();

		shinobi.api.request('/authenapi/MenuApi/createMenu', JSON
			.stringify(menuData), function (response) {

				if (response == 'update success') {

					shinobi.notification.notification.info('Tạo mới thành công');

					setTimeout(function () {
						shinobi.menu.createStructure(menuData.modulename);
					}, 1000)

				}
			})

	},
	'getParentMenuData': function (iconElem) {

		var menuItem = iconElem.parentNode;

		var aTag = menuItem.getElementsByTagName('a')[0];

		var previewContainer = document.getElementById('previewContainer');

		var object = {};

		object.menuparent = aTag.getAttribute('id');
		object.modulename = previewContainer.getAttribute('value');

		return object;

	},

	'getModalInput': function () {

		var menuItemInfomationModal = document
			.getElementById('menuItemInfomationModal');

		var listSnbKey = menuItemInfomationModal.querySelectorAll('[snb-key]');

		var object = {};

		for (var i = 0; i < listSnbKey.length; i++) {

			var snbKey = listSnbKey[i].getAttribute('snb-key');

			var value = listSnbKey[i].value;

			if (value != '') {

				object[snbKey] = value;
			}

		}

		var iconpickerPreview = document
			.getElementsByClassName('iconpicker-preview')[0];
		var iconClass = iconpickerPreview.getElementsByTagName('i')[0]
			.getAttribute('class');
		object.menuicon = iconClass;
		return object;
	},
	'getModuleMenuData': function (moduleName, callback) {

		var request = {};
		request.modulename = moduleName;
		console.log(window.localStorage.getItem("currentModule"));
		console.log(moduleName);
		shinobi.notification.notification.loading();

		shinobi.api.request('/authenapi/MenuApi/getListMenu', JSON
			.stringify(request), function (response) {

				var jsonArr = JSON.parse(response);
				shinobi.notification.notification.loaded();

				callback(jsonArr);
			});
	},

};shinobi.menumodule = {

	'currentModule': '',

	'patern': '',

	'container': '',

	'build': function (patern, option) {

		shinobi.menumodule.patern = patern;

		var container = document.querySelectorAll(patern)[0];

		shinobi.menumodule.container = container;

		shinobi.menumodule.render(option);

	},

	'activeCurrentTab': function (container, option) {
		var shinobimenu = container;
		var hrefList = shinobimenu.querySelectorAll('[href]');

		for (var j = 0; j < hrefList.length; j++) {
			var pathname = window.location.pathname;
			var href = hrefList[j].getAttribute('href');
			if (option && option.hasOwnProperty('includesSearch')) {
				if (option.includesSearch) {
					pathname = pathname + window.location.search;
				}
			}

			if (option && option.hasOwnProperty('notCareSearch')) {
				if (option.notCareSearch) {
					pathname = window.location.pathname;
					href = (href.indexOf('?')) ? href.slice(0, href.indexOf('?')) : href;
				}
			}
			if (href == pathname) {

				hrefList[j].parentNode.classList.add('is-active');

				shinobi.menumodule
					.openParentNode(hrefList[j].parentNode.parentNode);

			}
		}
	},

	'renderMenuModuleSelectHeader': function (query) {

		var currentModule = window.localStorage.getItem('currentModule');
		if (!currentModule || currentModule == '') {
			shinobi.menumodule.setDefaultModule(function () {
				shinobi.menumodule.buildHeaderSelectMenuModule(query);
			});
		} else {
			shinobi.menumodule.buildHeaderSelectMenuModule(query);
		}

	},

	buildHeaderSelectMenuModule: function (query) {
		var container = document.querySelector(query);

		container
			.setAttribute('class', 'navbar-item has-dropdown is-hoverable');

		var a = document.createElement('a');
		a.setAttribute('class', 'navbar-link');
		a.innerHTML = '<span class="icon"><i class="fal fa-cog"></i></span> <span>' + window.localStorage.getItem('currentModule') + '</span>';

		container.appendChild(a);

		shinobi.menumodule.getListModule(function (listMenu) {

			var listMenuData = JSON.parse(listMenu);

			var menuContainer = document.createElement('div');

			menuContainer.setAttribute('class', 'navbar-dropdown is-right');

			container.appendChild(menuContainer);

			for (var i = 0; i < listMenuData.length; i++) {

				shinobi.menumodule.buildHeaderMenuModuleItem(menuContainer,
					listMenuData, i);
			}

		})
	},

	'buildHeaderMenuModuleItem': function (menuContainer, listMenuData, i) {

		var item = document.createElement('a');
		item.setAttribute('class', 'navbar-item');
		item.innerHTML = listMenuData[i];
		menuContainer.appendChild(item);

		item.onclick = function () {
			var value = this.innerHTML;
			window.localStorage.setItem('currentModule', value);
			shinobi.menumodule.getListMenuModule(value, function (data) {
				if (data.length > 0) {
					window.location.href = data[0].menuurl;
				} else {
					location.reload();
				}
			});
		}

	},

	'setDefaultModule': function (callback) {

		shinobi.menumodule.getListModule(function (listMenuData) {

			var data = JSON.parse(listMenuData);

			if (data[0]) {

				// if (!window.localStorage.getItem('currentModule')) {

				window.localStorage.setItem('currentModule', data[0]);

				// }

				if (typeof callback == 'function') {

					callback()
				}

			}

		});
	},

	'getListModule': function (callback) {

		var request = {};
		shinobi.cacheapi.request('/authenapi/ModuleApi/getUserModules', JSON
			.stringify(request), function (response) {
				callback(response);
			})

	},

	'openParentNode': function (currentItem, container) {

		setTimeout(function () {

			// menuParent.scrollIntoView();

			var menu = container;
			var item = currentItem.getElementsByTagName('a')[0].parentNode;
			var a = Number(item + (5 * 17));
			if (container) {
				if (container.hasOwnProperty('scrollTop')) {
					container.scrollTop = item.offsetTop;
				}
			}

		}, 1000)

		var menuParent = currentItem.parentNode;

		if (menuParent.getAttribute('class')
			&& menuParent.getAttribute('class').includes('ul-submenu')) {

			menuParent.previousElementSibling.click();

			shinobi.menumodule.openParentNode(menuParent.parentNode, container);

		}
	},

	'render': function (option) {
		if (window.localStorage.getItem('currentModule')) {
			var modulename = window.localStorage.getItem('currentModule');

			shinobi.menumodule.getListMenuModule(modulename, function (jsonArr) {
				var data = jsonArr;
				shinobi.menurender.build(shinobi.menumodule.patern, data);

				shinobi.menumodule.activeCurrentTab(shinobi.menumodule.container);

				if (option && option.hasOwnProperty('callback')) {
					option.callback();
				}
			})
		} else {
			setTimeout(function () {
				shinobi.menumodule.render(option);
			}, 200)
		}
	},

	getListMenuModule: function (modulename, callback) {
		var request = {};
		request.modulename = modulename;
		shinobi.cacheapi.request('/authenapi/MenuApi/getListMenu', JSON
			.stringify(request), function (response) {
				var jsonArr = JSON.parse(response);

				callback(jsonArr);
			});
	}
};shinobi.menurender = {

	'patern': '',
	'data': '',
	'container': '',
	'dangerStyle': 'color: rgb(241, 70, 104) !important;',

	'defaultIcon': 'iconpicker-icon-preview icon-menu',

	'build': function (patern, data, callback) {

		shinobi.menurender.patern = patern;

		shinobi.menurender.data = data;

		var container = document.querySelectorAll(patern)[0];

		shinobi.menurender.container = container;

		shinobi.menurender.render(container, data);

		if (typeof callback == 'function') {

			callback();
		}

	},

	'showAllMenu': function (patern) {

		var container = document.querySelectorAll(patern)[0];

		var arrowDown = container.getElementsByClassName('shinobi-arrow');

		for (var j = 0; j < arrowDown.length; j++) {

			arrowDown[j].classList.add('arrow-down');

			var hiddenElem = container.getElementsByClassName('is-hidden');

			for (var i = 0; i < hiddenElem.length; i++) {

				hiddenElem[i].classList.remove('is-hidden');
			}
		}

	},

	'render': function (container, data) {

		if (container) {

			container.classList.add('shinobimenu');

			var ul = document.createElement('ul');
			container.appendChild(ul);

			shinobi.menurender.addEventToggleSubMenu(ul);

			data.sort(function (a, b) {
				if (a.menucode.includes('_') && b.menucode.includes('_')) {
					return Number(a.menucode.split('_')[1]) - (b.menucode.split('_')[1]);
				} else {
					return 1;
				}
			});

			for (var i = 0; i < data.length; i++) {

				shinobi.menurender.buildBlockMenu(ul, data, i);

			}
		}

	},

	'addEventToggleSubMenu': function (ul) {

		if (ul.previousElementSibling) {

			var preElem = ul.previousElementSibling;

			var classList = preElem.getAttribute('class');

			if (classList.includes('has-submenu')) {

				ul.classList.add('is-hidden');
				ul.classList.toggle('ul-submenu');
				preElem.onclick = function () {

					ul.classList.toggle('is-hidden');

					var arrow = preElem.getElementsByClassName('shinobi-arrow')[0];
					arrow.classList.toggle('arrow-down');
				}

			}
		}
	},

	'buildBlockMenu': function (ul, data, index) {

		var currentData = data[index];

		var li = document.createElement('li');
		ul.appendChild(li);

		var div = document.createElement('div');
		div.setAttribute('class', 'shinobimenu-item');
		li.appendChild(div);

		var spanIcon = document.createElement('span');
		// spanIcon.setAttribute('class', 'icon');
		div.appendChild(spanIcon);

		var icon = document.createElement('i');
		icon.setAttribute('class', shinobi.menurender.defaultIcon);
		spanIcon.appendChild(icon);

		if (currentData.menuicon) {

			icon.setAttribute('class', currentData.menuicon);
		}

		var a = document.createElement('a');
		a.innerHTML = currentData.menuname;
		div.appendChild(a);

		if (currentData.menucode) {

			a.id = currentData.menucode;
		}

		if (currentData.menuurl) {

			a.href = shinobi.util.decodeValue(currentData.menuurl);
		}

		if (currentData.menudes) {

			a.title = currentData.menudes;
		}

		if (currentData.menuicon) {

			a.setAttribute('icon-class', currentData.menuicon);
		} else {

			a.setAttribute('icon-class', shinobi.menurender.defaultIcon);
		}

		if (currentData.menuchildren) {

			if (currentData.menuchildren.length != 0) {

				div.classList.add('has-submenu');

				shinobi.menurender.createArrowSpan(div);

				shinobi.menurender.render(li, currentData.menuchildren);
			}

		}

		if (currentData.hasOwnProperty('menudes')) {
			if (currentData.menudes.toLowerCase().includes('(nguy hiểm)') || currentData.menudes.toLowerCase().includes('(danger)')) {
				icon.setAttribute('style', shinobi.menurender.dangerStyle);
				a.setAttribute('style', shinobi.menurender.dangerStyle);
			}
		}
	},

	'createArrowSpan': function (div) {
		var arrowIconSpan = document.createElement('span');
		arrowIconSpan.setAttribute('class', 'is-right-align shinobi-arrow');
		div.appendChild(arrowIconSpan);

	}
};shinobi.multivalueinput = (function() {
    var constructor = function(selector, options) {
        this.multivalueinput = "";
        this.input = "";
        this.inputSearch = "";
        this.selector = selector;
        this.idSearchInputTag = 'selectorInputSearch';
        this.result = [];
        this.updateInputValue = function() {
            var objectTaginput = this;
            objectTaginput.input.value = objectTaginput.result;
        };


        this.renderItem = function(result) {
            try {
                result = JSON.parse(result);
                return result;
            } catch (e) {
                return result;
            }

        };
        this.getListResult = '';

        this.setListResult = '';


        this.getResultValue = '';


        this.options = options;


        this.buildSearch = function(object) {
            shinobi.util.addEventEnter(object.inputSearch, function() {

                var returnInput = object.onSubmit(object.inputSearch.value.trim());

                object.appendChildItem(returnInput, object);
                object.inputSearch.value = '';
            });
        };

        this.onSubmit = function(result, object) {
            return result;
        };

        this.appendChildItem = function(result, objectTaginput) {

            if (result) {
                result = JSON.stringify(result);
                var indexResult = objectTaginput.result.indexOf(result);
                if (indexResult == -1) {

                    objectTaginput.result.push(result);
                    objectTaginput.updateInputValue();
                    objectTaginput.insertBeforeSearch(result, objectTaginput);

                }
            }
        };
        this.insertBeforeSearch = function(result, objectTaginput) {
            var children = document.createElement('div');
            children.classList.add('tag', 'is-3', 'is-medium');

            children.innerHTML = objectTaginput.renderItem(result);

            var buttonClose = document.createElement('button');
            buttonClose.classList.add('is-small', 'is-danger', 'delete', "has-background-danger", "has-text-white");
            buttonClose.addEventListener('click', function() {
                children.remove();
                var index = objectTaginput.result.indexOf(result);
                if (index > -1) {
                    objectTaginput.result.splice(index, 1);
                }
                objectTaginput.updateInputValue();
            });
            children.appendChild(buttonClose);

            var container = document.querySelector('#tagstaginput');
            var tagsearch = document.getElementById('tagsearch');

            container.insertBefore(children, tagsearch);
        };
        this.loadOptions = function() {
            var object = this;
            if (options.hasOwnProperty("buildSearch")) {
                object.buildSearch = options.buildSearch;
            }

            if (options.hasOwnProperty("onSubmit")) {
                object.onSubmit = options.onSubmit;
            }
            if (options.hasOwnProperty("renderItem")) {
                object.renderItem = options.renderItem;
            }
            if (options.hasOwnProperty("getListResult")) {
                object.getListResult = options.getListResult;
            }
            if (options.hasOwnProperty("setListResult")) {
                object.setListResult = options.setListResult;
            }
        };

        this.createStructure = function(callback) {
            var object = this;
            var oldtag = document.getElementById('tagstaginput');
            if (oldtag) {
                while (oldtag.firstChild.classList.contains('tag')) {
                    oldtag.firstChild.remove();
                }
            }

            // 
            object.input = document.querySelector(this.selector);
            object.input.classList.add('is-hidden');

            var elem = document.createElement('div');
            elem.style.padding = '1rem';
            elem.style.border = '1px solid #ddd';
            elem.style.borderRadius = '10px';
            elem.classList.add('box');
            //
            var tags = document.createElement('div');
            tags.setAttribute('class', 'tags is-multiline');
            tags.setAttribute('id', 'tagstaginput');
            //
            var node = document.createElement('div');
            node.setAttribute('class', 'is-5');
            node.setAttribute('id', 'tagsearch');
            //
            var children = document.createElement('input');
            children.setAttribute('class', 'input is-bordered');
            children.setAttribute('id', this.idSearchInputTag);
            //
            node.appendChild(children);
            tags.appendChild(node);
            elem.appendChild(tags);

            object.inputSearch = children;


            object.input.parentElement.replaceChild(elem, object.input);

            elem.insertBefore(object.input, elem.firstElementChild);
            elem.appendChild(object.input);
            //
            callback();
        };
        this.createObject = function() {
            var object = this;

            object.buildSearch(object);

            if (typeof object.setListResult === 'function') {

                var listItem = object.setListResult(object.input);

                listItem.forEach(result => {
                    object.appendChildItem(result, object);
                });

            }
            if (typeof object.getListResult === 'function') {

                getListResult(object.result);

            }
        };


        this.loadAll = function() {
            var object = this;
            this.loadOptions();
            this.createStructure(function() {
                object.createObject();
            });
        };

        this.loadAll();
    };

    // public static method
    constructor.staticmethod = {
        hello: function() {},
    };

    return constructor;
})();shinobi.notification = {
  config: {
    modalSize: "is-small",
  },
  modal: {
    modalId: "confirmPanel",
    isInitLoad: false,
    isAccept: false,
    confirm: function (callback) {
      var modal = document.getElementById(this.modalId);

      modal.classList.add("is-active");

      if (!this.isInitLoad) {
        this.registerButton();
      }

      this.isInitLoad = true;
      this.isAccept = false;

      this.doAccept = callback;
    },
    registerButton: function () {
      var modal = document.getElementById(this.modalId);

      var closeButton = modal.getElementsByClassName("delete")[0];

      closeButton.addEventListener("click", function () {
        modal.classList.remove("is-active");
      });

      var cancelButton = modal.getElementsByClassName("cancel")[0];

      cancelButton.addEventListener("click", function () {
        modal.classList.remove("is-active");
      });

      var yesButton = modal.getElementsByClassName("yes")[0];

      var modalObject = this;

      yesButton.addEventListener("click", function () {
        modal.classList.remove("is-active");

        modalObject.isAccept = true;

        modalObject.doAccept();
      });
    },
    doAccep: function () {},
  },
  notification: {
    notificationId: "shinobinotification",
    isInitLoad: false,
    isLoading: true,
    show: function (type, content) {
      var notification = document.getElementById(this.notificationId);
      var notificationcontent = notification.getElementsByClassName("notificationcontent")[0];
      notificationcontent.innerHTML = content;
      if (shinobi.hasOwnProperty("language")) {
        shinobi.language.renderContainer(notificationcontent);
      }
      if ("info" === type) {
        notification.classList.add("info-message");
        notification.classList.remove("error-message");
        notification.classList.remove("loading-message");

        setTimeout(function () {
          notification.classList.remove("info-message");
        }, 3000);
      } else {
        notification.classList.remove("info-message");
        notification.classList.add("error-message");
        notification.classList.remove("loading-message");
      }

      this.registerButton();
      this.isInitLoad = true;
    },
    info: function (content) {
      this.show("info", content);
    },
    error: function (content) {
      this.show("error", content);
    },
    loading: function () {
      var notification = document.getElementById(this.notificationId);

      this.isInitLoad = true;

      notification.getElementsByClassName("delete")[0].classList.add("is-hidden");

      notification.classList.add("info-message");
      notification.classList.add("loading-message");
      notification.classList.remove("error-message");

      var notificationcontent = notification.getElementsByClassName("notificationcontent")[0];
      notificationcontent.innerHTML =
        '<div class="columns is-vcentered"> <a class="button is-text  is-loading column is-1"></a> <div class="column" snb-lang="PAGECODE_LOADING">Đang xử lý</div> </div>';
      if (shinobi.hasOwnProperty("language")) {
        shinobi.language.renderContainer(notificationcontent);
      }
    },
    loaded: function () {
      this.isInitLoad = false;

      var notification = document.getElementById(this.notificationId);

      notification.classList.remove("info-message");
      notification.classList.remove("loading-message");
    },
    registerButton: function () {
      var notification = document.getElementById(this.notificationId);

      var closeButton = notification.getElementsByClassName("delete")[0];
      closeButton.classList.remove("is-hidden");
      closeButton.addEventListener("click", function () {
        notification.classList.remove("info-message");
        notification.classList.remove("error-message");
        closeButton.classList.add("is-hidden");
      });
    },
  },
  confirm: function (callback, options) {
    if (shinobi.hasOwnProperty("notificationconfig")) {
      shinobi.notificationconfig.init();
    }
    var confirmPanel = document.getElementById("confirmPanel");
    shinobi.util.modalEventListener(confirmPanel);
    if (options) {
      if (options.title) {
        confirmPanel.getElementsByClassName("modal-card-title")[0].innerHTML = options.title;
      }
      if (options.content) {
        confirmPanel.getElementsByClassName("modal-card-body")[0].innerHTML = options.content;
      }
      if (options.yescontent) {
        confirmPanel.getElementsByClassName("yes")[0].innerHTML = options.yescontent;
      }
      if (options.nocontent) {
        confirmPanel.getElementsByClassName("cancel")[0].innerHTML = options.nocontent;
      }
      confirmPanel.classList.remove("is-small");
      confirmPanel.classList.remove("is-medium");
      confirmPanel.classList.remove("is-large");
      if (options.modalsize) {
        confirmPanel.classList.add(options.modalsize);
      } else {
        confirmPanel.classList.add(shinobi.notification.config.modalSize);
      }
      if (shinobi.notification.config.hasOwnProperty("modalFontSize")) {
        confirmPanel.classList.add(shinobi.notification.config.modalFontSize);
      }
      if (options.initfunction) {
        options.initfunction(confirmPanel);
      }
      if (options.ishiddenfooter) {
        confirmPanel.getElementsByClassName("modal-card-foot")[0].classList.add("is-hidden");
      } else {
        confirmPanel.getElementsByClassName("modal-card-foot")[0].classList.remove("is-hidden");
      }
    } else {
      confirmPanel.getElementsByClassName("modal-card-title")[0].innerHTML = "Cảnh báo";
      confirmPanel.getElementsByClassName("modal-card-body")[0].innerHTML = "Bạn chắc chắn?";

      confirmPanel.setAttribute("snb-lang", "PAGECODE_ARE_YOU_SURE");
      confirmPanel.getElementsByClassName("yes")[0].innerHTML = "Xác nhận";
      confirmPanel.getElementsByClassName("cancel")[0].innerHTML = "Hủy";
      confirmPanel.classList.remove("is-medium");
      confirmPanel.classList.remove("is-large");
      confirmPanel.classList.add("is-small");
      confirmPanel.classList.add(shinobi.notification.config.modalSize);
      if (shinobi.notification.config.hasOwnProperty("modalFontSize")) {
        confirmPanel.classList.add(shinobi.notification.config.modalFontSize);
      }
      confirmPanel.getElementsByClassName("modal-card-foot")[0].classList.remove("is-hidden");
    }
    confirmPanel.classList.add("is-active");
    var yes = confirmPanel.getElementsByClassName("yes")[0];
    yes.focus();
    yes.onclick = function () {
      if (typeof callback == "function") {
        if (options) {
          if (!(options.hasOwnProperty("notclosewhenacceft") && options["notclosewhenacceft"])) {
            confirmPanel.classList.remove("is-active");
          }
        } else {
          confirmPanel.classList.remove("is-active");
        }

        callback();
      }
    };
  },
  image: function (url, options) {
    var modal = document.getElementById("imageModal");
    if (modal) {
      var modalContent = modal.querySelector(".modal-content");
      modalContent.innerHTML = `
			<p class="image">
				<img sizes="(min-width: 576px) 540px, 100vw" src="${url}"> 
			</p>
			`;
      shinobi.initbulma.modalOpen(modal);
    } else {
      var modalNode = shinobi.util.convertTextToElement(shinobi.notification.iamgeModalContent);
      document.body.appendChild(modalNode);
      shinobi.initbulma.modalEventListener(modalNode);
      shinobi.notification.image(url, options);
    }
  },
  iamgeModalContent: `<div id="imageModal" class="modal">
					<div class="modal-background"></div>
					<div class="modal-content">
					
					</div>
					<button class="modal-close is-large" aria-label="close"></button>
				</div>`,
};
shinobi.render = {
  renderDownloadButtonTable: function (cell, row, col, all) {
    cell.innerHTML = `<a class="button is-small is-link" href="${all[row]["fileurl"]}" download><span class="icon"><i class="fa fa-file"></i></span><span>Tải file</span></a>`;
  },
  renderFormatNumber: function (elem, value, all) {
    var renderValue = shinobi.util.formatNumber(value);
    if (["INPUT", "SELECT", "TEXTAREA"].includes(elem.tagName)) {
      elem.value = renderValue;
    } else {
      elem.innerHTML = renderValue;
      if (["TD", "TH"].includes(elem.tagName)) {
        elem.classList.add("has-text-right");
      }
    }
  },
  showParentNode: function (elem, value, all) {
    elem.innerHTML = value;
    elem.parentNode.classList.remove("is-hidden");
  },
  hiddenParentNode: function (elem, value, all) {
    elem.innerHTML = value;
    elem.parentNode.classList.add("is-hidden");
  },

  renderChangeAvatarImageContainer: function (elem, value, all) {
    all.hasOwnProperty("avatarlink") ? elem.classList.remove("is-hidden") : elem.classList.add("is-hidden");
  },
  renderImageFileInput: function (element, value, all) {
    if (value.trim() != "" && value.trim() != "null") {
      var url = value;

      element.setAttribute("image-url", url);

      var filename = url.split("/")[url.split("/").length - 1];

      var fileContainer = shinobi.util.getParentElementHasAttribute(element, {
        type: "class",
        value: "file",
      });

      var field = shinobi.util.getParentElementHasAttribute(element, {
        type: "class",
        value: "field",
      });

      var fileNameContainer = fileContainer.getElementsByClassName("file-name")[0];
      fileNameContainer.innerHTML = filename;

      field.classList.add("is-grouped");

      var control = field.querySelector(".control.image-info");
      if (control) {
        control.remove();
      }
      control = document.createElement("div");
      control.setAttribute("class", "control image-info");
      var button = document.createElement("a");
      button.setAttribute("class", "button is-primary is-icon");
      button.innerHTML = '<span class="icon"><i class="fal fa-image"></i></span>';
      control.appendChild(button);
      field.appendChild(control);

      button.onclick = function () {
        shinobi.notification.image(element.getAttribute("image-url"));
      };
    }
  },
  renderRatioTable: function (cell, row, col, all) {
    shinobi.render.renderRatio(cell, cell.innerHTML, all[row]);
  },
  renderRatio: function (elem, value, all) {
    elem.innerHTML = value + "%";
  },
  renderPercent: function (elem, value, all) {
    elem.value = (Number(value) * 100) + "%";
  },
  getRatio: function (value, option) {
    return value.replace("%", "");
  },
  renderFullNameTable: function (cell, row, col, all) {
    shinobi.render.renderFullName(cell, cell.innerHTML, all[row]);
  },

  renderFullName: function (elem, value, all) {
    elem.innerHTML = all["lastname"] + " " + all["firstname"];
  },
  enumMapping: {
    SETTLE: "Hoàn tất",
    INPROCESS: "Đang xử lý",
    WAITING_FOR_CHEQUE: "Đợi thanh toán",
    EXPIRED: "Đã hết hạn",
    DELETED: "Đã xóa",
    ACCEPTED: "Chấp nhận",
    REJECTED: "Từ chối",
    WAITING_FOR_TRANFER: "Đang xử lý",
    CANCEL: "Đã hủy",
    WAITING_FOR_AUDIT: "Chờ xử lý",
    DEPOSIT: "Nạp tiền",
    DEPOSIT_DEAL: "Đơn nạp tiền",
    WITHDRAWAL: "Rút tiền",
    TRADING_DEAL: "Mua hàng",
    WINNING_LOTTERY: "Thắng cược",
    WITHDRAW: "Rút tiền",
    CANCEL_REQUEST: "Hủy yêu cầu",
    SEND_REQUEST: "Gửi yêu cầu",
    ACCEPTED_BY_ADMIN: "Admin đồng ý",
    MARK_AS_INPROCESS_BY_ADMIN: "Admin chuyển sang đang xử lý",
    REJECTED_BY_ADMIN: "Admin từ chối",
    MARK_AS_TRANFER_BY_ADMIN: "Admin chuyển sang chờ chuyển",
    WAITING_FOR_EMAIL_VERIFY: "Đợi xác nhận email",
  },

  enumMappingResultStatus: {
    NOT_YET: "Chưa đến lượt",
    ON_WAITING: "Chờ xổ",
    COMPLETE: "Đã xổ xong",
    IN_PROCESS: "Đang xổ",
  },

  enumMappingWithdrawalRequestActionType: {
    ADD_BY_ADMIN: "Admin nạp tiền",
    ACCEPTED_BY_ADMIN: "Đang xử lý",
    REJECTED_BY_ADMIN: "Từ chối",
    SEND_REQUEST: "Gửi yêu cầu",
    MARK_AS_TRANFER_BY_ADMIN: "Admin xác nhận hoàn tất",
    MARK_AS_INPROCESS_BY_ADMIN: "Admin chuyển qua đang xử lý",
    CANCEL_REQUEST: "Hủy yêu cầu",
  },

  enumMappingDepositRequestActionType: {
    ADD_BY_ADMIN: "Admin nạp tiền",
    ACCEPTED_BY_ADMIN: "Admin hoàn tất",
    REJECTED_BY_ADMIN: "Admin từ chối",
    SEND_REQUEST: "Gửi yêu cầu",
    MARK_AS_TRANFER_BY_ADMIN: "Admin xác nhận đã chuyển",
    MARK_AS_INPROCESS_BY_ADMIN: "Admin chuyển qua đang xử lý",
    CANCEL_REQUEST: "Hủy yêu cầu",
  },

  renderEnumActionWithdrawalDepositTable: function (cell, row, col, all) {
    shinobi.render.renderEnumActionWithdrawalDeposit(cell, cell.innerHTML, all[row]);
  },

  renderEnumActionWithdrawalDeposit: function (elem, value, all) {
    var enumList =
      all.actiontype == "DEPOSIT" || all.requesttype == "DEPOSIT"
        ? shinobi.render.enumMappingDepositRequestActionType
        : shinobi.render.enumMappingWithdrawalRequestActionType;
    var returnValue = enumList.hasOwnProperty(value) ? enumList[value] : value;
    elem.innerHTML = returnValue;
  },

  renderRandomColor: function (elem, value, all) {
    var list = ["white", "black", "light", "dark", "primary", "link", "info", "success", "warning", "danger"];
    var randomValue = list[Math.floor(Math.random() * list.length)];
    var attribute = elem.hasAttribute("snb-color-attribute")
      ? elem.getAttribute("snb-color-attribute")
      : "has-background-";
    elem.classList.add(attribute + randomValue);
  },

  renderLotteryResultStatus: function (elem, value, all) {
    var returnValue = shinobi.render.enumMappingResultStatus.hasOwnProperty(value)
      ? shinobi.render.enumMappingResultStatus[value]
      : value;
    elem.innerHTML = returnValue;
    if (value == "ON_WAITING") {
      elem.classList.add("has-text-primary");
    }
  },

  renderEnum: function (elem, value, all) {
    var returnValue = shinobi.render.enumMapping.hasOwnProperty(value) ? shinobi.render.enumMapping[value] : value;
    elem.innerHTML = returnValue;
  },

  renderEnumTable: function (cell, row, col, all) {
    shinobi.render.renderEnum(cell, cell.innerHTML);
  },

  removeFormatNumber: function (value, option) {
    var formatCharacter = shinobi.util.getFormatCharacters();
    var numberFormatCharacter = formatCharacter.numberFormatCharacter;
    return value.replace(new RegExp("\\" + numberFormatCharacter, "g"), "");
  },

  getBulmaCalendarValue: function (value, option) {
    var returnValue = {};
    if (value == "") {
      return value;
    } else {
      option["elem"].parentNode.classList.remove("has-border-danger");
      if (option["elem"].hasAttribute("data-is-range") && option["elem"].getAttribute("data-is-range") == "true") {
        var valueSplit = value.split("-");
        var optionDate = {
          format: "yyyy-MM-dd",
        };
        returnValue["beginDate"] = valueSplit[0] ? valueSplit[0].trim() : "";
        returnValue["endDate"] = valueSplit[1] ? valueSplit[1].trim() : "";

        return returnValue;
      }
      return value;
    }
  },

  getBulmaCalendarValueFormat: function (value, option) {
    var returnValue = value;
    if (value != "") {
      returnValue = shinobi.util.reverseFormatDate(value, {
        reverseFormat: "dd/MM/yyyy",
        format: "yyyy-MM-dd",
      });
    }
    return returnValue;
  },

  getFilterSelect: function (th, options) {
    var select = th.querySelector('select');
    console.log(select.value);
    return {
      colname: th.getAttribute('snb-colname'),
      operator: (select.value == '') ? 'like' : '=',
      value: select.value
    };
  },

  buildFilterSelect: function (th, options) {
    var listOption = JSON.parse(th.getAttribute('snb-filter-list-option'));
    if (th.querySelector('.table-filter')) {
      var preFilter = th.querySelector('.table-filter');
      preFilter.remove();
      options['tableObject'].reloadApi(1);
    } else {
      var container = document.createElement('div');
      container.setAttribute('class', 'field table-filter has-addons');
      container.innerHTML = `
        <div class="select is-small">
            <select></select>
        </div>
        `;
      var select = container.querySelector('select');
      select.onchange = function () {
        options['tableObject'].reloadApi(1);
      }

      listOption.forEach(function (item) {
        var option = document.createElement('option');
        option.setAttribute('value', item["value"]);
        option.innerHTML = item["name"];
        select.appendChild(option);
      });

      th.appendChild(container);
      select.value = '';
    }
  },

  renderFormatNumberTable: function (cell, row, col, all) {
    shinobi.render.renderFormatNumber(cell, cell.innerHTML, all);
  },

  renderUserBalance: function (elem, value, all) {
    shinobi.render.addLoading(elem);
    shinobi.cacheapi.request(shinobi.coreapi.bankAccountApi + "getAccountBalance", "{}", function (response) {
      var jsonArr = JSON.parse(response);
      elem.innerHTML = jsonArr.hasOwnProperty("currentcash")
        ? shinobi.util.formatNumber(jsonArr["currentcash"])
        : "Đang xử lý";
    });
  },

  getFileName: function (elem, value, all) {
    var linkFile = value;
    var linkFileSplit = linkFile.split("/");

    elem.innerHTML = linkFileSplit[linkFileSplit.length - 1];
  },

  renderDownloadFile: function (elem, value, all) {
    var linkFile = value;

    elem.setAttribute("href", value);

    setTimeout(function () {
      elem.focus();
    }, 200);

    elem.onclick = function () {
      var modalId = elem.getAttribute("modal-parent");

      var modal = document.getElementById(modalId);
      modal.classList.remove("is-active");
    };
  },

  addLoading: function (elem, value, all) {
    elem.innerHTML = '<a class="button is-small is-borderless is-paddingless is-icon is-transparent  is-loading"></a>';
  },

  renderTagInputValue: function (elem, value, all) {
    if (typeof shinobi.initbulma.tagsInput == "object") {
      shinobi.initbulma.tagsInput.forEach(function (item) {
        if (item["element"] == elem) {
          item.reset();
          item.input.setAttribute("style", "");
          item.element.value = "";
          var listOption = item.container.querySelectorAll("[data-tag]");

          for (var i = 0; i < listOption.length; i++) {
            listOption[i].remove();
          }
          var listTagValue = value.split(",");
          listTagValue.forEach(function (valueItem) {
            if (valueItem.trim() != "") {
              item.addTag(valueItem.trim());
            }
          });

          item.element.value = value;
        }
      });
    }
  },

  renderFormatDate: function (elem, value, all) {
    var format = elem.hasAttribute("snb-date-format") ? elem.getAttribute("snb-date-format") : "dd-MM-yyyy";
    elem.innerHTML = shinobi.util.getFormatDate(value, {
      format: format,
    });
  },

  renderFormatNumberFloat: function (elem, value, all) {
    var floatValue = Number.parseFloat(value);
    shinobi.render.renderFormatNumber(elem, floatValue, all);
  },

  renderFormatNumberInt: function (elem, value, all) {
    var intValue = Number.parseInt(value);
    shinobi.render.renderFormatNumber(elem, intValue, all);
  },

  renderTotalPrice: function (elem, value, all) {
    var total = all["quantity"] * all["price"];
    elem.innerHTML = shinobi.util.formatNumber(total);
  },
  renderChangeColor: function (elem, value, all) {
    if (Number(value) > 0 || value.trim().toString().startsWith('+')) {
      elem.style.color = 'rgb(0, 255, 0)';
    }

    if (Number(value) < 0 || value.trim().toString().startsWith('-')) {
      elem.style.color = 'rgb(255, 0, 0)';
    }
  },
  renderChangePercentColor: function (elem, value, all) {
    var number = Number(value.replace('%', ''));
    if (number > 0 || value.trim().toString().startsWith('+')) {
      elem.style.color = 'rgb(0, 255, 0)';
    }

    if (number < 0 || value.trim().toString().startsWith('-')) {
      elem.style.color = 'rgb(255, 0, 0)';
    }
  },
  renderChangeAvatarButton: function (elem, value, all) {
    shinobi.fileupload.registerElement(
      elem,
      "change",
      "uploadavatar",
      function () {
        return 0;
      },
      function (upfileResponse) {
        var jsonArr = upfileResponse;

        if (jsonArr.result == "success") {
          var url = jsonArr.content.url;

          var updateAvatarRequest = {};

          var avatarLink = url + "?" + new Date().getTime();

          updateAvatarRequest.avatarlink = avatarLink;

          shinobi.api.request(
            shinobi.coreapi.loggedUserApi + "updateAvatarLink",
            JSON.stringify(updateAvatarRequest),
            function (response) {
              if (response == "update success") {
                shinobi.notification.notification.info("Cập nhật thành công!");

                setTimeout(function () {
                  location.reload();
                }, 1000);
              }
            }
          );
        } else {
          shinobi.notification.notification.error("Xảy ra lỗi vui lòng thử lại!");

          return;
        }
      }
    );
  },
  renderGenderTable: function (cell, row, col, all) {
    shinobi.render.renderGender(cell, cell.innerHTML, all[row]);
  },
  renderGender: function (elem, value, all) {
    var returnValue;
    switch (value) {
      case "MR":
        returnValue = "Nam";
        break;
      case "MS":
        returnValue = "Nữ";
        break;
      default:
        returnValue = value;
        break;
    }
    elem.innerHTML = returnValue;
  },

  filterGender: function (value, option) {
    var returnValue;
    switch (value) {
      case "Nam":
        returnValue = "MR";
        break;
      case "Nữ":
        returnValue = "MS";
        break;
      default:
        returnValue = value;
        break;
    }
    return returnValue;
  },

  renderPhoneNumberWithPhoneReligion: function (elem, value, all) {
    elem.value = value;
    if (elem.hasAttribute("render-target") && all.hasOwnProperty("country")) {
      var target = elem.getAttribute("render-target");
      eval(target).setCountry(all["country"]);
    }
  },

  getNumberCleaveInput: function (value, option) {
    return shinobi.util.getValueNumberCleaveFormat(option.elem);
  },

  renderTextCenterTable: function (cell, row, col, all) {
    shinobi.render.renderTextCenterDatalist(cell, cell.innerHTML, all[row]);
  },

  renderTextCenterDatalist: function (elem, value, all) {
    elem.classList.add('has-text-centered');
  },
  renderTextLeftTable: function (cell, row, col, all) {
    shinobi.render.renderTextLeftDatalist(cell, cell.innerHTML, all[row]);
  },

  renderTextLeftDatalist: function (elem, value, all) {
    elem.classList.add('has-text-left');
  },
  renderTextRightTable: function (cell, row, col, all) {
    shinobi.render.renderTextRightDatalist(cell, cell.innerHTML, all[row]);
  },

  renderTextRightDatalist: function (elem, value, all) {
    elem.classList.add('has-text-right');
  },
};
shinobi.scroll = {
    defaultOption: {
        scrolldelay: 50,
        delayReScroll: 4000,
        delayStartScrollWhenReScroll: 2000,
        pauseOnHover: true
    },
    init: function (selector, option) {
        var elemList = document.querySelectorAll(selector);
        for (var i = 0; i < elemList.length; i++) {
            var elem = elemList[i];
            shinobi.scroll.initElement(elemList, i, option);
        }
    },
    initElement: function (elemList, i, option) {
        var elem = elemList[i];
        var newOption;
        if (!option) {
            newOption = JSON.parse(JSON.stringify(shinobi.scroll.defaultOption));
        } else {
            newOption = option;
        }

        shinobi.scroll.scrollProcess(elem, newOption);
    },

    scrollProcess: function (elem, option) {
        // shinobi.scroll.state = 'scroll';
        var currentScrollHeight = elem.scrollTop + elem.clientHeight;
        var scrollHeight = elem.scrollHeight;
        shinobi.scroll.clear(elem, option, function (afterOption) {
            shinobi.scroll.addEventHover(elem, afterOption);
            if (currentScrollHeight < scrollHeight) {
                afterOption.scrollInterval = setTimeout(function () {
                    elem.scrollBy(0, 1);
                    shinobi.scroll.scrollProcess(elem, afterOption);
                }, afterOption['scrolldelay']);

            } else {
                afterOption.reScrollInterval = setTimeout(function () {
                    elem.scrollTo(0, 0);
                    setTimeout(function () {
                        shinobi.scroll.scrollProcess(elem, afterOption);
                    }, afterOption['delayStartScrollWhenReScroll'])
                }, afterOption['delayReScroll']);

            }
        });

    },

    addEventHover: function (elem, option) {
        if (option.hasOwnProperty('pauseOnHover')) {
            if (option['pauseOnHover']) {
                elem.onmouseover = function () {
                    shinobi.scroll.clear(elem, option);
                }
                elem.onmouseout = function () {
                    shinobi.scroll.scrollProcess(elem, option);
                }
            }
        }
    },
    clear: function (elem, option, callback) {
        if (option.hasOwnProperty('scrollInterval')) {
            clearTimeout(option['scrollInterval']);
        }
        if (option.hasOwnProperty('reScrollInterval')) {
            clearTimeout(option['reScrollInterval']);
        }
        if (typeof callback == 'function') {
            callback(option);
        }
    },

};shinobi.seorender = {

	'gaid' : 'UA-138668527-1',

	'json' : [
			{
				'pageurl' : '/page/index',
				'pagename' : 'Aladin | Nền tảng kết nối cộng đồng nhà đầu tư chứng khoán chuyên nghiệp',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/traderlisting',
				'pagename' : 'Nhà tư vấn',
				'pagerender' : 'shinobi.seorender.listingPageRender'
			}, {
				'pageurl' : '/page/investorlisting',
				'pagename' : 'Nhà đầu tư',
				'pagerender' : 'shinobi.seorender.listingPageRender'
			}, {
				'pageurl' : '/page/blogoverview',
				'pagename' : 'Blog đầu tư',
				'pagerender' : 'shinobi.seorender.blogOverviewRender'
			}, {
				'pageurl' : '/page/blogpost/',
				'pagename' : 'Bài viết',
				'pagerender' : 'shinobi.seorender.blogPostRender'
			}, {
				'pageurl' : '/page/tradinginstruction',
				'pagename' : 'Hướng dẫn nhà đầu tư',

			}, {
				'pageurl' : '/page/account',
				'pagename' : 'Trang cá nhân',
				'pagerender' : 'shinobi.seorender.renderPublicUserProfilePage'
			}, {
				'pageurl' : '/page/traderaccount',
				'pagename' : 'Nhà tư vấn',
				'pagerender' : 'shinobi.seorender.renderPublicUserProfilePage'
			}, {
				'pageurl' : '/page/investoraccount',
				'pagename' : 'Nhà đầu tư',
				'pagerender' : 'shinobi.seorender.renderPublicUserProfilePage'
			}, {
				'pageurl' : '/page/traderguide',
				'pagename' : 'Hướng dẫn Nhà tư vấn',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/question',
				'pagename' : 'Các câu hỏi thường gặp',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/aboutus',
				'pagename' : 'Về Chúng tôi',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/job',
				'pagename' : 'Nghề nghiệp',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/privacypolicy',
				'pagename' : 'Chính sách Bảo mật',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/denyrisk',
				'pagename' : 'Khước từ rủi ro',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/investorserviceterms',
				'pagename' : 'Điều khoản NĐT',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/traderserviceterms',
				'pagename' : 'Điều khoản NTV',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/contact',
				'pagename' : 'Liên hệ',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/investwithaladin',
				'pagename' : 'Đầu tư cùng Aladin',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/traderintroduction',
				'pagename' : 'Hợp tác cùng Nhà tư vấn',
				'pagerender' : ''
			}, {
				'pageurl' : '/page/investorregistration',
				'pagename' : 'Đăng kí',
				'pagerender' : ''
			} ],

	'build' : function(callback) {

		shinobi.seorender.renderPageSeo(callback);
	},

	'renderPublicUserProfilePage' : function(item) {

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var pageUrl = pathNameSplit[pathNameSplit.length - 1];

		var request = {};
		request.pageurl = pageUrl;

		shinobi.api.request('/api/UserApi/getUsernameFromHomePage', JSON
				.stringify(request), function(response) {

			shinobi.api.request('/api/UserApi/getAllUserInfo', response,
					function(userInfo) {

						var userInfoObject = JSON.parse(userInfo);

						var fullName = userInfoObject.firstname + ' '
								+ userInfoObject.lastname;

						// document.title = fullName;

						var headContent = document.head.innerHTML;
						headContent = '<title>' + fullName + '</title>'
								+ headContent;
						document.head.innerHTML = headContent;
					});
		});
	},

	'blogPostRender' : function(item) {

		var request = {};

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var postUrl = pathNameSplit[pathNameSplit.length - 1];

		request.posturl = blogPostPageUrl + postUrl;

		shinobi.api.request('/api/BlogOverviewApi/getPreViewContent', JSON
				.stringify(request), function(response) {

			var jsonArr = JSON.parse(response);

			document.title = jsonArr.posttitle;

			var markup = '  <meta property="og:url" content="'
					+ window.location.href + '" />';
			markup = markup + ' <meta property="og:type" content="website" />';
			markup = markup + ' <meta property="og:title" content="'
					+ jsonArr.posttitle + '" />';

			// if (jsonArr.previewcontent) {
			//
			// markup = markup + ' <meta property="og:description" content="'
			// + jsonArr.previewcontent.replace('/(<([^>]+)>)/ig', '')
			// + '" />';
			// } else {
			// markup = markup + ' <meta property="og:description" content="'
			// + jsonArr.title + '" />';
			//			}

			markup = markup + '<meta property="og:image" content="'
					+ jsonArr.thumpnailurl + '" />';
			var headContent = document.head.innerHTML;
			headContent = markup + headContent;
			document.head.innerHTML = headContent;

		});

	},

	'blogOverviewRender' : function(item) {

		var pathName = window.location.pathname;

		var pathNameSplit = pathName.split('/');

		var postType = pathNameSplit[pathNameSplit.length - 2];

		var postFilter = pathNameSplit[pathNameSplit.length - 1];

		var title = er.postFiterConvert(postFilter)
				+ ' '
				+ shinobi.aladinUtil.convertPostTypeToVn(postType)
						.toLowerCase();

		var pageTitle = item.pagename + ': ' + title;

		// var headContent = document.head.innerHTML;
		// headContent = '<title>' + pageTitle + '</title>' + headContent;
		// document.head.innerHTML = headContent;

		document.title = pageTitle;

	},

	'listingPageRender' : function(item) {

		var pathName = window.location.pathname;

		var timeFrame;

		if (item.pageurl == pathName) {

			timeFrame = shinobi.investortraderlistingcontentheaderrender.defaultTimeFrame;

		} else {

			var pathNameSplit = pathName.split('/');

			timeFrame = pathNameSplit[pathNameSplit.length - 1];
		}

		// document.title = item.pagename + ': ' +
		// er.listingTimeFrame(timeFrame);

		var pageTitle = item.pagename + ': ' + er.listingTimeFrame(timeFrame);

		// var headContent = document.head.innerHTML;
		// headContent = '<title>' + pageTitle + '</title>' + headContent;
		// document.head.innerHTML = headContent;

		document.title = pageTitle;

	},

	'defaultRender' : function(item) {

		// var headContent = document.head.innerHTML;
		// headContent = '<title>' + item.pagename + '</title>' + headContent;
		// document.head.innerHTML = headContent;

		document.title = item.pagename;

	},

	'addGA' : function() {
		ga("create", shinobi.seorender.gaid, "auto");
		ga("send", "pageview");
	},

	'renderPageSeo' : function(callback) {

		var jsonArr = shinobi.seorender.json;

		var pathName = window.location.pathname;

		for (var i = 0; i < jsonArr.length; i++) {

			var item = jsonArr[i];

			// var pageUrlRegex = new RegExp(item.pageurl, "igs");

			// if (pageUrlRegex.test(pathName)) {

			if (pathName.includes(item.pageurl)) {
				if (!item.pagerender || item.pagerender == ''
						|| item.pagerender == null) {

					shinobi.seorender.defaultRender(item);
				} else {

					eval(item.pagerender)(item);
				}

				setTimeout(function() {

					callback(true);
				}, 2000);

				return;
			}
		}

		callback(false);
	},

};shinobi.socket = (function () {
  // constructor
  var constructor = function (option) {
    this.url = "";
    this.option = option;
    this.socket = {};
    this.msgid = "";
    this.onOpen = null;
    this.onOpenOverrideFunction = null;
    this.onMessage = null;
    this.onMessageOverrideFunction = null;
    this.onSendOverrideFunction = null;
    this.onError = null;
    this.onClose = null;
    this.onAjax = null;

    this.init = function () {
      this.setupOption();

      this.connect();
    };

    this.connect = function () {
      var socketObject = this;

      this.socket = new WebSocket(socketObject.url);

      this.socket.addEventListener("open", function (event) {
        if (typeof socketObject.onOpenOverrideFunction == "function") {
          socketObject.onOpenOverrideFunction(socketObject);
        } else {
          var message = {
            type: "register",
            command: "init",
            msgid: 0,
            data: [],
          };
          this.send(JSON.stringify(message));

          if (typeof socketObject.onOpen == "function") {
            socketObject.onOpen(socketObject);
          }
        }
      });

      this.socket.addEventListener("message", function (event) {
        if (typeof socketObject.onMessageOverrideFunction == "function") {
          socketObject.onMessageOverrideFunction(event.data);
        } else {
          var data = JSON.parse(event.data);

          // if (socketObject.msgid == '') {

          // 	socketObject.msgid = data.msgid;

          // } else {

          if (typeof socketObject.onMessage == "function") {
            socketObject.onMessage(data);
          }

          // }
        }
      });

      this.socket.addEventListener("close", function () {
        console.log("connection closed");
        if (typeof socketObject.onClose == "function") {
          socketObject.onClose(socketObject);
        } else {
          setTimeout(socketObject.connect(socketObject.url), 1000);
        }
      });
    };

    this.setupOption = function () {
      var socketObject = this;

      socketObject["url"] = option["url"];

      if (option["onOpen"]) {
        socketObject["onOpen"] = option["onOpen"];
      }
      if (option["onClose"]) {
        socketObject["onClose"] = option["onClose"];
      }
      if (option["onMessage"]) {
        socketObject["onMessage"] = option["onMessage"];
      }
      if (option["onError"]) {
        socketObject["onError"] = option["onError"];
      }
      if (option["onAjax"]) {
        socketObject["onAjax"] = option["onAjax"];
      }
      if (option["onOpenOverrideFunction"]) {
        socketObject["onOpenOverrideFunction"] =
          option["onOpenOverrideFunction"];
      }
      if (option["onMessageOverrideFunction"]) {
        socketObject["onMessageOverrideFunction"] =
          option["onMessageOverrideFunction"];
      }
      if (option["onSendOverrideFunction"]) {
        socketObject["onSendOverrideFunction"] =
          option["onSendOverrideFunction"];
      }
    };

    this.send = function (sendData, callback) {
      var socketObject = this;

      var interval = setInterval(function () {
        if (socketObject.socket.readyState == 1) {
          if (typeof socketObject.onSendOverrideFunction == "function") {
            socketObject.onSendOverrideFunction(socketObject, sendData);
          } else {
            var content = {
              command: "request",
              msgid: socketObject.msgid,
              data: sendData,
            };

            socketObject.socket.send(JSON.stringify(content));
          }

          if (typeof callback == "function") {
            callback();
          }

          clearInterval(interval);
        }
      }, 10);
    };

    this.init();
  }; // end constructor

  return constructor;
})();
shinobi.message = {
	'socket': '',
	'url': "",
	'chatInqueue': [],
	'notificationInqueue': [],
	'sessionid': "",
	'readyToSend': false,
	'option': null,
	'connect': function (url, callback, option) {

		this.url = url;
		this.option = option;
		// if (typeof shinobi.message.socket == 'object' && shinobi.message.socket.close == 'function') {
		// 	shinobi.message.socket.close();
		// }
		shinobi.message.socket = new WebSocket(shinobi.message.url);
		// if (option && option.hasOwnProperty('sendInit')) {
		// 	var message = {};
		// 	message.type = "register";
		// 	message.content = shinobi.message.sessionid;
		// 	shinobi.message.socket.send(JSON.stringify(message));
		// 	console.log("send register message");

		// 	shinobi.message.socket.readyToSend = true;

		// 	setTimeout(function () {
		// 		if (typeof callback == 'function') {

		// 			callback();
		// 		}

		// 	}, 1000);
		// }

		this.socket.addEventListener('open', function (event) {
			console.log("open connection");
			var object = this;
			var message = {};
			message.type = "register";
			if (shinobi.message.sessionid == '') {
				shinobi.message.connectSocketServer(callback);
			} else {

				message.content = shinobi.message.sessionid;
				object.send(JSON.stringify(message));
				console.log("send register message");

				object.readyToSend = true;

				setTimeout(function () {
					if (typeof callback == 'function') {

						callback();
					}

				}, 1000);

			}

		});

		this.socket.addEventListener('message', function (event) {
			shinobi.message.inputMessageHandler(event);
		});

		this.socket.addEventListener('close', function () {
			console.log("connection closed");
			setTimeout(shinobi.message.connect(shinobi.message.url), 1000);
		});

	},
	'connectSocketServer': function (callback) {
		var requestSessonId = {};

		shinobi.api.request("/authenapi/UserInfoApi/getSessionid", JSON
			.stringify(requestSessonId), function (response) {

				var jsonResponse = JSON.parse(response);

				var sessionId = jsonResponse.sessionid;

				shinobi.message.sessionid = sessionId;

				if (callback) {
					// shinobi.message.socket.close();

					// shinobi.message.connect(shinobi.config.current.imserver);
					console.log("connect socket server success");

					callback();
				}

			});

	},
	'inputMessageHandler': function (event) {

		var response = event.data;
		var data = JSON.parse(response);

		shinobi.socketmanager.socketMessage.private.push(data);

	},
	'sendMessage': function (message) {
		this.socket.send(message);
	},
};
Number.prototype.format = function (n, x, s, c) {
  var re = "\\d(?=(\\d{" + (x || 3) + "})+" + (n > 0 ? "\\D" : "$") + ")",
    num = this.toFixed(Math.max(0, ~~n));

  return (c ? num.replace(".", c) : num).replace(new RegExp(re, "g"), "$&" + (s || ","));
};

shinobi.tableHelper = {
  mappingRender: {
    renderFirstNameLastName: {
      functionName: "getfullname",
      param: "this",
    },
  },
  colnameAttribute: "snb-colname",
  renderAttribute: "snb-render",
  colcontrolAttribute: "snb-header-control",
  sortAttribute: "snb-sort",
  sortIcon: "<i class='fas fa-sort'></i>",
  sortDescIcon: "<i class='fas fa-sort-down'></i>",
  sortAscIcon: "<i class='fas fa-sort-up'></i>",

  getRender: function (tableId) {
    var table = document.getElementById(tableId);

    var colnameAttributeQuery = "[" + shinobi.tableHelper.colnameAttribute + "]";

    var tHead = table.tHead;
    var listColumnHasColname = tHead.querySelectorAll(colnameAttributeQuery);

    var render = [];
    for (var i = 0; i < listColumnHasColname.length; i++) {
      var item = listColumnHasColname[i];
      if (item.hasAttribute(shinobi.tableHelper.renderAttribute)) {
        var renderFunction = item.getAttribute(shinobi.tableHelper.renderAttribute);

        render[item.cellIndex] = renderFunction;
      }
    }

    return render;
  },

  addAttributeColname: function (colElem) {
    if (colElem.hasAttribute(shinobi.tableHelper.colcontrolAttribute)) {
      var sortElem = colElem.querySelector("[snb-sort]");

      if (!sortElem) {
        var span = document.createElement("span");
        span.setAttribute(shinobi.tableHelper.sortAttribute, "");

        span.innerHTML = shinobi.tableHelper.sortIcon;

        colElem.appendChild(span);
      }

      if (colElem.getAttribute(shinobi.tableHelper.colcontrolAttribute).includes("2")) {
        var filter = document.createElement("span");
        filter.setAttribute("snb-filter", "");
        var filterIcon = document.createElement("i");
        filterIcon.setAttribute("class", "fal fa-sm fa-filter");
        filter.appendChild(filterIcon);
        colElem.appendChild(filter);
      }
    }
  },

  getColname: function (tableId) {
    var table = document.getElementById(tableId);

    var headerColnames = [];

    var listTr = table.tHead.rows;
    for (var indexTr = 0; indexTr < listTr.length; indexTr++) {
      var tr = listTr[indexTr];
      var listTh = tr.cells;
      for (let th of listTh) {
        var key;
        var colspan = th.colSpan;
        if (th.hasAttribute(shinobi.tableHelper.colnameAttribute)) {
          key = th.getAttribute(shinobi.tableHelper.colnameAttribute);
          shinobi.tableHelper.addAttributeColname(th);
        } else {
          key = null;
        }
        if (indexTr == 0) {
          for (var i = 0; i < colspan; i++) {
            headerColnames.push(key);
          }
        } else {
          for (var j = 0; j < colspan; j++) {
            headerColnames[headerColnames.indexOf(null) + j] = key;
          }
        }
      }
    }

    return headerColnames;
  },

  buildSort: function (table) {
    var staticSort = table.staticsorts;
    table.getSorts();

    var sort = table.sorts;

    var listKey = [];

    for (var i = 0; i < sort.length; i++) {
      listKey.push(sort[i].colname);
    }

    var allSort = sort;

    for (var j = 0; j < staticSort.length; j++) {
      if (!listKey.includes(staticSort[j].colname)) {
        allSort.push(staticSort[j]);
      }
    }

    return allSort;
  },

  changeSortIconHeader: function (table) {
    for (var i = 0; i < table.allSorts.length; i++) {
      var key = table.allSorts[i].colname;

      var colnameAttributeQuery =
        "[" + shinobi.tableHelper.colnameAttribute + "=" + key + "]>[" + shinobi.tableHelper.sortAttribute + "]";

      var listHeaderSortIcon = table.tableNode.tHead.querySelectorAll(colnameAttributeQuery);

      for (var j = 0; j < listHeaderSortIcon.length; j++) {
        listHeaderSortIcon[j].classList.add("is-visible");
        listHeaderSortIcon[j].setAttribute("snb-sort", table.allSorts[i].value);

        if (table.allSorts[i].value == "asc") {
          listHeaderSortIcon[j].innerHTML = shinobi.tableHelper.sortAscIcon;
        }
        if (table.allSorts[i].value == "desc") {
          listHeaderSortIcon[j].innerHTML = shinobi.tableHelper.sortDescIcon;
        }
      }
    }
  },
  getRenderExcelFunction: function (cellHeader) {
    var renderName = cellHeader.getAttribute(shinobi.tableHelper.renderAttribute);

    var allFunction = shinobi.tableHelper.mappingRender;

    var functionObject = allFunction[renderName.toString()];

    var returnObject = {};

    if (functionObject) {
      returnObject.result = true;

      if (functionObject.param == "this") {
        var content = {};
        content.rendername = functionObject.functionName;
        content.inputlist = [];
        content.inputlist.push(cellHeader.getAttribute(shinobi.tableHelper.colnameAttribute));

        returnObject.content = content;
      }
    } else {
      returnObject.result = false;
    }

    return returnObject;
  },
};

shinobi.table = (function () {
  // private static variable
  var count = 0;
  var paginationClass = ".table-pagination";
  var prevPaginationClass = ".shinobi-pagination-prev";
  var curPagePaginationClass = ".shinobi-pagination-curpage";
  var nextPaginationClass = ".shinobi-pagination-next";
  var pageTotalClass = ".shinobi-page-total";
  var recordPerPageClass = ".shinobi-recordperpage";
  var detailIdKey = "snb-detailid";
  var colnameAttribute = "snb-colname";
  var colcontrolAttribute = "snb-header-control";
  var sortAttribute = "snb-sort";
  var exportExcelAttribute = "snb-export-excel";

  var sortDescIcon = "<i class='fas fa-sort-down'></i>";
  var sortAscIcon = "<i class='fas fa-sort-up'></i>";
  var sortIcon = "<i class='fas fa-sort'></i>";

  // constructor
  var constructor = function (tableid) {
    this.url = "";

    this.colNames = [];

    this.filters = [];

    this.staticfilters = [];

    this.sorts = [];

    this.allSorts = [];

    this.staticsorts = [];

    this.paramsRequestList = {};

    this.renders = [];

    this.tableRows = [];

    this.pageNum = 1;

    this.recordPerPage = 10;

    this.pageTotal = 10;

    this.rowTotal = 10;

    this.currentId = -1;

    this.lastRequest = {};

    this.exportExcel = false;

    this.options = null;

    this.tableNode = document.getElementById(tableid);

    this.tableContainerNode = this.tableNode.parentNode;

    this.pageNumNode = this.tableContainerNode.querySelector(curPagePaginationClass);

    this.recordPerPageNode = this.tableContainerNode.querySelector(recordPerPageClass);

    this.apiName = "";

    this.getColnames = function () {
      var table = document.getElementById(tableid);

      var headerColnames = [];

      var listTr = table.tHead.rows;
      for (var indexTr = 0; indexTr < listTr.length; indexTr++) {
        var tr = listTr[indexTr];
        var listTh = tr.cells;

        for (var indexTh = 0; indexTh < listTh.length; indexTh++) {
          var th = listTh[indexTh];
          var key;

          var colspan = th.colSpan;

          if (th.hasAttribute(colnameAttribute)) {
            key = th.getAttribute(colnameAttribute);
          } else {
            key = null;
          }

          if (indexTr == 0) {
            for (var i = 0; i < colspan; i++) {
              headerColnames.push(key);
            }
          } else {
            for (var j = 0; j < colspan; j++) {
              headerColnames[headerColnames.indexOf(null) + j] = key;
            }
          }
        }
      }

      return headerColnames;
    };

    this.registerSorts = function () {
      var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute + "]");

      for (var i = 0; i < sortElems.length; i++) {
        var sortElem = sortElems[i];

        this.registerSort(sortElem);
      }
    };

    this.registerSort = function (sortElem) {
      var table = this;

      sortElem.addEventListener("click", function () {
        var currentSortValue = this.getAttribute(sortAttribute);

        var colName = this.parentNode.getAttribute(colnameAttribute);

        if ("" === currentSortValue) {
          this.setAttribute(sortAttribute, "asc");
          this.innerHTML = sortAscIcon;
          this.classList.add("is-visible");
        } else if ("asc" === currentSortValue) {
          this.setAttribute(sortAttribute, "desc");
          this.innerHTML = sortDescIcon;
          this.classList.add("is-visible");
        } else {
          this.setAttribute(sortAttribute, "");
          this.innerHTML = sortIcon;
          this.classList.remove("is-visible");
        }

        table.reloadApi(table.pageNum);
      });
    };

    this.getSorts = function () {
      this.sorts = [];

      // this.sorts = this.sorts.concat(this.staticsorts);

      var sortElems = this.tableNode.querySelectorAll("[" + sortAttribute + "]");

      for (var i = 0; i < sortElems.length; i++) {
        var sortElem = sortElems[i];

        var colName = sortElem.parentNode.getAttribute(colnameAttribute);
        var currentSortValue = sortElem.getAttribute(sortAttribute);

        if ("" !== currentSortValue) {
          var sort = {};
          sort.colname = colName;
          sort.value = currentSortValue;

          this.sorts.push(sort);
        }
      }
    };

    this.registerHeaders = function () {
      var tableElem = document.getElementById(tableid);
      var headers = tableElem.querySelectorAll("[" + colcontrolAttribute + "]");
      var object = this;
      for (var i = 0; i < headers.length; i++) {
        var header = headers[i];
        if (header.getAttribute(colcontrolAttribute).includes("2")) {
          object.registerHeader(header);
        }
      }
    };

    this.registerHeader = function (header) {
      var title = header.innerHTML;

      var table = this;

      header.addEventListener("dblclick", function () {
        table.addEventFilterHeader(table, header);
      });

      var filter = header.querySelector("[snb-filter]");

      if (filter) {
        filter.onclick = function () {
          table.addEventFilterHeader(table, header);
        };
      }

      header.addEventListener("keyup", function (event) {
        if (event.keyCode === 13) {
          var currentvalue = this.querySelector("input").value;

          if (currentvalue && currentvalue == "") {
            // this.innerHTML = title;
            table.removeFilterControls(this);
          }

          table.resetPageNum();

          table.reloadApi(table.pageNum);
        }
      });
    };

    this.addEventFilterHeader = function (table, th) {
      //sử dụng snb-filter-builder để custom input filter - có 2 biến đầu vào của hàm th và options
      //sử dung snb-filter-get-value để lấy dữ liệu custom - có 2 biến đầu vào của hàm th và options
      if (th.hasAttribute('snb-filter-builder')) {
        eval(th.getAttribute('snb-filter-builder'))(th, {
          tableObject: table
        });
      } else {
        var childNode = th.childNodes[0];

        if (childNode.nodeType == 3) {
          if (th.querySelector("input") !== null) {
            // this.innerHTML = title;
            table.removeFilterControls(th);

            table.resetPageNum();

            table.reloadApi(table.pageNum);

            return;
          }

          var select = document.createElement("select");
          table.addFilterToElement(select, th);

          var input = document.createElement("input");
          input.setAttribute("class", "input is-small");
          th.hasAttribute("snb-datatype") && th.getAttribute("snb-datatype") == "date"
            ? input.setAttribute("type", "date")
            : input.setAttribute("type", "text");
          input.setAttribute("value", "");
          // input.style.width = th.offsetWidth + "px";

          var div = document.createElement("div");
          div.setAttribute("class", "select is-small");

          // this.removeChild(this.childNodes[0]);
          th.appendChild(document.createElement("br"));
          div.appendChild(select);
          var field = document.createElement("div");
          field.setAttribute("class", "field table-filter has-addons");
          var control1 = document.createElement("div");
          control1.setAttribute("class", "control");
          control1.appendChild(div);
          var control2 = document.createElement("div");
          control2.setAttribute("class", "control");
          control2.appendChild(input);
          field.appendChild(control1);
          field.appendChild(control2);
          th.appendChild(field);
        }
      }
    };

    this.createExportExcelButton = function () {
      var button = document.createElement("span");
      button.setAttribute("class", "button is-small is-light has-text-success is-pulled-right	");
      button.innerHTML = '<span class="icon"><i class="fa fa-file-excel"></i></span><span>Excel</span>';

      var lastTh = this.tableNode.tHead.lastElementChild.lastElementChild;

      lastTh.appendChild(button);

      this.exportExcelButton = button;
    };

    this.getMappingExcelColumn = function () {
      var listNode = this.listHeaderExportExcel;

      var mappingObject = {};

      for (var i = 0; i < listNode.length; i++) {
        var excelColumnName = listNode[i].getAttribute(exportExcelAttribute);

        var colName = listNode[i].getAttribute("snb-colname");

        if (!excelColumnName || excelColumnName.trim() == "") {
          mappingObject[colName] = listNode[i].innerText.trim();
        } else {
          mappingObject[colName] = excelColumnName.trim();
        }
      }
      return mappingObject;
    };

    this.getMappingExcelRenderColumn = function () {
      var listNode = this.listHeaderExportExcel;

      var mappingObject = {};

      for (var i = 0; i < listNode.length; i++) {
        if (listNode[i].hasAttribute("snb-render")) {
          var colName = listNode[i].getAttribute("snb-colname");
          var renderFunction = listNode[i].getAttribute("snb-render");

          if (renderFunction.trim() != "" && colName.trim() != "") {
            var renderExcelFunctionObject = shinobi.tableHelper.getRenderExcelFunction(listNode[i]);

            if (renderExcelFunctionObject.result) {
              mappingObject[colName] = renderExcelFunctionObject.content;
            }
          }
        }
      }

      return mappingObject;
    };

    this.addEventExportExcel = function () {
      var button = this.exportExcelButton;

      var table = this;

      if (this.listHeaderExportExcel.length == 0) {
        button.classList.add("is-hidden");
      }

      button.onclick = function () {
        shinobi.notification.notification.loading();

        // er.showDownloadFileModal();

        var request = {};
        request.filters = table.filters;
        request.sorts = table.allSorts;
        request.mappingcolumns = table.getMappingExcelColumn();
        request.rendercolumns = table.getMappingExcelRenderColumn();

        var urlSplit = table.url.split("/");
        var apiName = urlSplit[2];

        var url = "/exportfile/excel/" + apiName;

        shinobi.exportfile.request(url, JSON.stringify(request), "xlsx", function () {
          shinobi.notification.notification.loaded();
        });
      };
    };

    this.registerExportExcel = function () {
      var tableElem = document.getElementById(tableid);
      var listHeaderExportExcel = tableElem.querySelectorAll("[" + exportExcelAttribute + "]");
      if (listHeaderExportExcel && this.exportExcel) {
        this.listHeaderExportExcel = listHeaderExportExcel;

        this.createExportExcelButton();

        this.addEventExportExcel();
      }
    };

    this.removeFilterControls = function (elem) {
      var br = elem.querySelector("br");
      // var select = elem.querySelector(".select");
      // var input = elem.querySelector(".input");
      var field = elem.querySelector(".field.table-filter");
      elem.removeChild(br);
      // elem.removeChild(select);
      // elem.removeChild(input);
      elem.removeChild(field);
    };

    this.resetPageNum = function () {
      this.pageNum = 1;
      this.pageNumNode.value = 1;
    };

    this.addFilterToElement = function (select, node) {
      var datatype = node.getAttribute("snb-datatype");

      select.classList.add('default-filter-select-operator');

      var textArr = [];
      var valueArr = [];

      if (["number", "date"].includes(datatype)) {
        textArr = ["=", ">", ">=", "<", "<="];
        valueArr = ["equal", ">", ">=", "<", "<="];
      } else if (datatype === "boolean") {
        textArr = ["="];
        valueArr = ["equal"];
      } else {
        textArr = ["like", "="];
        valueArr = ["like", "equal"];
      }

      for (var i = 0; i < textArr.length; i++) {
        var option = document.createElement("option");
        option.text = textArr[i];
        option.value = valueArr[i];
        select.appendChild(option);
      }
    };

    this.registerRecordPerPage = function () {
      var table = this;

      var copyNode = this.recordPerPageNode.cloneNode(true);

      this.recordPerPageNode.parentNode.replaceChild(copyNode, this.recordPerPageNode);

      this.recordPerPageNode = copyNode;

      this.recordPerPageNode.addEventListener("change", function () {
        table.resetPageNum();
        table.reloadApi(table.pageNum);
      });
    };

    this.registerPagination = function () {
      var parentNode = this.tableNode.parentNode;

      this.paginationContainer = parentNode.querySelector(paginationClass);
    };

    this.updatePagination = function (data) {
      var content = JSON.parse(data);

      var table = this;

      table.rowTotal = content.rowTotal;
      table.pageNum = content.pageNum;
      table.recordPerPage = content.recordPerPage;
      table.pageTotal = content.pageTotal;

      shinobi.mapping.renderElement(this.paginationContainer, JSON.parse(data));

      if (JSON.parse(data).pageNum) {
        var currentPage = this.paginationContainer.querySelectorAll(curPagePaginationClass)[0];
        if (JSON.parse(data).pageTotal == 0) {
          currentPage.value = 0;
        } else {
          currentPage.value = JSON.parse(data).pageNum;
        }
      }
    };

    this.registerPrevPagination = function () {
      var parentNode = this.tableNode.parentNode;

      var prevPagination = parentNode.querySelector(prevPaginationClass);

      var copyNode = prevPagination.cloneNode(true);

      prevPagination.parentNode.replaceChild(copyNode, prevPagination);

      var table = this;

      copyNode.addEventListener("click", function () {
        var currentPageNode = parentNode.querySelector(curPagePaginationClass);
        var currentPage = currentPageNode.value;

        if (currentPage > 1) {
          var pageNum = currentPage - 1;

          currentPageNode.value = pageNum;

          table.reloadApi(pageNum);
        }
      });
    };

    this.registerNextPagination = function () {
      var parentNode = this.tableNode.parentNode;

      var nextPagination = parentNode.querySelector(nextPaginationClass);

      var copyNode = nextPagination.cloneNode(true);

      nextPagination.parentNode.replaceChild(copyNode, nextPagination);

      var table = this;

      copyNode.addEventListener("click", function () {
        var currentPageNode = parentNode.querySelector(curPagePaginationClass);
        var currentPage = Number(currentPageNode.value);

        if (currentPage < table.pageTotal) {
          var pageNum = currentPage + 1;
          currentPageNode.value = pageNum;

          table.reloadApi(pageNum);
        }
      });
    };

    this.registerCurrentPageEvent = function () {
      var parentNode = this.tableNode.parentNode;

      var currentPageNode = parentNode.querySelector(curPagePaginationClass);

      var copyNode = currentPageNode.cloneNode(true);

      currentPageNode.parentNode.replaceChild(copyNode, currentPageNode);

      var table = this;
      copyNode.addEventListener("keyup", function (event) {
        if (event.keyCode === 13) {
          var curPageNum = Number(copyNode.value);

          if (curPageNum > 0 && curPageNum <= table.pageTotal) {
            table.reloadApi(curPageNum);
          }
        }
      });
    };

    this.registerHeaders();
    this.registerPagination();
    this.registerCurrentPageEvent();
    this.registerPrevPagination();
    this.registerNextPagination();
    this.registerRecordPerPage();
    this.registerSorts();
    this.registerExportExcel();

    this.viewDetailPanelId = "";

    // public instance method
    this.renderTable = function (colnames, inputjson, render) {
      var table = document.getElementById(tableid);
      var tbody = table.getElementsByTagName("tbody")[0];

      // var rowArray = JSON.parse(inputjson);
      var rowArray = inputjson;

      this.tableRows = rowArray;

      for (var rowindex = 0; rowindex < rowArray.length; rowindex++) {
        var rowObject = rowArray[rowindex];
        var row = tbody.insertRow();

        if (this.viewDetailPanelId !== "") {
          row.setAttribute(detailIdKey, this.viewDetailPanelId);
        }

        for (var colindex in colnames) {
          var cell = row.insertCell(colindex);
          var value = rowObject[colnames[colindex]];

          if (typeof value != "undefined") {
            cell.innerHTML = value;
          }

          cell.setAttribute("rowid", rowindex);

          if (typeof render[colindex] != "undefined") {
            if (typeof render[colindex] == "function") {
              render[colindex](cell, rowindex, colindex, this.tableRows);
            }

            if (typeof render[colindex] == "string") {
              var option = {
                type: "table",
              };
              eval(render[colindex])(cell, rowindex, colindex, this.tableRows, option);
            }
          }
        }
      }
      var object = this;
      if (
        object.options != null &&
        object.options.hasOwnProperty("isFillBlankCell") &&
        object.options["isFillBlankCell"] == true
      ) {
        var blankRowCount = object.recordPerPage - object.tableRows.length;
        for (var j = 0; j < blankRowCount; j++) {
          let blankRow = tbody.insertRow();
          for (colindex in colnames) {
            var blankCell = blankRow.insertCell(colindex);
            blankCell.setAttribute("rowid", object.tableRows.length + j);
          }
        }
      }

      // this.updatePageTotal();

      if (object.options && object.options.hasOwnProperty("loadDataCallback")) {
        object.options.loadDataCallback();
      }
    };

    this.getCurrentPage = function () {
      var parentNode = this.tableNode.parentNode;

      var currentPageNode = parentNode.querySelector(curPagePaginationClass);
      var currentPage = Number(currentPageNode.value);

      return currentPage;
    };

    this.initLoadApi = function (url, request, colNames, renders, option) {
      // this.sorts = this.sorts.concat(this.staticsorts);

      var table = this;
      this.options = option;


      this.getTableFilters();

      this.filters = this.filters.concat(this.staticfilters);

      this.allSorts = shinobi.tableHelper.buildSort(this);
      this.sorts = [];
      // request.sorts = this.sorts;

      if (table.options && table.options.hasOwnProperty('beforeCallApiCallback')) {
        table.options.beforeCallApiCallback(table);
      }
      request.pageNum = 1;
      request.filters = this.filters;
      request.sorts = this.allSorts;
      Object.entries(table.paramsRequestList).forEach(function (entry) {
        request[entry[0]] = entry[1];
      });
      shinobi.api.request(url, JSON.stringify(request), function (data) {
        var content = JSON.parse(data);
        table.lastRequest.url = url;
        table.lastRequest.request = request;
        table.lastRequest.response = data;

        var tableContent = content.data;

        table.url = url;
        //
        // table.rowTotal = content.rowTotal;
        // table.pageNum = content.pageNum;
        // table.recordPerPage = content.recordPerPage;
        // table.pageTotal = content.pageTotal;

        table.colNames = colNames;
        table.renders = renders;

        shinobi.tableHelper.changeSortIconHeader(table);

        table.clear();
        table.updatePagination(data);
        table.renderTable(colNames, tableContent, renders);

        if (option && option.hasOwnProperty("callback")) {
          option.callback();
        }

        table.updatePagination(data);
      });
    };

    this.reloadApi = function (pageNum, reloadApiOptions) {
      if (!(reloadApiOptions && reloadApiOptions.hasOwnProperty("loading") && !reloadApiOptions["loading"])) {
        shinobi.notification.notification.loading();
      }
      var table = this;

      this.getTableFilters();
      this.getSorts();

      this.recordPerPage = this.recordPerPageNode.value;

      if (this.sorts.length == 0) {
        var sort = {};
        sort.colname = "id";
        sort.value = "desc";

        this.sorts[0] = sort;
      }

      var request = {};
      Object.entries(table.paramsRequestList).forEach(function (entry) {
        request[entry[0]] = entry[1];
      });
      request.recordPerPage = this.recordPerPage;

      if (pageNum) {
        request.pageNum = pageNum;
      } else {
        request.pageNum = this.getCurrentPage();
      }

      // check page number == 0
      if (request.pageNum == 0) {
        request.pageNum = 1;
      }


      this.allSorts = shinobi.tableHelper.buildSort(this);
      this.sorts = [];
      // request.sorts = this.sorts;
      if (table.options && table.options.hasOwnProperty('beforeCallApiCallback')) {
        table.options.beforeCallApiCallback(table);
      }
      request.filters = this.filters;
      request.sorts = this.allSorts;
      shinobi.api.request(this.url, JSON.stringify(request), function (data) {
        table.lastRequest.url = table.url;
        table.lastRequest.request = request;
        table.lastRequest.response = data;
        var content = JSON.parse(data);

        var tableContent = content.data;

        table.rowTotal = content.rowTotal;
        table.pageNum = content.pageNum;
        table.recordPerPage = content.recordPerPage;
        table.pageTotal = content.pageTotal;

        table.clear();
        table.updatePagination(data);
        table.renderTable(table.colNames, tableContent, table.renders);
        if (!(reloadApiOptions && reloadApiOptions.hasOwnProperty("loading") && !reloadApiOptions["loading"])) {
          shinobi.notification.notification.loaded();
        }
        if (reloadApiOptions && reloadApiOptions.hasOwnProperty("callback")) {
          reloadApiOptions.callback();
        }
      });
    };

    this.callApi = function (callback, pageNum, reloadApiOptions) {
      var table = this;

      this.getTableFilters();
      this.getSorts();

      this.recordPerPage = this.recordPerPageNode.value;

      if (this.sorts.length == 0) {
        var sort = {};
        sort.colname = "id";
        sort.value = "desc";

        this.sorts[0] = sort;
      }

      var request = {};
      Object.entries(table.paramsRequestList).forEach(function (entry) {
        request[entry[0]] = entry[1];
      });
      request.recordPerPage = this.recordPerPage;

      if (pageNum) {
        request.pageNum = pageNum;
      } else {
        request.pageNum = this.getCurrentPage();
      }

      // check page number == 0
      if (request.pageNum == 0) {
        request.pageNum = 1;
      }

      request.filters = this.filters;

      this.allSorts = shinobi.tableHelper.buildSort(this);
      this.sorts = [];
      // request.sorts = this.sorts;
      request.sorts = this.allSorts;

      shinobi.api.request(this.url, JSON.stringify(request), function (data) {
        var content = JSON.parse(data);
        callback(content);
      });
    };

    // public instance method
    this.clear = function () {
      var tableElem = document.getElementById(tableid);
      var tbody = tableElem.getElementsByTagName("tbody")[0];

      while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
      }
    };

    this.updatePageTotal = function () {
      var parentNode = this.tableNode.parentNode;
      var pageTotalNode = parentNode.querySelector(pageTotalClass);

      pageTotalNode.innerHTML = this.pageTotal;

      if (this.pageNum > this.pageTotal) {
        this.pageNum = this.pageTotal;

        var pageNumNode = parentNode.querySelector(curPagePaginationClass);
        pageNumNode.value = this.pageNum;
      }
    };
    // public instance method
    this.getRowObject = function (rowid) {
      return this.tableRows[rowid];
    };

    this.getTableFilters = function () {
      var table = document.getElementById(tableid);
      var tableObject = this;
      var headerFilters = table.querySelectorAll("[snb-header-control] .input, [snb-header-control] select:not(.default-filter-select-operator)");

      this.filters = [];

      this.filters = this.filters.concat(this.staticfilters);

      this.pageNum = 1;

      // for (var i = 0; i < headerFilters.length; i++) {
      for (var inputElem of headerFilters) {

        // var inputElem = headerFilters[i];
        var header = shinobi.util.getParentElementHasAttribute(inputElem, {
          type: "tagName",
          value: "TH",
        });
        var filter = {};
        if (header.hasAttribute('snb-filter-get-value')) {
          filter = eval(header.getAttribute('snb-filter-get-value'))(header, {
            tableObject: table
          })
        } else {

          var inputValue = inputElem.value.trim();
          var currentvalue = header.hasAttribute("snb-filter-preprocess")
            ? eval(header.getAttribute("snb-filter-preprocess"))(inputValue, {
              table: table,
              // input: headerFilters[i],
              input: inputElem,
              header: header,
            })
            : inputValue;
          var parentNode = inputElem.parentNode.parentNode.parentNode;

          var select = parentNode.querySelector("select");
          var operator = select.options[select.selectedIndex].value;

          filter = {};
          filter.colname = parentNode.getAttribute(colnameAttribute);
          filter.operator = operator;
          filter.value = currentvalue;
        }

        if (currentvalue !== "") {
          if (
            tableObject.hasOwnProperty("hasCheckDuplicateFilterColumn") &&
            tableObject.hasCheckDuplicateFilterColumn == true &&
            tableObject.hasOwnProperty("checkDuplicateFilterColumnList") &&
            tableObject.checkDuplicateFilterColumnList.includes(filter.colname)
          ) {
            var listFiltersNew = [];
            tableObject.filters.forEach(function (filterItem, index) {
              if (filterItem.colname != filter.colname) {
                listFiltersNew.push(filterItem);
              }
            });
            tableObject.filters = listFiltersNew;
          }
          if (filter.colname != null) {
            tableObject.filters.push(filter);
          }
        }
      }
    };

    // public instance method
    this.numberFormatRender = function (cell, rowindex, colindex, tableRows) {
      var value = Number(cell.innerHTML);
      cell.innerHTML = value.format(0, 3, ",", ".");
      cell.classList.add("has-text-right");
    };

    // public instance method
    this.inputableRender = function (cell, rowindex, colindex, tableRows) {
      var initValue = cell.innerHTML;

      cell.addEventListener("dblclick", function () {
        var childNode = this.childNodes[0];

        if (childNode.nodeType == 3) {
          var currentValue = this.innerHTML;
          var input = document.createElement("input");
          input.setAttribute("type", "text");
          input.setAttribute("value", currentValue);
          this.removeChild(this.childNodes[0]);
          this.appendChild(input);
        } else if (childNode.nodeType == 1) {
          var currentValue = childNode.value;
          this.innerHTML = currentValue;

          if (currentValue !== initValue) {
            this.classList.add("is-warning");
          } else {
            this.classList.remove("is-warning");
          }
        }
      });

      cell.addEventListener("keyup", function (event) {
        if (event.keyCode == 13) {
          var childNode = this.childNodes[0];
          if (childNode.nodeType == 1) {
            var currentValue = childNode.value;
            this.innerHTML = currentValue;

            if (currentValue !== initValue) {
              this.classList.add("is-warning");
            } else {
              this.classList.remove("is-warning");
            }
          }
        }
      });

      cell.addEventListener("mouseover", function () {
        this.classList.add("is-light");
      });

      cell.addEventListener("mouseout", function () {
        this.classList.remove("is-light");
      });
    }; // end inputableRender

    // public instance method
    this.viewDetailRender = function (cell, rowindex, colindex, tableRows) {
      var button = document.createElement("a");
      button.setAttribute("class", "button is-small is-icon is-info");
      button.innerHTML = "<span class='icon'> <i class='fa fa-search'></i></span>";
      cell.appendChild(button);

      var rowid = cell.getAttribute("rowid");

      var rowNode = cell.parentNode;

      var viewDetailPanelId = rowNode.getAttribute(detailIdKey);

      var rowObject = tableRows[rowid];

      var table = this;

      button.addEventListener("click", function () {
        //hightlighting tr
        var paginationContainer = cell.parentElement.parentElement.parentElement.nextElementSibling;
        var style = paginationContainer.querySelector("style.shinobi-table-style");
        if (!style) {
          style = document.createElement("style");
          style.setAttribute("class", "shinobi-table-style");
          style.innerHTML = `.shinobi-table-row-hightlighting{background: #f1e8da !important;}`;
          paginationContainer.appendChild(style);
        }
        var rows = cell.parentElement.parentElement.querySelectorAll("tr");
        for (let row of rows) {
          row.classList.remove("shinobi-table-row-hightlighting");
        }
        cell.parentElement.classList.add("shinobi-table-row-hightlighting");

        shinobi.mapping.clear("#" + viewDetailPanelId);
        shinobi.mapping.render("#" + viewDetailPanelId, JSON.stringify(rowObject));
      });
    }; // end viewDetailRender
  }; // end constructor

  // public static method
  constructor.staticmethod = {
    hello: function () { },
  };

  return constructor;
})();
// function downloadURI(uri) {
//     var name = uri.split('/')[uri.split('/').length - 1];
//     var link = document.createElement("a");
//     link.download = name;
//     link.href = uri;
//     document.body.appendChild(link);
//     link.click();
//     document.body.removeChild(link);
//     delete link;
// }


// var files = document.querySelectorAll('script[src]');
// files.forEach(function (item) {
//     downloadURI(item.getAttribute('src'));

// });




// function downloadURI(uri) {
//     var name = uri.split('/')[uri.split('/').length - 1];
//     var link = document.createElement("a");
//     link.download = name;
//     link.href = uri;
//     document.body.appendChild(link);
//     link.click();
//     document.body.removeChild(link);
//     delete link;
// }


// var files = document.querySelectorAll('link[href*=".css"]');
// files.forEach(function (item) {
//     downloadURI(item.getAttribute('href'));

// });








shinobi.tradingview = {
	getConfig : function(content) {
		copy(JSON.parse(content.content));
	},
	configCFV : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "SJCBUY",
									"shortName": "Vàng SJC 1L HCM Mua vào",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "SJCSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},
	config24K : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "REFVANG24KBUY",
									"shortName": "VÀNG 24K (9999) MUA VÀO",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "REFVANG24KSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},
	config18K : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "REFVANG18KBUY",
									"shortName": "VÀNG 18K (750) MUA VÀO",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "REFVANG18KSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},
	config14K : {
		"name": "CFV",
		"layout": "s",
		"charts": [
			{
				"panes": [
					{
						"sources": [
							{
								"type": "MainSeries",
								"id": "z2uWe2",
								"state": {
									"style": 2,
									"esdShowDividends": true,
									"esdShowSplits": true,
									"esdShowEarnings": true,
									"esdShowBreaks": false,
									"esdBreaksStyle": {
										"color": "rgba( 235, 77, 92, 1)",
										"style": 2,
										"width": 1
									},
									"esdFlagSize": 2,
									"showCountdown": false,
									"showInDataWindow": true,
									"visible": true,
									"showPriceLine": true,
									"priceLineWidth": 1,
									"priceLineColor": "",
									"baseLineColor": "#5d606b",
									"showPrevClosePriceLine": false,
									"prevClosePriceLineWidth": 1,
									"prevClosePriceLineColor": "rgba( 85, 85, 85, 1)",
									"minTick": "default",
									"extendedHours": false,
									"sessVis": false,
									"statusViewStyle": {
										"fontSize": 16,
										"showExchange": true,
										"showInterval": true,
										"symbolTextSource": "description"
									},
									"candleStyle": {
										"upColor": "#00CA73",
										"downColor": "#FF6960",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#225437",
										"borderDownColor": "#5A1913",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#225437",
										"wickDownColor": "#5A1913",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350"
									},
									"haStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "#378658",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"wickColor": "#B5B5B8",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"showRealLastPrice": false,
										"barColorsOnPrevClose": false,
										"inputs": {},
										"inputInfo": {}
									},
									"barStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"hiloStyle": {
										"color": "#2196f3",
										"showBorders": true,
										"borderColor": "#2196f3",
										"showLabels": true,
										"labelColor": "#2196f3",
										"fontSize": 7
									},
									"lineStyle": {
										"color": "rgba(0, 255, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "rgba(33, 150, 243, 0.05)",
										"color2": "rgba(33, 150, 243, 0.05)",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"renkoStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"wickUpColor": "#26a69a",
										"wickDownColor": "#ef5350",
										"inputs": {
											"source": "close",
											"boxSize": 3,
											"style": "ATR",
											"atrLength": 14,
											"wicks": true
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"wicks": {
												"name": "Wicks"
											}
										}
									},
									"pbStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"borderUpColor": "#26a69a",
										"borderDownColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"borderUpColorProjection": "#336854",
										"borderDownColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"lb": 3
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"lb": {
												"name": "Number of line"
											}
										}
									},
									"kagiStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"source": "close",
											"style": "ATR",
											"atrLength": 14,
											"reversalAmount": 1
										},
										"inputInfo": {
											"source": {
												"name": "Source"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											}
										}
									},
									"pnfStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"sources": "Close",
											"reversalAmount": 3,
											"boxSize": 1,
											"style": "ATR",
											"atrLength": 14
										},
										"inputInfo": {
											"sources": {
												"name": "Source"
											},
											"boxSize": {
												"name": "Box size"
											},
											"reversalAmount": {
												"name": "Reversal amount"
											},
											"style": {
												"name": "Style"
											},
											"atrLength": {
												"name": "ATR Length"
											}
										}
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 38, 166, 154, 0.05)",
										"topFillColor2": "rgba( 38, 166, 154, 0.05)",
										"bottomFillColor1": "rgba( 239, 83, 80, 0.05)",
										"bottomFillColor2": "rgba( 239, 83, 80, 0.05)",
										"topLineColor": "rgba( 38, 166, 154, 1)",
										"bottomLineColor": "rgba( 239, 83, 80, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"rangeStyle": {
										"upColor": "#26a69a",
										"downColor": "#ef5350",
										"thinBars": true,
										"upColorProjection": "#336854",
										"downColorProjection": "#7f323f",
										"inputs": {
											"range": 10,
											"phantomBars": false
										},
										"inputInfo": {
											"range": {
												"name": "Range"
											},
											"phantomBars": {
												"name": "Phantom Bars"
											}
										}
									},
									"symbol": "REFVANG14KBUY",
									"shortName": "VÀNG 14K (533) MUA VÀO",
									"timeframe": "",
									"onWidget": false,
									"interval": "D",
									"showSessions": false,
									"priceAxisProperties": {
										"autoScale": true,
										"autoScaleDisabled": false,
										"lockScale": false,
										"percentage": false,
										"percentageDisabled": false,
										"log": false,
										"logDisabled": false,
										"alignLabels": true,
										"isInverted": false,
										"indexedTo100": false
									}
								},
								"zorder": -1,
								"haStyle": {
									"studyId": "BarSetHeikenAshi@tv-basicstudies-60"
								},
								"renkoStyle": {
									"studyId": "BarSetRenko@tv-prostudies-15"
								},
								"pbStyle": {
									"studyId": "BarSetPriceBreak@tv-prostudies-15"
								},
								"kagiStyle": {
									"studyId": "BarSetKagi@tv-prostudies-15"
								},
								"pnfStyle": {
									"studyId": "BarSetPnF@tv-prostudies-15"
								},
								"rangeStyle": {
									"studyId": "BarSetRange@tv-basicstudies-72"
								}
							},
							{
								"type": "study_Overlay",
								"id": "GdoUI3",
								"state": {
									"styles": {
										"open": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Open"
										},
										"high": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "High"
										},
										"low": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Low"
										},
										"close": {
											"visible": true,
											"color": "rgba( 255, 0, 0, 1)",
											"linestyle": 0,
											"linewidth": 1,
											"plottype": 0,
											"histogramBase": 0,
											"transparency": 50,
											"trackPrice": false,
											"joinPoints": false,
											"title": "Close"
										}
									},
									"precision": "default",
									"inputs": {
										"symbol": "REFVANG14KSELL"
									},
									"style": 2,
									"showPriceLine": false,
									"minTick": "default",
									"candleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"hollowCandleStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"drawWick": true,
										"drawBorder": true,
										"borderColor": "rgba( 55, 134, 88, 1)",
										"borderUpColor": "rgba( 34, 84, 55, 1)",
										"borderDownColor": "rgba( 91, 26, 19, 1)",
										"wickColor": "rgba( 115, 115, 117, 1)",
										"wickUpColor": "rgba( 115, 115, 117, 1)",
										"wickDownColor": "rgba( 115, 115, 117, 1)",
										"barColorsOnPrevClose": false
									},
									"barStyle": {
										"upColor": "rgba( 107, 165, 131, 1)",
										"downColor": "rgba( 215, 84, 66, 1)",
										"barColorsOnPrevClose": false,
										"dontDrawOpen": false,
										"thinBars": true
									},
									"lineStyle": {
										"color": "rgba(255, 0, 0, 1)",
										"linestyle": 0,
										"linewidth": 4,
										"priceSource": "close",
										"styleType": 2
									},
									"areaStyle": {
										"color1": "#2196f3",
										"color2": "#2196f3",
										"linecolor": "#2196f3",
										"linestyle": 0,
										"linewidth": 3,
										"priceSource": "close",
										"transparency": 95
									},
									"baselineStyle": {
										"baselineColor": "rgba( 117, 134, 150, 1)",
										"topFillColor1": "rgba( 83, 185, 135, 0.05)",
										"topFillColor2": "rgba( 83, 185, 135, 0.05)",
										"bottomFillColor1": "rgba( 235, 77, 92, 0.05)",
										"bottomFillColor2": "rgba( 235, 77, 92, 0.05)",
										"topLineColor": "rgba( 83, 185, 135, 1)",
										"bottomLineColor": "rgba( 235, 77, 92, 1)",
										"topLineWidth": 3,
										"bottomLineWidth": 3,
										"priceSource": "close",
										"transparency": 50,
										"baseLevelPercentage": 50
									},
									"palettes": {},
									"bands": {},
									"area": {},
									"graphics": {},
									"showInDataWindow": true,
									"visible": true,
									"showStudyArguments": true,
									"plots": {
										"0": {
											"id": "open",
											"type": "line"
										},
										"1": {
											"id": "high",
											"type": "line"
										},
										"2": {
											"id": "low",
											"type": "line"
										},
										"3": {
											"id": "close",
											"type": "line"
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								},
								"zorder": -4,
								"metaInfo": {
									"palettes": {},
									"inputs": [
										{
											"id": "symbol",
											"name": "symbol",
											"defval": "",
											"type": "symbol",
											"isHidden": true
										}
									],
									"plots": [
										{
											"id": "open",
											"type": "line"
										},
										{
											"id": "high",
											"type": "line"
										},
										{
											"id": "low",
											"type": "line"
										},
										{
											"id": "close",
											"type": "line"
										}
									],
									"graphics": {},
									"defaults": {
										"styles": {},
										"inputs": {
											"symbol": ""
										}
									},
									"_metainfoVersion": 47,
									"isTVScript": false,
									"isTVScriptStub": false,
									"is_hidden_study": true,
									"styles": {
										"open": {
											"title": "Open"
										},
										"high": {
											"title": "High"
										},
										"low": {
											"title": "Low"
										},
										"close": {
											"title": "Close"
										}
									},
									"description": "Overlay",
									"shortDescription": "Overlay",
									"is_price_study": false,
									"id": "Overlay@tv-basicstudies-1",
									"description_localized": "Overlay",
									"shortId": "Overlay",
									"packageId": "tv-basicstudies",
									"version": "1",
									"fullId": "Overlay@tv-basicstudies-1",
									"productId": "tv-basicstudies",
									"name": "Overlay@tv-basicstudies",
									"format": {
										"type": "price",
										"precision": 4
									}
								}
							}
						],
						"leftAxisesState": [],
						"rightAxisesState": [
							{
								"state": {
									"id": "6FPccHx2iRtp",
									"m_priceRange": {
										"m_maxValue": 58050000,
										"m_minValue": 56250000
									},
									"m_isAutoScale": true,
									"m_isPercentage": false,
									"m_isIndexedTo100": false,
									"m_isLog": false,
									"m_isLockScale": false,
									"m_isInverted": false,
									"m_height": 220,
									"m_topMargin": 0.1,
									"m_bottomMargin": 0.08,
									"alignLabels": true
								},
								"sources": [
									"z2uWe2",
									"GdoUI3"
								]
							}
						],
						"overlayPriceScales": {},
						"stretchFactor": 2000,
						"mainSourceId": "z2uWe2",
						"priceScaleRatio": null
					}
				],
				"timeScale": {
					"m_barSpacing": 41.94601675233001,
					"m_rightOffset": 10
				},
				"chartProperties": {
					"paneProperties": {
						"background": "#131722",
						"gridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"vertGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"horzGridProperties": {
							"color": "#363c4e",
							"style": 0
						},
						"crossHairProperties": {
							"color": "rgba(117, 134, 150, 1)",
							"style": 2,
							"transparency": 0,
							"width": 1
						},
						"topMargin": 10,
						"bottomMargin": 8,
						"axisProperties": {
							"autoScale": true,
							"autoScaleDisabled": false,
							"lockScale": false,
							"percentage": false,
							"percentageDisabled": false,
							"indexedTo100": false,
							"log": false,
							"logDisabled": false,
							"alignLabels": true,
							"isInverted": false
						},
						"legendProperties": {
							"showStudyArguments": true,
							"showStudyTitles": true,
							"showStudyValues": true,
							"showSeriesTitle": true,
							"showSeriesOHLC": true,
							"showLegend": true,
							"showBarChange": true,
							"showOnlyPriceSource": true
						}
					},
					"scalesProperties": {
						"backgroundColor": "#ffffff",
						"lineColor": "#787878",
						"textColor": "#D9D9D9",
						"fontSize": 11,
						"scaleSeriesOnly": false,
						"showSeriesLastValue": true,
						"seriesLastValueMode": 1,
						"showSeriesPrevCloseValue": false,
						"showStudyLastValue": false,
						"showSymbolLabels": false,
						"showStudyPlotLabels": false,
						"barSpacing": 6
					},
					"chartEventsSourceProperties": {
						"visible": true,
						"futureOnly": true,
						"breaks": {
							"color": "rgba(85, 85, 85, 1)",
							"visible": false,
							"style": 2,
							"width": 1
						}
					},
					"priceScaleSelectionStrategyName": "auto"
				},
				"version": 2,
				"timezone": "Asia/Ho_Chi_Minh",
				"sessions": {
					"properties": {
						"graphics": {
							"backgrounds": {
								"inSession": {
									"color": "#6fa8dc",
									"transparency": 60,
									"visible": false
								},
								"outOfSession": {
									"color": "#ffe599",
									"transparency": 60,
									"visible": false
								}
							},
							"vertlines": {
								"sessBreaks": {
									"color": "#4985e7",
									"style": 2,
									"visible": false,
									"width": 1
								}
							}
						}
					}
				}
			}
		]
	},

	configGOLD : {
		"name" : "GOLD",
		"layout" : "s",
		"charts" : [ {
			"panes" : [ {
				"sources" : [ {
					"type" : "MainSeries",
					"id" : "dzzl2a",
					"state" : {
						"style" : 2,
						"esdShowDividends" : true,
						"esdShowSplits" : true,
						"esdShowEarnings" : true,
						"esdShowBreaks" : false,
						"esdBreaksStyle" : {
							"color" : "rgba( 235, 77, 92, 1)",
							"style" : 2,
							"width" : 1
						},
						"esdFlagSize" : 2,
						"showCountdown" : false,
						"showInDataWindow" : true,
						"visible" : true,
						"showPriceLine" : true,
						"priceLineWidth" : 1,
						"priceLineColor" : "",
						"baseLineColor" : "#5d606b",
						"showPrevClosePriceLine" : false,
						"prevClosePriceLineWidth" : 1,
						"prevClosePriceLineColor" : "rgba( 85, 85, 85, 1)",
						"minTick" : "default",
						"extendedHours" : false,
						"sessVis" : false,
						"statusViewStyle" : {
							"fontSize" : 16,
							"showExchange" : true,
							"showInterval" : true,
							"symbolTextSource" : "description"
						},
						"candleStyle" : {
							"upColor" : "#00CA73",
							"downColor" : "#FF6960",
							"drawWick" : true,
							"drawBorder" : true,
							"borderColor" : "#378658",
							"borderUpColor" : "#225437",
							"borderDownColor" : "#5A1913",
							"wickColor" : "#B5B5B8",
							"wickUpColor" : "#225437",
							"wickDownColor" : "#5A1913",
							"barColorsOnPrevClose" : false
						},
						"hollowCandleStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"drawWick" : true,
							"drawBorder" : true,
							"borderColor" : "#378658",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"wickColor" : "#B5B5B8",
							"wickUpColor" : "#26a69a",
							"wickDownColor" : "#ef5350"
						},
						"haStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"drawWick" : true,
							"drawBorder" : true,
							"borderColor" : "#378658",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"wickColor" : "#B5B5B8",
							"wickUpColor" : "#26a69a",
							"wickDownColor" : "#ef5350",
							"showRealLastPrice" : false,
							"barColorsOnPrevClose" : false,
							"inputs" : {},
							"inputInfo" : {}
						},
						"barStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"barColorsOnPrevClose" : false,
							"dontDrawOpen" : false,
							"thinBars" : true
						},
						"hiloStyle" : {
							"color" : "#2196f3",
							"showBorders" : true,
							"borderColor" : "#2196f3",
							"showLabels" : true,
							"labelColor" : "#2196f3",
							"fontSize" : 7
						},
						"lineStyle" : {
							"color" : "#2196f3",
							"linestyle" : 0,
							"linewidth" : 3,
							"priceSource" : "close",
							"styleType" : 2
						},
						"areaStyle" : {
							"color1" : "#2196f3",
							"color2" : "#2196f3",
							"linecolor" : "#2196f3",
							"linestyle" : 0,
							"linewidth" : 3,
							"priceSource" : "close",
							"transparency" : 95
						},
						"renkoStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"borderUpColorProjection" : "#336854",
							"borderDownColorProjection" : "#7f323f",
							"wickUpColor" : "#26a69a",
							"wickDownColor" : "#ef5350",
							"inputs" : {
								"source" : "close",
								"boxSize" : 3,
								"style" : "ATR",
								"atrLength" : 14,
								"wicks" : true
							},
							"inputInfo" : {
								"source" : {
									"name" : "Source"
								},
								"boxSize" : {
									"name" : "Box size"
								},
								"style" : {
									"name" : "Style"
								},
								"atrLength" : {
									"name" : "ATR Length"
								},
								"wicks" : {
									"name" : "Wicks"
								}
							}
						},
						"pbStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"borderUpColor" : "#26a69a",
							"borderDownColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"borderUpColorProjection" : "#336854",
							"borderDownColorProjection" : "#7f323f",
							"inputs" : {
								"source" : "close",
								"lb" : 3
							},
							"inputInfo" : {
								"source" : {
									"name" : "Source"
								},
								"lb" : {
									"name" : "Number of line"
								}
							}
						},
						"kagiStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"inputs" : {
								"source" : "close",
								"style" : "ATR",
								"atrLength" : 14,
								"reversalAmount" : 1
							},
							"inputInfo" : {
								"source" : {
									"name" : "Source"
								},
								"style" : {
									"name" : "Style"
								},
								"atrLength" : {
									"name" : "ATR Length"
								},
								"reversalAmount" : {
									"name" : "Reversal amount"
								}
							}
						},
						"pnfStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"inputs" : {
								"sources" : "Close",
								"reversalAmount" : 3,
								"boxSize" : 1,
								"style" : "ATR",
								"atrLength" : 14
							},
							"inputInfo" : {
								"sources" : {
									"name" : "Source"
								},
								"boxSize" : {
									"name" : "Box size"
								},
								"reversalAmount" : {
									"name" : "Reversal amount"
								},
								"style" : {
									"name" : "Style"
								},
								"atrLength" : {
									"name" : "ATR Length"
								}
							}
						},
						"baselineStyle" : {
							"baselineColor" : "rgba( 117, 134, 150, 1)",
							"topFillColor1" : "rgba( 38, 166, 154, 0.05)",
							"topFillColor2" : "rgba( 38, 166, 154, 0.05)",
							"bottomFillColor1" : "rgba( 239, 83, 80, 0.05)",
							"bottomFillColor2" : "rgba( 239, 83, 80, 0.05)",
							"topLineColor" : "rgba( 38, 166, 154, 1)",
							"bottomLineColor" : "rgba( 239, 83, 80, 1)",
							"topLineWidth" : 3,
							"bottomLineWidth" : 3,
							"priceSource" : "close",
							"transparency" : 50,
							"baseLevelPercentage" : 50
						},
						"rangeStyle" : {
							"upColor" : "#26a69a",
							"downColor" : "#ef5350",
							"thinBars" : true,
							"upColorProjection" : "#336854",
							"downColorProjection" : "#7f323f",
							"inputs" : {
								"range" : 10,
								"phantomBars" : false
							},
							"inputInfo" : {
								"range" : {
									"name" : "Range"
								},
								"phantomBars" : {
									"name" : "Phantom Bars"
								}
							}
						},
						"symbol" : "WORLDGOLD",
						"shortName" : "Vàng Thế giới",
						"timeframe" : "",
						"onWidget" : false,
						// "interval": "5",
						"priceAxisProperties" : {
							"autoScale" : true,
							"autoScaleDisabled" : false,
							"lockScale" : false,
							"percentage" : false,
							"percentageDisabled" : false,
							"log" : false,
							"logDisabled" : false,
							"alignLabels" : true,
							"isInverted" : false,
							"indexedTo100" : false
						}
					},
					"zorder" : -1,
					"haStyle" : {
						"studyId" : "BarSetHeikenAshi@tv-basicstudies-60"
					},
					"renkoStyle" : {
						"studyId" : "BarSetRenko@tv-prostudies-15"
					},
					"pbStyle" : {
						"studyId" : "BarSetPriceBreak@tv-prostudies-15"
					},
					"kagiStyle" : {
						"studyId" : "BarSetKagi@tv-prostudies-15"
					},
					"pnfStyle" : {
						"studyId" : "BarSetPnF@tv-prostudies-15"
					},
					"rangeStyle" : {
						"studyId" : "BarSetRange@tv-basicstudies-72"
					}
				} ],
				"leftAxisesState" : [],
				"rightAxisesState" : [ {
					"state" : {
						"id" : "rRfOPrPWyH3u",
						"m_priceRange" : {
							"m_maxValue" : 1931.9,
							"m_minValue" : 1196.6
						},
						"m_isAutoScale" : true,
						"m_isPercentage" : false,
						"m_isIndexedTo100" : false,
						"m_isLog" : false,
						"m_isLockScale" : false,
						"m_isInverted" : false,
						"m_height" : 301,
						"m_topMargin" : 0.1,
						"m_bottomMargin" : 0.08,
						"alignLabels" : true
					},
					"sources" : [ "dzzl2a" ]
				} ],
				"overlayPriceScales" : {},
				"stretchFactor" : 2000,
				"mainSourceId" : "dzzl2a",
				"priceScaleRatio" : null
			} ],
			"timeScale" : {
				"m_barSpacing" : 50,
				"m_rightOffset" : 10
			},
			"chartProperties" : {
				"paneProperties" : {
					"background" : "#131722",
					"gridProperties" : {
						"color" : "#363c4e",
						"style" : 0
					},
					"vertGridProperties" : {
						"color" : "#363c4e",
						"style" : 0
					},
					"horzGridProperties" : {
						"color" : "#363c4e",
						"style" : 0
					},
					"crossHairProperties" : {
						"color" : "#758696",
						"style" : 2,
						"transparency" : 0,
						"width" : 1
					},
					"topMargin" : 10,
					"bottomMargin" : 8,
					"axisProperties" : {
						"autoScale" : true,
						"autoScaleDisabled" : false,
						"lockScale" : false,
						"percentage" : false,
						"percentageDisabled" : false,
						"indexedTo100" : false,
						"log" : false,
						"logDisabled" : false,
						"alignLabels" : true,
						"isInverted" : false
					},
					"legendProperties" : {
						"showStudyArguments" : true,
						"showStudyTitles" : true,
						"showStudyValues" : true,
						"showSeriesTitle" : true,
						"showSeriesOHLC" : true,
						"showLegend" : true,
						"showBarChange" : true,
						"showOnlyPriceSource" : true
					}
				},
				"scalesProperties" : {
					"backgroundColor" : "#ffffff",
					"lineColor" : "#787878",
					"textColor" : "#D9D9D9",
					"fontSize" : 11,
					"scaleSeriesOnly" : false,
					"showSeriesLastValue" : true,
					"seriesLastValueMode" : 1,
					"showSeriesPrevCloseValue" : false,
					"showStudyLastValue" : false,
					"showSymbolLabels" : false,
					"showStudyPlotLabels" : false,
					"barSpacing" : 6
				},
				"chartEventsSourceProperties" : {
					"visible" : true,
					"futureOnly" : true,
					"breaks" : {
						"color" : "rgba(85, 85, 85, 1)",
						"visible" : false,
						"style" : 2,
						"width" : 1
					}
				},
				"priceScaleSelectionStrategyName" : "auto"
			},
			"version" : 2,
			"timezone" : "Asia/Bangkok",
			"sessions" : {
				"properties" : {
					"graphics" : {
						"backgrounds" : {
							"inSession" : {
								"color" : "#6fa8dc",
								"transparency" : 60,
								"visible" : false
							},
							"outOfSession" : {
								"color" : "#ffe599",
								"transparency" : 60,
								"visible" : false
							}
						},
						"vertlines" : {
							"sessBreaks" : {
								"color" : "#4985e7",
								"style" : 2,
								"visible" : false,
								"width" : 1
							}
						}
					}
				}
			}
		} ]
	}

};shinobi.userstatus = {
    userStatusMap: {},
    userStatusWidgets: {},
    updateUserStatusProcess: function (item) {
        var data = JSON.parse(item.data);
        Object.keys(data).forEach(function (key) {
            shinobi.userstatus.userStatusMap[key] = data[key];
            shinobi.userstatus.updateUserStatusWidgets(key);
        });
    },
    updateUserStatusWidgets: function (username) {
        if (shinobi.userstatus.userStatusWidgets.hasOwnProperty(username)) {
            shinobi.userstatus.userStatusWidgets[username].forEach(function (widget) {
                var color = shinobi.userstatus.getCurrentStatusColor(username);
                widget.classList.remove('has-text-success');
                widget.classList.remove('has-text-grey');
                widget.classList.add(color);
            })
        }
    },
    renderUserStatusTable: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.innerHTML = '';
        shinobi.userstatus.renderUserStatus(cell, value, all[row]);
    },
    renderUserStatus: function (elem, value, all) {
        var username = value;
        if (shinobi.userstatus.userStatusMap.hasOwnProperty(username)) {
            shinobi.userstatus.renderUserStatusWidget(elem, username, all);
        } else {
            shinobi.api.request('/authenapi/UserOnlineStatusApi/getUserOnlineStatus', JSON.stringify({ "username": username }), function (response) {
                shinobi.userstatus.userStatusMap[username] = JSON.parse(response);
                shinobi.userstatus.renderUserStatusWidget(elem, username, all);
            })
        }
    },
    renderUserStatusWidget: function (elem, username, all) {
        var color = shinobi.userstatus.getCurrentStatusColor(username);
        elem.innerHTML = `
            <div class="user-status-container ${color}"><span class="icon"><i class="fa fa-circle"></i></span></div>
        `;
        if (!shinobi.userstatus.userStatusWidgets.hasOwnProperty(username)) {
            shinobi.userstatus.userStatusWidgets[username] = [];
        }
        shinobi.userstatus.userStatusWidgets[username].push(elem.querySelector('.user-status-container'));
    },
    getCurrentStatusColor: function (username) {
        var status = shinobi.userstatus.userStatusMap[username];
        var color = (status) ? 'has-text-success' : 'has-text-grey';
        return color;
    }
};Number.prototype.format = function(n, x, s, c) {
    var re = "\\d(?=(\\d{" + (x || 3) + "})+" + (n > 0 ? "\\D" : "$") + ")",
        num = this.toFixed(Math.max(0, ~~n));

    return (c ? num.replace(".", c) : num).replace(new RegExp(re, "g"), "$&" + (s || ","));
};
shinobi.util = {

    internetConnection: true,
    addEventInternetConnection: function() {
        var container;
        if (!document.querySelector('#connectingNetworkContainer')) {
            container = document.createElement('div');
            container.setAttribute('class', 'connecting-network');
            container.setAttribute('id', 'connectingNetworkContainer');

            container.innerHTML = `
            <style>
                .connecting-network{
                    position: fixed;
                    z-index: 100;
                    width: 15rem;
                    height: 4rem;
                    bottom: 1rem;
                    left: 1rem;
                    background: white;
                    display: none;
                    border-radius: 6px;
                    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 10%), 0 1px 2px 0 rgb(0 0 0 / 6%);
                }
                .connecting-network.is-active{
                    display: block;
                }
                .spinner {
                    top: calc( 50% - 0.75rem );
                    left: 50%;
                    text-align: center;
                    position: absolute;
                    transform: translate(-50%, -50%);
                }
                .spinner-content{
                    top: calc( 50% + 0.75rem );
                    left: 50%;
                    text-align: center;
                    position: absolute;
                    transform: translate(-50%, -50%);
                    color: #504f4f;
                    font-size: 1rem;
                }

                .spinner > div {
                    width: 0.75rem;
                    height: 0.75rem;
                    background-color: #504f4f;
                    border-radius: 100%;
                    display: inline-block;
                    -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
                    animation: sk-bouncedelay 1.4s infinite ease-in-out both;
                }

                .spinner .bounce1 {
                -webkit-animation-delay: -0.32s;
                animation-delay: -0.32s;
                }

                .spinner .bounce2 {
                -webkit-animation-delay: -0.16s;
                animation-delay: -0.16s;
                }

                @-webkit-keyframes sk-bouncedelay {
                0%, 80%, 100% { -webkit-transform: scale(0) }
                40% { -webkit-transform: scale(1.0) }
                }

                @keyframes sk-bouncedelay {
                0%, 80%, 100% { 
                    -webkit-transform: scale(0);
                    transform: scale(0);
                } 40% { 
                    -webkit-transform: scale(1.0);
                    transform: scale(1.0);
                }
                }
            </style>
            <div class=" spinner">
                <div class="bounce1"></div>
                <div class="bounce2"></div>
                <div class="bounce3"></div>
            </div>
            <div class=" spinner-content">
                Đang kết nối
            </div>
            </div>
         `;
            document.body.appendChild(container);
        } else {
            container = document.querySelector('#connectingNetworkContainer');
        }
        window.addEventListener('online', function() {
            console.log('Became online');
            shinobi.util.internetConnection = true;
            container.classList.remove('is-active');
        });
        window.addEventListener('offline', function() {
            console.log('Became offline');
            shinobi.util.internetConnection = false;
            container.classList.add('is-active');
        });
        return container;
    },
    hiddenModifyAvatarLinkButton: function(selector) {
        var fileLabel = document.querySelector(selector + " .file-label");
        fileLabel.querySelector(".button").classList.add("is-hidden");
    },
    renderUnEscap: function(elem, value, all) {

        elem.innerHTML = shinobi.util.renderUncapContent(value);
    },
    renderUncapContent: function(data) {
        return String(data).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
    },
    convertEscap: function(data) {
        var elemPost = document.createElement('div');
        elemPost.innerHTML = data;
        var listImg = elemPost.querySelectorAll('img');
        listImg.forEach(img=>{
            console.log('img',img);
            var src = img.src;
            var imgNew = document.createElement('img');
            imgNew.setAttribute('src',src);
            img.replaceWith(imgNew);

        })
        var content = elemPost.innerHTML;
        return String(content).replace(/\.\s/g, '.').replace(/alt\=\"([A-Za-z0-9 _]*)\"/g, "").replace(/width\=\"([A-Za-z0-9 _]*)\"/g, "").replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').trim();

    },
    showAvatarLinkAndPreventModify: function(selector, json) {
        var data = JSON.parse(json);

        var img = document.querySelector(selector + ' [snb-render="shinobi.render.renderChangeAvatarImageContainer"]');
        var fileLabel = document.querySelector(selector + " .file-label");
        var modifyButton = fileLabel.querySelector(".button");

        if (data.hasOwnProperty("avatarlink") && data.avatarlink != null && data.avatarlink != "") {
            img.classList.remove("is-hidden");
            modifyButton.classList.add("is-hidden");
        } else {
            img.classList.add("is-hidden");
            modifyButton.classList.remove("is-hidden");
        }
    },
    getAvatarLink: function(container) {
        return container.querySelector('[snb-key="avatarlink"]').src;
    },

    hiddenModalFooter: function(selector) {
        var confirmPanel = document.querySelector(selector);
        confirmPanel.querySelector(".modal-card-foot").classList.add("is-hidden");
    },

    renderCollapseButton: function(callback) {
        var pageTitle = document.querySelector(".section-title");

        pageTitle.classList = [];

        pageTitle.innerHTML =
            `
		<div class="level panel-heading has-background-white-bis">
			<div class="level-left">
				<div class="level-item"><button class="button is-primary is-collapse-button">
						<i class="fa fa-list-ul"></i>
					</button></div>
				<div class="level-item"><p class=" title is-4 section-title">` +
            pageTitle.innerText +
            `</p></div>
			</div>
			<div class="level-right">
			</div>
		</div>`;

        callback();
    },

    addCollapseButtonEvent: function(callback) {
        var collapseButton = document.querySelector(".is-collapse-button");
        collapseButton.onclick = function() {
            var panel = document.querySelectorAll(".panel");

            var firstPanel = panel[0].parentElement;
            if (firstPanel.classList.contains("is-hidden")) {
                firstPanel.classList.remove("is-hidden");
            } else {
                firstPanel.classList.add("is-hidden");
            }

            var secondPanel = panel[1].parentElement;
            if (!secondPanel.classList.contains("is-12")) {
                secondPanel.classList.remove("is-8");
                secondPanel.classList.add("is-12");
            } else {
                secondPanel.classList.add("is-8");
                secondPanel.classList.remove("is-12");
            }
        };
        callback();
    },

    abledInput: function(selector) {
        var input = document.querySelector(selector);
        input.removeAttribute("disabled");
    },

    disableAllInput: function(selector) {
        var container = document.querySelector(selector);
        var allInputs = container.querySelectorAll(".input");
        allInputs.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
        var allTextArea = container.querySelectorAll(".textarea");
        allTextArea.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
    },

    hiddenUploadFileInDetailForm: function(selector) {
        var container = document.querySelector(selector);
        var upfileList = container.querySelectorAll(".file-cta");
        for (var i = 0; i < upfileList.length; i++) {
            upfileList[i].classList.add("is-hidden");
        }
    },

    disabledAllUserInfoInput: function() {
        var userInfoSection = document.getElementById("userInfoSection");
        var allInput = userInfoSection.querySelectorAll(".input");
        allInput.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
    },

    disabledAllBankInfoInput: function() {
        var userBankInfoSection = document.getElementById("userBankInfoSection");
        var allInput = userBankInfoSection.querySelectorAll(".input");
        allInput.forEach(function(input) {
            input.setAttribute("disabled", "");
        });
    },

    showIdentityLabel: function(selector) {
        var container = document.querySelector(selector);
        var frontIdentity = container.querySelector('[snb-key="frontidentity"]');
        frontIdentity.parentElement.parentElement.parentElement.parentElement.previousElementSibling.classList.remove(
            "is-hidden"
        );
        var backidentity = container.querySelector('[snb-key="backidentity"]');
        backidentity.parentElement.parentElement.parentElement.parentElement.previousElementSibling.classList.remove(
            "is-hidden"
        );
    },

    getCurrentSystemModule: function() {
        var menuModuleHeader = document.querySelector("#menuModuleHeader");
        return menuModuleHeader.querySelector(".navbar-link").lastElementChild.innerText;
    },

    renderReadMoneyAmountInVietnamese: function(selector) {
        var infoContainer = document.querySelector(selector);
        var amount = infoContainer.querySelector('[snb-key="amount"]');
        amount.addEventListener("input", function() {
            shinobi.mapping.getValue(selector, function(json) {
                var numInString = docso(json.amount).trim();
                infoContainer.querySelector('[snb-key="vietnamesemoneyinput"]').innerText =
                    numInString.charAt(0).toUpperCase() + numInString.slice(1) + " đồng";
            });
        });
    },

    buildSearchUserRecommendFieldElement: function(field, option) {
        if (option.hasOwnProperty("callback")) {
            shinobi.util.addCallbackEvent(field, option);
        }

        if (option.hasOwnProperty("buttonSearchEvent")) {
            shinobi.util.addButtonSearchEvent(field, option);
        }

        if (option.hasOwnProperty("selectItem")) {
            shinobi.util.addSelectItemEvent(field, option);
        }
    },

    addCallbackEvent: function(field, option) {
        var input = field.querySelector(".input");

        input.addEventListener("input", function() {
            var input = field.querySelector(".input");
            var searchKey = input.value.trim();
            if (searchKey != "") {
                var request = {
                    searchkey: searchKey,
                };

                if (option.showloadingnotification) {
                    shinobi.notification.notification.loading();
                }

                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    if (option.showloadingnotification) {
                        shinobi.notification.notification.loaded();
                    }
                    option.callback(response);
                });
            }
        });
    },

    addSelectItemEvent: function(field, option) {
        var input = field.querySelector(".input");

        input.addEventListener("change", function() {
            var input = field.querySelector(".input");
            var searchKey = input.value.trim();
            if (searchKey != "") {
                var request = {
                    searchkey: searchKey,
                    type: "=",
                };

                if (option.showloadingnotification) {
                    shinobi.notification.notification.loading();
                }

                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    if (option.showloadingnotification) {
                        shinobi.notification.notification.loaded();
                    }

                    option.selectItem(response);
                });
            }
        });
    },

    addButtonSearchEvent: function(field, option) {
        var button = field.querySelector(".button.is-search");

        button.addEventListener("click", function() {
            var input = field.querySelector(".input");
            var searchKey = input.value.trim();
            if (searchKey != "") {
                var request = {
                    searchkey: searchKey,
                    type: "=",
                };

                if (option.showloadingnotification) {
                    shinobi.notification.notification.loading();
                }

                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    if (option.showloadingnotification) {
                        shinobi.notification.notification.loaded();
                    }

                    option.buttonSearchEvent(response);
                });
            }
        });
    },

    hexEncode: function(str) {
        var hex, i;

        var result = "";
        for (i = 0; i < str.length; i++) {
            hex = str.charCodeAt(i).toString(16);
            result += ("000" + hex).slice(-4);
        }

        return result;
    },

    hexDecode: function(str) {
        var j;
        var hexes = str.match(/.{1,4}/g) || [];
        var back = "";
        for (j = 0; j < hexes.length; j++) {
            back += String.fromCharCode(parseInt(hexes[j], 16));
        }

        return back;
    },

    onScreenDisable: function(callback) {
        var preStatus = false;
        var currentStatus = false;
        setInterval(function() {
            preStatus = currentStatus;
            currentStatus = document.hidden;

            if (currentStatus == false && preStatus == true) {
                if (typeof callback == "function") {
                    callback();
                }
            }
        }, 1000);
    },

    sumAllDataAndKeyJson: function(result, json) {
        var entriesResult = Object.entries(result);
        var entriesJson = Object.entries(json);
        entriesJson.forEach(function(entriesJsonItem) {
            if (result.hasOwnProperty(entriesJsonItem[0])) {
                if (!isNaN(result[entriesJsonItem[1]])) {
                    result[entriesJsonItem[0]] += entriesJsonItem[1];
                }
            } else {
                result[entriesJsonItem[0]] = entriesJsonItem[1];
            }
        });
    },
    checkMobile: function() {
        const toMatch = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];

        return toMatch.some((toMatchItem) => {
            return navigator.userAgent.match(toMatchItem);
        });
    },

    countNumberInInput: function(input) {
        if (input.match(/\d/g) == null) {
            return 0;
        } else {
            var numbers = input.match(/\d/g).map(Number);

            return numbers.length;
        }
    },
    countTextCharacterInInput: function(input) {
        if (input.match(/[a-zA-Z]/g) == null) {
            return 0;
        } else {
            var textCharaters = input.match(/[a-zA-Z]/g).map(String);

            return textCharaters.length;
        }
    },

    countSpecialCharacterInInput: function(input) {
        if (input.match(/[^0-9a-zA-Z]/g) == null) {
            return 0;
        } else {
            var specialCharaters = input.match(/[^0-9a-zA-Z]/g).map(String);

            return specialCharaters.length;
        }
    },

    hasSendRequestToAdmin: function(response, callback) {
        if (response == "update success") {
            shinobi.notification.notification.info("Đã tiếp nhận yêu cầu. Vui lòng đợi kiểm duyệt.");
            if (typeof callback == "function") {
                callback();
            }
        }
    },

    getCurrentDate: function(option) {
        var date = new Date();
        return shinobi.util.formatDate(date, option);
    },

    getFormatDate: function(dateInput, option) {
        dateInput = shinobi.util.preProcessDateInput(dateInput);
        var date = new Date(dateInput);
        return shinobi.util.formatDate(date, option);
    },

    preProcessDateInput: function(dateInput) {
        if (typeof dateInput == "string") {
            dateInput = dateInput.replace(/-/g, "/");
        }
        return dateInput;
    },

    addLoopAnimate: function(option) {
        var listElem = document.querySelectorAll("[animate-loop]");
        for (var i = 0; i < listElem.length; i++) {
            shinobi.util.addLoopAnimateProcess(listElem[i], option);
        }
    },

    getRandomInt: function(max) {
        return Math.floor(Math.random() * Math.floor(max));
    },

    addLoopAnimateProcess: function(elem, option) {
        if (!(elem.hasAttribute("stop-animate") && elem.getAttribute("stop-animate") == "true")) {
            var classList = elem.getAttribute("animate-loop").split(" ");
            var className = shinobi.util.randomInList(classList);
            elem.classList.add(className);
            elem.classList.add("animate__animated");
            setTimeout(function() {
                elem.classList.remove(className);
                setTimeout(function() {
                    shinobi.util.addLoopAnimateProcess(elem, option);
                }, 200);
            }, 1000);
        } else {
            setTimeout(function() {
                shinobi.util.addLoopAnimateProcess(elem, option);
            }, 1000);
        }
    },

    addAnimate: function(selector, option) {
        var itemList = document.querySelectorAll(selector);
        for (var i = 0; i < itemList.length; i++) {
            shinobi.util.addAnimateProcess(itemList[i], option);
        }
    },
    addAnimateProcess: function(item, option) {
        var listClassAppend = ["animated", "inifinite"];
        var classItem = option.hasOwnProperty("classItem") ? option["classItem"] : "bounce";
        listClassAppend.push(classItem);
        listClassAppend.forEach(function(itemClass) {
            item.classList.add(itemClass);
        });

        if (option.hasOwnProperty("infinity")) {
            setTimeout(function() {
                listClassAppend.forEach(function(itemClass) {
                    item.classList.remove(itemClass);
                });
                setTimeout(function() {
                    shinobi.util.addAnimateProcess(item, option);
                }, 2000);
            }, 2000);
        }
    },

    reverseFormatDate: function(dateInput, option) {
        var reverseFormat = option["reverseFormat"];
        var dd = dateInput.slice(reverseFormat.indexOf("dd"), reverseFormat.lastIndexOf("dd") + 2);
        var MM = dateInput.slice(reverseFormat.indexOf("MM"), reverseFormat.lastIndexOf("MM") + 2);
        var yyyy = dateInput.slice(reverseFormat.indexOf("yyyy"), reverseFormat.lastIndexOf("yyyy") + 4);
        var dateString = yyyy + "/" + MM + "/" + dd;
        var date = new Date(dateString);
        return shinobi.util.formatDate(date, option);
    },
    formatDate: function(date, options) {
        var dd = shinobi.util.getTwoDigit(date.getDate());
        var MM = shinobi.util.getTwoDigit(date.getMonth() + 1);
        var yyyy = date.getFullYear();
        var hh = shinobi.util.getTwoDigit(date.getHours());
        var mm = shinobi.util.getTwoDigit(date.getMinutes());
        var ss = shinobi.util.getTwoDigit(date.getSeconds());
        var dayOfWeek = shinobi.util.getDayOfWeek(date, options);
        var dayOfWeekShort = shinobi.util.getDayOfWeekShort(date, options);

        var returnValue = options && options.hasOwnProperty("format") ? options["format"] : "yyyy-MM-dd";
        returnValue = returnValue
            .replace("yyyy", yyyy)
            .replace("MM", MM)
            .replace("dd", dd)
            .replace("hh", hh)
            .replace("mm", mm)
            .replace("ss", ss)
            .replace("dayOfWeekShort", dayOfWeekShort).replace("dayOfWeek", dayOfWeek);
        return returnValue;
    },

    getDayOfWeek: function(date, options) {
        var lang = options && options.hasOwnProperty("language") ? options["language"] : "vn";
        var mapping = {
            vn: ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"],
            en: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        };
        var day = date.getDay();
        return mapping[lang][day];
    },
    getDayOfWeekShort: function(date, options) {
        var lang = options && options.hasOwnProperty("language") ? options["language"] : "vn";
        var mapping = {
            vn: ["CN", "Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7"],
            en: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        };
        var day = date.getDay();
        return mapping[lang][day];
    },

    getTagInputMappingElem: function(elem) {
        var returnElem;
        if (typeof shinobi.initbulma.tagsInput == "object") {
            shinobi.initbulma.tagsInput.forEach(function(item) {
                if (item["element"] == elem) {
                    returnElem = item;
                }
            });
        }
        return returnElem;
    },

    addEventEnter: function(elem, callback) {
        elem.addEventListener("keypress", function(e) {
            var key = e.which || e.keyCode;
            if (key === 13) {
                e.preventDefault();
                callback();
            }
        });
        var isMobile = shinobi.util.checkMobile();
        if (isMobile) {
            elem.addEventListener("focusout", function(e) {
                callback();
            });
        }
    },

    jsonToSearchParam: function(json) {
        var search = "";
        for (let key in json) {
            search += `&${key}=${json[key]}`;
        }

        return "?" + search.slice(1, search.length);
    },

    getCalendarMappingElem: function(elem) {
        var returnElem;
        if (typeof shinobi.initbulma.calendars == "object") {
            shinobi.initbulma.calendars.forEach(function(item) {
                if (item["element"] == elem) {
                    returnElem = item;
                }
            });
        }
        return returnElem;
    },

    getDateAfterCurrentDate: function(numberDate, elementAfter) {
        var currentDate = new Date();

        switch (elementAfter) {
            case "day":
                currentDate.setDate(currentDate.getDate() + numberDate);
                break;

            case "month":
                currentDate.setMonth(currentDate.getMonth() + numberDate);
                break;

            case "year":
                currentDate.setFullYear(currentDate.setFullYear() + numberDate);
                break;

            default:
                break;
        }

        var year = currentDate.getFullYear();
        var month = shinobi.util.getTwoDigit(currentDate.getMonth() + 1);
        var day = shinobi.util.getTwoDigit(currentDate.getDate());

        return year + "-" + month + "-" + day;
    },

    getDateAfterDate: function(date, numberDate, elementAfter) {
        date = shinobi.util.preProcessDateInput(date);
        var currentDate = new Date(date);

        switch (elementAfter) {
            case "day":
                currentDate.setDate(currentDate.getDate() + numberDate);
                break;

            case "month":
                currentDate.setMonth(currentDate.getMonth() + numberDate);
                break;

            case "year":
                currentDate.setFullYear(currentDate.setFullYear() + numberDate);
                break;

            default:
                break;
        }

        var year = currentDate.getFullYear();
        var month = shinobi.util.getTwoDigit(currentDate.getMonth() + 1);
        var day = shinobi.util.getTwoDigit(currentDate.getDate());

        return year + "-" + month + "-" + day;
    },

    getSearchKey: function(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    },

    getSearchParam: function(name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
            results = regex.exec(location.search);
        return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    },

    renderUserInfo: function(selector) {
        var elem = document.querySelector(selector);
        shinobi.util.renderUserInfoElement(elem);
    },

    renderUserInfoElement: function(elem) {
        shinobi.coreapi.getLoggedUserInfo(function(response) {
            var jsonArr = JSON.parse(response);
            shinobi.mapping.renderElement(elem, jsonArr);
        });
    },

    buildSearchUserField: function(selector, option) {
        var field = document.querySelector(selector);
        shinobi.util.buildSearchUserFieldElement(field, option);
    },

    isEmpty: function(object) {
        return Object.keys(object).length === 0 && object.constructor === Object ? true : false;
    },

    uniqueArray: function(a) {
        return a.sort().filter(function(item, pos, ary) {
            return !pos || item != ary[pos - 1];
        });
    },
    buildUpfileButton: function(selector, option) {
        var element = document.querySelector(selector);
        var uploadUrl = option && option.hasOwnProperty("uploadUrl") ? option.uploadUrl : "uploadfile";
        shinobi.fileupload.registerElement(
            element,
            "change",
            uploadUrl,
            function() {
                return 0;
            },
            function(jsonResponse) {
                if (jsonResponse.result == "success") {
                    shinobi.notification.notification.info("Upload thành công");
                    var url = jsonResponse.content.url;
                    shinobi.render.renderImageFileInput(element, url, {});

                    // var link = document.getElementById('link');
                    // link.innerHTML = url;
                } else {
                    shinobi.notification.notification.error("Có lỗi vui lòng thử lại");
                }
            },
            option
        );
    },

    checkEmptyJson: function(json, callback, option) {
        if (option) {
            var entries = Object.entries(json);
            var listNotEmpty = option.hasOwnProperty("listNotEmpty") ? option.listNotEmpty : Object.keys(json);
            var listEmpty = option.hasOwnProperty("listEmpty") ? option.listEmpty : [];
            var hasEmpty = false;
            for (var i = 0; i < entries.length; i++) {
                var item = entries[i];
                if (!listEmpty.includes(item[0])) {
                    if (listNotEmpty.includes(item[0]) && item[1] == "") {
                        hasEmpty = true;
                    }
                }
            }
            hasEmpty ? shinobi.util.fillInputMessage() : callback();
        } else {
            Object.values(json).includes("") ? shinobi.util.fillInputMessage() : callback();
        }
    },

    getParentElementHasAttribute: function(item, option) {
        var parentNode = item.parentNode;
        var isFound = false;
        var returnElement = null;
        var type = option["type"];
        var value = option["value"];
        switch (type) {
            case "class":
                if (parentNode.classList.contains(value)) {
                    isFound = true;
                    returnElement = parentNode;
                }
                break;
            case "id":
                if (parentNode.id == value) {
                    isFound = true;
                    returnElement = parentNode;
                }
                break;
            case "tagName":
                if (parentNode.tagName == value) {
                    isFound = true;
                    returnElement = parentNode;
                }

            default:
                break;
        }

        if (parentNode.tagName == "BODY") {
            return returnElement;
        } else {
            return isFound ? returnElement : shinobi.util.getParentElementHasAttribute(parentNode, option);
        }
    },

    buildSearchUserFieldElement: function(field, option) {
        var input = field.querySelector(".input");
        var button = field.querySelector(".button");
        button.onclick = function() {
            var searchKey = input.value.trim();
            if (searchKey == "") {
                input.classList.add("is-danger");
                shinobi.util.fillInputMessage();
            } else {
                input.classList.remove("is-danger");
                var request = {
                    searchkey: searchKey,
                };
                shinobi.notification.notification.loading();
                shinobi.api.request(shinobi.coreapi.loggedUserApi + "searchUser", JSON.stringify(request), function(response) {
                    shinobi.notification.notification.loaded();
                    if (option.hasOwnProperty("callback")) {
                        option.callback(response);
                    }
                });
            }
        };
    },

    buildAutoSuggestProvince: function(selector, submitFunction) {
        var inputElem = document.querySelector(selector);

        if (inputElem.hasAttribute("build-autocomplete")) {
            inputElem.nextElementSibling.remove();

            var newInput = document.createElement("input");
            newInput.setAttribute("id", inputElem.id);
            newInput.setAttribute("class", "input");
            inputElem.parentNode.replaceChild(newInput, inputElem);
            inputElem = newInput;
        }

        inputElem.classList.add("select-symbol-input");
        inputElem.classList.add("autocomplete-input");
        inputElem.setAttribute("placeholder", "Tỉnh/Thành phố");
        inputElem.setAttribute("build-autocomplete", "true");
        var parentNode = inputElem.parentNode;
        parentNode.classList.add("autocomplete");

        var ul = document.createElement("ul");
        ul.setAttribute("class", "autocomplete-result-list ");
        shinobi.util.insertAfterElem(ul, inputElem);

        shinobi.cacheapi.request(shinobi.coreapi.locationApi + "getAllVietNamProvince", "{}", function(response) {
            var jsonData = JSON.parse(response);

            var data = [];

            jsonData.forEach(function(json) {
                data.push(json["provincename"]);
            });

            var selectSymbolObject = new Autocomplete(parentNode, {
                search: function(input) {
                    var result = [];
                    if (input.length > 0) {
                        result = data.filter(function(item) {
                            return item.toUpperCase().includes(input.toUpperCase());
                        });
                    }

                    return result;
                },
                onSubmit: function(value) {
                    shinobi.a = selectSymbolObject;
                    if (typeof submitFunction == "function") {
                        submitFunction(value, selectSymbolObject);
                    }
                },
                autoSelect: true,
            });

            return selectSymbolObject;
        });
    },

    convertTextToElement: function(text) {
        var div = document.createElement("div");
        div.innerHTML = text;
        var content = div.firstElementChild;
        return content;
    },
    buildAutoSuggestBankName: function(selector, submitFunction) {
        var inputElem = document.querySelector(selector);

        if (inputElem.hasAttribute("build-autocomplete")) {
            inputElem.nextElementSibling.remove();

            var newInput = document.createElement("input");
            newInput.setAttribute("id", inputElem.id);
            newInput.setAttribute("class", "input");
            inputElem.parentNode.replaceChild(newInput, inputElem);
            inputElem = newInput;
        }

        inputElem.classList.add("autocomplete-input");
        inputElem.setAttribute("placeholder", "Ngân hàng");
        inputElem.setAttribute("build-autocomplete", "true");
        var parentNode = inputElem.parentNode;
        parentNode.classList.add("autocomplete");

        var ul = document.createElement("ul");
        ul.setAttribute("class", "autocomplete-result-list ");
        shinobi.util.insertAfterElem(ul, inputElem);

        shinobi.cacheapi.request(shinobi.coreapi.locationApi + "getAllBankName", "{}", function(response) {
            var jsonData = JSON.parse(response);

            var data = [];

            jsonData.forEach(function(json) {
                data.push(json["bankfullname"]);
            });

            var selectSymbolObject = new Autocomplete(parentNode, {
                search: function(input) {
                    var result = [];
                    if (input.length > 0) {
                        result = data.filter(function(item) {
                            return item.toUpperCase().includes(input.toUpperCase());
                        });
                    }

                    return result;
                },
                onSubmit: function(value) {
                    shinobi.a = selectSymbolObject;
                    if (typeof submitFunction == "function") {
                        submitFunction(value, selectSymbolObject);
                    }
                },
                autoSelect: true,
            });

            return selectSymbolObject;
        });
    },

    addClass: function(locationId, className) {
        var location = document.getElementById(locationId);
        location.classList.add(className);
    },
    removeClass: function(locationId, className) {
        var location = document.getElementById(locationId);
        location.classList.remove(className);
    },

    removeClassOfList: function(listId, className) {
        listId.forEach(function(itemId) {
            shinobi.aladinUtil.removeClass(itemId, className);
        });
    },

    getAllSearchInPath: function() {
        const params = {};
        document.location.search
            .substr(1)
            .split("&")
            .forEach((pair) => {
                [key, value] = pair.split("=");
                params[key] = value;
            });
        return params;
    },

    swapKeyAndValueJson: function(json) {
        var ret = {};
        for (var key in json) {
            ret[json[key]] = key;
        }
        return ret;
    },

    addClassOfList: function(listId, className) {
        listId.forEach(function(itemId) {
            shinobi.aladinUtil.addClass(itemId, className);
        });
    },

    addClassOfListClass: function(classNameOfListClass, className) {
        var listElem = document.getElementsByClassName(classNameOfListClass);

        for (var i = 0; i < listElem.length; i++) {
            var item = listElem[i];

            item.classList.add(className);
        }
    },
    removeClassOfListClass: function(classNameOfListClass, className) {
        var listElem = document.getElementsByClassName(classNameOfListClass);

        for (var i = 0; i < listElem.length; i++) {
            var item = listElem[i];

            item.classList.remove(className);
        }
    },
    removeAllClass: function(locationId, classNameLocation, className) {
        var location = document.getElementById(locationId);
        var listClassLocation = location.getElementsByClassName(classNameLocation);

        var length = listClassLocation.length;
        for (var i = 0; i < length; i++) {
            listClassLocation[i].classList.remove(className);
        }
    },

    decodeValue: function(input) {
        var txt = document.createElement("textarea");
        txt.innerHTML = input;
        return txt.value;
    },

    loadListAds: function(option) {
        var request = option["request"];
        shinobi.cacheapi.request("/api/UserRankingOverviewApi/getListAds", JSON.stringify(request), function(response) {
            var array = JSON.parse(response);
            if (array) {
                option.callback(array);
            }
        });
    },

    convertCSVToArray: function(strData, strDelimiter) {
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        strDelimiter = strDelimiter || ",";

        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp(
            // Delimiters.
            "(\\" +
            strDelimiter +
            "|\\r?\\n|\\r|^)" +
            // Quoted fields.
            '(?:"([^"]*(?:""[^"]*)*)"|' +
            // Standard fields.
            '([^"\\' +
            strDelimiter +
            "\\r\\n]*))",
            "gi"
        );

        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [
            []
        ];

        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;

        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while ((arrMatches = objPattern.exec(strData))) {
            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[1];

            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {
                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push([]);
            }

            var strMatchedValue;

            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            if (arrMatches[2]) {
                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[2].replace(new RegExp('""', "g"), '"');
            } else {
                // We found a non-quoted value.
                strMatchedValue = arrMatches[3];
            }

            // Now that we have our value string, let's add
            // it to the data array.
            arrData[arrData.length - 1].push(strMatchedValue);
        }

        // Return the parsed data.
        return arrData;
    },

    insertAfterElem: function(newElem, elem) {
        elem.parentNode.insertBefore(newElem, elem.nextSibling);
    },

    createNumberCleaveInput: function(selector, options) {
        var formatCharacter = shinobi.util.getFormatCharacters();
        var numberFormatCharacter = formatCharacter.numberFormatCharacter;
        var decimalFormatCharacter = formatCharacter.decimalFormatCharacter;
        var optionsCleave = Object.assign({
                numeral: true,
                numeralDecimalMark: decimalFormatCharacter,
                delimiter: numberFormatCharacter,
            },
            options
        );
        return new Cleave(selector, optionsCleave);
    },
    getValueNumberCleaveFormat: function(elem) {
        return shinobi.render.removeFormatNumber(elem.value.trim());
    },

    getRecordNumber: function(paginationContainerId) {
        var containerId;
        var paginationContainer;
        if (paginationContainerId) {
            var container = document.getElementById(paginationContainerId);
            paginationContainer = container.nextElementSibling.classList.contains("table-pagination") ?
                container.nextElementSibling :
                container.nextElementSibling.getElementsByClassName("table-pagination")[0];
        } else {
            containerId = "table-pagination";
            paginationContainer = document.getElementById(containerId);
        }
        var parentNodePaginationContainer = paginationContainer.parentElement;
        var recordNum;
        var recodeNumAttr = "record-num";
        if (parentNodePaginationContainer.hasAttribute(recodeNumAttr)) {
            recordNum = parentNodePaginationContainer.getAttribute(recodeNumAttr);
        } else {
            var recordNumSelect = paginationContainer.getElementsByClassName("shinobi-recordperpage")[0];
            recordNum = recordNumSelect.value;
        }
        shinobi.util.customRecordPerPagePagination(paginationContainer, recordNum);
        return recordNum;
    },
    customRecordPerPagePagination: function(container, recordNum) {
        var selectRecordNum = container.getElementsByClassName("shinobi-recordperpage")[0];
        var listOptionSelect = selectRecordNum.getElementsByTagName("option");
        for (var i = 0; i < listOptionSelect.length; i++) {
            var j = parseInt(i) + 1;
            var currentPageNum = j * recordNum;
            listOptionSelect[i].innerHTML = currentPageNum;
            listOptionSelect[i].value = currentPageNum;
        }
    },

    updateSuccess: function(callback) {
        shinobi.notification.notification.info("Cập nhật thành công");
        if (typeof callback == "function") {
            callback();
        }
    },

    fillInputMessage: function(callback) {
        shinobi.notification.notification.error("Vui lòng nhập đầy đủ thông tin");
        if (typeof callback == "function") {
            callback();
        }
    },

    checkValueEmpty: function(json, callback) {
        var values = Object.values(json);
        if (!values.includes("")) {
            if (typeof callback == "function") {
                callback();
            }
        } else {
            shinobi.util.fillInputMessage();
        }
    },

    getLoggedUser: function() {
        shinobi.util.checkAuthen();
    },
    checkAuthen: function(callback) {
        var request = {};
        shinobi.cacheapi.request(shinobi.coreapi.userApi + "checkAuthen", JSON.stringify(request), function(response) {
            var data = JSON.parse(response);

            if (typeof callback == "function") {
                data ? callback(data["username"]) : callback(false);
            }
        });
    },

    requestAuthen: function(callback) {
        shinobi.coreapi.checkAuthen(function(username) {
            if (typeof callback == "function") {
                username ? callback(username) : shinobi.notification.notification.error("Vui lòng đăng nhập để thao tác");
            }
        });
    },
    reCheckAuthen: function(callback) {
        var key = shinobi.coreapi.userApi + "checkAuthen";
        if (typeof shinobi.cacheapi.cache == "object") {
            shinobi.cacheapi.clearKey(key);
        }
        shinobi.util.checkAuthen(callback);
    },
    getSessionId: function(callback) {
        var request = {};
        shinobi.api.request(shinobi.coreapi.systemUserApi + "getSessionId", JSON.stringify(request), function(response) {
            if (typeof callback == "function") {
                var data = JSON.parse(response);
                if (data.hasOwnProperty("sessionid")) {
                    data["sessionid"] != -1 ? callback(data["sessionid"]) : callback(false);
                } else {
                    callback(false);
                }
            }
        });
    },
    getUserInfo: function(callback, option) {
        var userInfoRequest;
        if (!option) {
            shinobi.util.checkAuthen(function(username) {
                userInfoRequest = {
                    username: username,
                };
                shinobi.cacheapi.request(
                    shinobi.coreapi.userApi + "getAllUserInfo",
                    JSON.stringify(userInfoRequest),
                    function(response) {
                        if (typeof callback == "function") {
                            callback(response);
                        }
                    }
                );
            });
        } else {
            if (option.hasOwnProperty("username")) {
                userInfoRequest = {
                    username: option.username,
                };
                shinobi.cacheapi.request(
                    shinobi.coreapi.loggedUserApi + "getUserInfo",
                    JSON.stringify(userInfoRequest),
                    function(response) {
                        if (typeof callback == "function") {
                            callback(response);
                        }
                    }
                );
            }
        }
    },
    getLoggedUserInfo: function(callback) {
        shinobi.util.checkAuthen(function(username) {
            var userInfoRequest = {
                username: username,
            };
            shinobi.cacheapi.request(
                shinobi.coreapi.loggedUserApi + "getAllUserInfo",
                JSON.stringify(userInfoRequest),
                function(response) {
                    if (typeof callback == "function") {
                        callback(response);
                    }
                }
            );
        });
    },

    checkUpdateSuccess: function(response, callback, option) {
        if (["insert success", "update success"].includes(response)) {
            if (!(option && !option["showNotification"])) {
                var showContent =
                    option && option.hasOwnProperty("showContent") ? option["showContent"] : "Cập nhật thành công";
                shinobi.notification.notification.info(showContent);
            }

            if (typeof callback == "function") {
                callback();
            }
        }
    },

    getFormatCharacters: function() {
        var numberFormatCharacter = ",";
        var decimalFormatCharacter = ".";

        if (typeof shinobi.utilconfig == "object") {
            if (shinobi.utilconfig.hasOwnProperty("numberFormatCharacter")) {
                if (shinobi.utilconfig.numberFormatCharacter.hasOwnProperty("numberCharacter")) {
                    numberFormatCharacter = shinobi.utilconfig.numberFormatCharacter.numberCharacter;
                }
                if (shinobi.utilconfig.numberFormatCharacter.hasOwnProperty("numberCharacter")) {
                    decimalFormatCharacter = shinobi.utilconfig.numberFormatCharacter.decimalCharacter;
                }
            }
        }

        return {
            numberFormatCharacter: numberFormatCharacter,
            decimalFormatCharacter: decimalFormatCharacter,
        };
    },

    getAllStorage: function() {
        var entries = Object.entries(window.localStorage);
        var result = {};
        entries.forEach(function(item) {
            result[item[0]] = item[1];
        });
        return result;
    },

    setAllStorage: function(json) {
        var entries = Object.entries(json);
        entries.forEach(function(item) {
            window.localStorage.setItem(item[0], item[1]);
        });
    },
    formatNumber: function(value) {
        var formatCharacter = shinobi.util.getFormatCharacters();
        var numberFormatCharacter = formatCharacter.numberFormatCharacter;
        var decimalFormatCharacter = formatCharacter.decimalFormatCharacter;
        return Number(value).format(0, 3, numberFormatCharacter, decimalFormatCharacter);
    },

    getContentIframe: function(selector) {
        shinobi.util.getContentIframeElement(document.querySelector(selector));
    },

    getContentIframeElement: function(iframe) {
        var content = iframe.contentDocument || iframe.contentWindow.document;
        return content;
    },
    getTwoDigit: function(number) {
        return (number < 10 ? "0" : "") + number;
    },

    getInternationalTelephoneCode: function(intlTelInput) {
        var data = intlTelInput.getSelectedCountryData();
        return data["dialCode"];
    },
    getInternationalTelephoneCountry: function(intlTelInput) {
        var data = intlTelInput.getSelectedCountryData();
        return data["iso2"];
    },
    setRangeCalendar: function(selector, start, end) {
        var calendar = shinobi.util.getCalendarMappingElem(document.querySelector(selector));
        calendar.datePicker.start = start;
        calendar.datePicker.end = end;
        calendar.save();
    },
    addEventJumpToId: function() {
        var jumpId = shinobi.util.getSearch("jumpid");
        if (jumpId) {
            var elem = document.getElementById(jumpId);
            var newOffset = elem.offsetTop - Number(shinobi.util.getFontSize()) * 4;
            var offset = newOffset > 0 ? newOffset : 0;
            document.body.scrollTop = offset;
            document.documentElement.scrollTop = offset;
        }
    },

    randomInList: function(list) {
        return list[Math.floor(Math.random() * list.length)];
    },

    jumpTo: function(selector) {
        var elem = document.querySelector(selector);
        shinobi.util.jumpToElement(elem);
    },

    jumpToElement: function(elem) {
        if (elem) {
            var newOffset = elem.offsetTop - Number(shinobi.util.getFontSize()) * 4;
            var offset = newOffset > 0 ? newOffset : 0;
            document.body.scrollTop = offset;
            document.documentElement.scrollTop = offset;
        }
    },
    getStorage: function(key, option) {
        var storage = window.localStorage.getItem(key);
        var nullValue = "";
        return storage ? storage : nullValue;
    },
    setStorage: function(key, value, option) {
        window.localStorage.setItem(key, value);
    },

    getLoggedName: function(callback) {
        shinobi.util.getUserInfo(function(response) {
            var data = JSON.parse(response);
            var loggedName = "";
            if (data) {
                if (data.hasOwnProperty("firstname") && data.hasOwnProperty("lastname")) {
                    loggedName = data["firstname"] + " " + data["lastname"];
                }

                if (typeof callback == "function") {
                    callback(loggedName);
                }
            }
        });
    },

    getSearch: function(searchKey) {
        var search = window.location.search;
        var split = search.split("?");
        var value = null;
        var searchPatern = searchKey + "=";
        split.forEach(function(searchItem) {
            value = searchItem.includes(searchPatern) ? searchItem.replace(searchPatern, "") : value;
        });
        return value;
    },

    getFontSize: function(elem) {
        return shinobi.util.getComputedProperty(elem, "font-size").replace("px", "");
    },

    getComputedProperty: function(elem, property) {
        return elem ?
            window.getComputedStyle(elem, null).getPropertyValue(property) :
            window.getComputedStyle(document.body, null).getPropertyValue(property);
    },

    getValueInput: function(elem) {
        var type = elem.getAttribute("type");
        var value;
        switch (type) {
            case "checkbox":
                value = elem.checked;
                break;
            case "text":
            case "password":
            default:
                value = elem.value.trim();
                break;
        }

        value = elem.hasAttribute("snb-preprocess") ? eval(elem.getAttribute("snb-preprocess"))(value) : value;
        return value;
    },
    sha256: function(ascii) {
        var mathPow = Math.pow;
        var maxWord = mathPow(2, 32);
        var lengthProperty = "length";
        var i, j; // Used as a counter across the whole file
        var result = "";

        var words = [];
        var asciiBitLength = ascii[lengthProperty] * 8;

        var hash = (shinobi.util.sha256.h = shinobi.util.sha256.h || []);

        var k = (shinobi.util.sha256.k = shinobi.util.sha256.k || []);
        var primeCounter = k[lengthProperty];

        var isComposite = {};
        for (var candidate = 2; primeCounter < 64; candidate++) {
            if (!isComposite[candidate]) {
                for (i = 0; i < 313; i += candidate) {
                    isComposite[i] = candidate;
                }
                hash[primeCounter] = (mathPow(candidate, 0.5) * maxWord) | 0;
                k[primeCounter++] = (mathPow(candidate, 1 / 3) * maxWord) | 0;
            }
        }

        ascii += "\x80"; // Append Ƈ' bit (plus zero padding)
        while ((ascii[lengthProperty] % 64) - 56) ascii += "\x00"; // More zero
        // padding
        for (i = 0; i < ascii[lengthProperty]; i++) {
            j = ascii.charCodeAt(i);
            if (j >> 8) return; // ASCII check: only accept characters in
            // range 0-255
            words[i >> 2] |= j << (((3 - i) % 4) * 8);
        }
        words[words[lengthProperty]] = (asciiBitLength / maxWord) | 0;
        words[words[lengthProperty]] = asciiBitLength;

        // process each chunk
        for (j = 0; j < words[lengthProperty];) {
            var w = words.slice(j, (j += 16)); // The message is expanded
            // into 64 words as part of
            // the iteration
            var oldHash = hash;
            // This is now the undefinedworking hash", often labelled as
            // variables a...g
            // (we have to truncate as well, otherwise extra entries at the
            // end accumulate
            hash = hash.slice(0, 8);

            for (i = 0; i < 64; i++) {
                var i2 = i + j;
                // Expand the message into 64 words
                // Used below if
                var w15 = w[i - 15],
                    w2 = w[i - 2];

                // Iterate
                var a = hash[0],
                    e = hash[4];
                var temp1 =
                    hash[7] +
                    (shinobi.util.rightRotate(e, 6) ^ shinobi.util.rightRotate(e, 11) ^ shinobi.util.rightRotate(e, 25)) + // S1
                    ((e & hash[5]) ^ (~e & hash[6])) + // ch
                    k[i] +
                    // Expand the message schedule if needed
                    (w[i] =
                        i < 16 ?
                        w[i] :
                        (w[i - 16] +
                            (shinobi.util.rightRotate(w15, 7) ^ shinobi.util.rightRotate(w15, 18) ^ (w15 >>> 3)) + // s0
                            w[i - 7] +
                            (shinobi.util.rightRotate(w2, 17) ^ shinobi.util.rightRotate(w2, 19) ^ (w2 >>> 10))) | // s1
                        0);
                // This is only used once, so *could* be moved below, but it
                // only saves 4 bytes and makes things unreadble
                var temp2 =
                    (shinobi.util.rightRotate(a, 2) ^ shinobi.util.rightRotate(a, 13) ^ shinobi.util.rightRotate(a, 22)) + // S0
                    ((a & hash[1]) ^ (a & hash[2]) ^ (hash[1] & hash[2])); // maj

                hash = [(temp1 + temp2) | 0].concat(hash); // We don't

                hash[4] = (hash[4] + temp1) | 0;
            }

            for (i = 0; i < 8; i++) {
                hash[i] = (hash[i] + oldHash[i]) | 0;
            }
        }

        for (i = 0; i < 8; i++) {
            for (j = 3; j + 1; j--) {
                var b = (hash[i] >> (j * 8)) & 255;
                result += (b < 16 ? 0 : "") + b.toString(16);
            }
        }
        return result;
    },
    rightRotate: function(value, amount) {
        return (value >>> amount) | (value << (32 - amount));
    },
    removeUnicode: function(str) {
        return shinobi.util.remove_unicode(str);
    },

    listAudio: {},

    playAudio: function(url) {
        var snd = shinobi.util.listAudio.hasOwnProperty(url) ? shinobi.util.listAudio[url] : new Audio(url);
        snd.play();
        shinobi.util.listAudio[url] = snd;
    },

    remove_unicode: function remove_unicode(str) {
        str = str.toLowerCase();
        str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
        str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
        str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
        str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
        str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
        str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
        str = str.replace(/đ/g, "d");
        str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'| |\"|\&|\#|\[|\]|~|$|_/g, "-");

        str = str.replace(/-+-/g, "-");
        str = str.replace(/^\-+|\-+$/g, "");

        return str;
    },

    changeActiveElement: function(generalId, differentEleList, activeClass, eleActiveId) {
        for (var i = 0; i < differentEleList.length; i++) {
            var eleId = generalId + differentEleList[i];
            if (eleId == eleActiveId) {
                document.getElementById(eleId).classList.add(activeClass);
            } else {
                document.getElementById(eleId).classList.remove(activeClass);
            }
        }
    },
    modalEventListener: function(modal) {
        var closeButtonList = modal.getElementsByClassName("delete");
        var closeButton = closeButtonList[0];
        if (closeButton) {
            closeButton.onclick = function() {
                modal.classList.toggle("is-active");
            };
        }

        var cancelModalButtonList = modal.getElementsByClassName("cancel-modal-button");
        if (cancelModalButtonList) {
            for (var i = 0; i < cancelModalButtonList.length; i++) {
                cancelModalButtonList[i].onclick = function() {
                    modal.classList.toggle("is-active");
                };
            }
        }

        var modalBackground = modal.getElementsByClassName("modal-background");

        for (var j = 0; j < modalBackground.length; j++) {
            modalBackground[j].onclick = function() {
                modal.classList.toggle("is-active");
            };
        }

        window.addEventListener(
            "keydown",
            function(event) {
                if (event.key == "Escape") {
                    modal.classList.remove("is-active");
                }
            },
            true
        );

        var footer = modal.getElementsByTagName("footer")[0];

        if (footer) {
            var buttonFooterList = footer.getElementsByTagName("button");

            for (var j in buttonFooterList) {
                buttonFooterList[j].onclick = function() {
                    modal.classList.toggle("is-active");
                };
            }
        }

        if (modal.hasAttribute("control-button-list")) {
            var controlButtonList = modal.getAttribute("control-button-list").split("|");

            for (var k = 0; k < controlButtonList.length; k++) {
                var item = document.getElementById(controlButtonList[k]);

                item.onclick = function() {
                    modal.classList.add("is-active");

                    if (item.hasAttribute("snb-render")) {
                        var value = item.getAttribute("snb-key");

                        var render = item.getAttribute("snb-render");

                        eval(render)(item, value);
                    }
                };
            }
        }
    },

    createFireWork: function(option) {
        // Options
        var options = {
            /* Which hue should be used for the first batch of rockets? */
            startingHue: 120,
            /*
             * How many ticks the script should wait before a new firework gets
             * spawned, if the user is holding down his mouse button.
             */
            clickLimiter: 5,
            /* How fast the rockets should automatically spawn, based on ticks */
            // timerInterval: 40,
            timerInterval: 20,
            /* Show pulsing circles marking the targets? */
            // showTargets: true,
            showTargets: false,
            /* Rocket movement options, should be self-explanatory */
            rocketSpeed: 4,
            rocketAcceleration: 1.03,
            /* Particle movement options, should be self-explanatory */
            particleFriction: 0.95,
            particleGravity: 1,
            /* Minimum and maximum amount of particle spawns per rocket */
            particleMinCount: 25,
            particleMaxCount: 40,
            /* Minimum and maximum radius of a particle */
            particleMinRadius: 3,
            particleMaxRadius: 5,
        };

        // Local variables
        var fireworks = [];
        var particles = [];
        var mouse = { down: false, x: 0, y: 0 };
        var currentHue = options.startingHue;
        var clickLimiterTick = 0;
        var timerTick = 0;
        var cntRocketsLaunched = 0;

        // Helper function for canvas animations
        window.requestAnimFrame = (function() {
            return (
                window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                function(cb) {
                    window.setTimeout(callback, 1000 / 60);
                }
            );
        })();

        // Helper function to return random numbers within a specified range
        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Helper function to calculate the distance between 2 points
        function calculateDistance(p1x, p1y, p2x, p2y) {
            var xDistance = p1x - p2x;
            var yDistance = p1y - p2y;
            return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
        }

        // Setup some basic variables
        // var canvas = document.getElementById('canvas');
        var canvas = document.createElement("canvas");
        var canvasContainer = option && option.hasOwnProperty("container") ? option["container"] : document.body;
        canvasContainer.appendChild(canvas);
        var canvasCtx = canvas.getContext("2d");
        var canvasWidth = window.innerWidth;
        var canvasHeight = window.innerHeight;

        // Resize canvas
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;

        // Firework class
        function Firework(sx, sy, tx, ty) {
            // Set coordinates (x/y = actual, sx/sy = starting, tx/ty = target)
            this.x = this.sx = sx;
            this.y = this.sy = sy;
            this.tx = tx;
            this.ty = ty;

            // Calculate distance between starting and target point
            this.distanceToTarget = calculateDistance(sx, sy, tx, ty);
            this.distanceTraveled = 0;

            // To simulate a trail effect, the last few coordinates will be
            // stored
            this.coordinates = [];
            this.coordinateCount = 3;

            // Populate coordinate array with initial data
            while (this.coordinateCount--) {
                this.coordinates.push([this.x, this.y]);
            }

            // Some settings, you can adjust them if you'd like to do so.
            this.angle = Math.atan2(ty - sy, tx - sx);
            this.speed = options.rocketSpeed;
            this.acceleration = options.rocketAcceleration;
            this.brightness = random(50, 80);
            this.hue = currentHue;
            this.targetRadius = 1;
            this.targetDirection = false; // false = Radius is getting bigger,
            // true = Radius is getting smaller

            // Increase the rockets launched counter
            cntRocketsLaunched++;
        }

        // This method should be called each frame to update the firework
        Firework.prototype.update = function(index) {
            // Update the coordinates array
            this.coordinates.pop();
            this.coordinates.unshift([this.x, this.y]);

            // Cycle the target radius (used for the pulsing target circle)
            if (!this.targetDirection) {
                if (this.targetRadius < 8) this.targetRadius += 0.15;
                else this.targetDirection = true;
            } else {
                if (this.targetRadius > 1) this.targetRadius -= 0.15;
                else this.targetDirection = false;
            }

            // Speed up the firework (could possibly travel faster than the
            // speed of light)
            this.speed *= this.acceleration;

            // Calculate the distance the firework has travelled so far (based
            // on velocities)
            var vx = Math.cos(this.angle) * this.speed;
            var vy = Math.sin(this.angle) * this.speed;
            this.distanceTraveled = calculateDistance(this.sx, this.sy, this.x + vx, this.y + vy);

            // If the distance traveled (including velocities) is greater than
            // the initial distance
            // to the target, then the target has been reached. If that's not
            // the case, keep traveling.
            if (this.distanceTraveled >= this.distanceToTarget) {
                createParticles(this.tx, this.ty);
                fireworks.splice(index, 1);
            } else {
                this.x += vx;
                this.y += vy;
            }
        };

        // Draws the firework
        Firework.prototype.draw = function() {
            var lastCoordinate = this.coordinates[this.coordinates.length - 1];

            // Draw the rocket
            canvasCtx.beginPath();
            canvasCtx.moveTo(lastCoordinate[0], lastCoordinate[1]);
            canvasCtx.lineTo(this.x, this.y);
            canvasCtx.strokeStyle = "hsl(" + this.hue + ",100%," + this.brightness + "%)";
            canvasCtx.stroke();

            // Draw the target (pulsing circle)
            if (options.showTargets) {
                canvasCtx.beginPath();
                canvasCtx.arc(this.tx, this.ty, this.targetRadius, 0, Math.PI * 2);
                canvasCtx.stroke();
            }
        };

        // Particle class
        function Particle(x, y) {
            // Set the starting point
            this.x = x;
            this.y = y;

            // To simulate a trail effect, the last few coordinates will be
            // stored
            this.coordinates = [];
            this.coordinateCount = 5;

            // Populate coordinate array with initial data
            while (this.coordinateCount--) {
                this.coordinates.push([this.x, this.y]);
            }

            // Set a random angle in all possible directions (radians)
            this.angle = random(0, Math.PI * 2);
            this.speed = random(1, 10);

            // Add some friction and gravity to the particle
            this.friction = options.particleFriction;
            this.gravity = options.particleGravity;

            // Change the hue to a random number
            this.hue = random(currentHue - 20, currentHue + 20);
            this.brightness = random(50, 80);
            this.alpha = 1;

            // Set how fast the particles decay
            this.decay = random(0.01, 0.03);
        }

        // Updates the particle, should be called each frame
        Particle.prototype.update = function(index) {
            // Update the coordinates array
            this.coordinates.pop();
            this.coordinates.unshift([this.x, this.y]);

            // Slow it down (based on friction)
            this.speed *= this.friction;

            // Apply velocity to the particle
            this.x += Math.cos(this.angle) * this.speed;
            this.y += Math.sin(this.angle) * this.speed + this.gravity;

            // Fade out the particle, and remove it if alpha is low enough
            this.alpha -= this.decay;
            if (this.alpha <= this.decay) {
                particles.splice(index, 1);
            }
        };

        // Draws the particle
        Particle.prototype.draw = function() {
            var lastCoordinate = this.coordinates[this.coordinates.length - 1];
            var radius = Math.round(random(options.particleMinRadius, options.particleMaxRadius));

            // Create a new shiny gradient
            var gradient = canvasCtx.createRadialGradient(this.x, this.y, 0, this.x, this.y, radius);
            gradient.addColorStop(0.0, "white");
            gradient.addColorStop(0.1, "white");
            gradient.addColorStop(0.1, "hsla(" + this.hue + ",100%," + this.brightness + "%," + this.alpha + ")");
            gradient.addColorStop(1.0, "black");

            // Draw the gradient
            canvasCtx.beginPath();
            canvasCtx.fillStyle = gradient;
            canvasCtx.arc(this.x, this.y, radius, Math.PI * 2, false);
            canvasCtx.fill();
        };

        // Create a bunch of particles at the given position
        function createParticles(x, y) {
            var particleCount = Math.round(random(options.particleMinCount, options.particleMaxCount));
            while (particleCount--) {
                particles.push(new Particle(x, y));
            }
        }

        // Add an event listener to the window so we're able to react to size
        // changes
        window.addEventListener("resize", function(e) {
            canvas.width = canvasWidth = window.innerWidth;
            canvas.height = canvasHeight = window.innerHeight;
        });

        // Add event listeners to the canvas to handle mouse interactions
        canvas.addEventListener("mousemove", function(e) {
            e.preventDefault();
            mouse.x = e.pageX - canvas.offsetLeft;
            mouse.y = e.pageY - canvas.offsetTop;
        });

        canvas.addEventListener("mousedown", function(e) {
            e.preventDefault();
            mouse.down = true;
        });

        canvas.addEventListener("mouseup", function(e) {
            e.preventDefault();
            mouse.down = false;
        });

        // Main application / script, called when the window is loaded
        function gameLoop() {
            // This function will rund endlessly by using requestAnimationFrame
            // (or fallback to setInterval)
            requestAnimFrame(gameLoop);

            // Increase the hue to get different colored fireworks over time
            currentHue += 0.5;

            // 'Clear' the canvas at a specific opacity, by using
            // 'destination-out'. This will create a trailing effect.
            canvasCtx.globalCompositeOperation = "destination-out";
            canvasCtx.fillStyle = "rgba(0, 0, 0, 0.5)";
            canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);
            canvasCtx.globalCompositeOperation = "lighter";

            // Loop over all existing fireworks (they should be updated & drawn)
            var i = fireworks.length;
            while (i--) {
                fireworks[i].draw();
                fireworks[i].update(i);
            }

            // Loop over all existing particles (they should be updated & drawn)
            var i = particles.length;
            while (i--) {
                particles[i].draw();
                particles[i].update(i);
            }

            // Draw some text
            // canvasCtx.fillStyle = 'white';
            // canvasCtx.font = '14px Arial';
            // canvasCtx.fillText('Rockets launched: ' + cntRocketsLaunched, 10,
            // 24);

            // Launch fireworks automatically to random coordinates, if the user
            // does not interact with the scene
            if (timerTick >= options.timerInterval) {
                if (!mouse.down) {
                    fireworks.push(
                        new Firework(canvasWidth / 2, canvasHeight, random(0, canvasWidth), random(0, canvasHeight / 2))
                    );
                    timerTick = 0;
                }
            } else {
                timerTick++;
            }

            // Limit the rate at which fireworks can be spawned by mouse
            if (clickLimiterTick >= options.clickLimiter) {
                if (mouse.down) {
                    fireworks.push(new Firework(canvasWidth / 2, canvasHeight, mouse.x, mouse.y));
                    clickLimiterTick = 0;
                }
            } else {
                clickLimiterTick++;
            }
        }
        canvas.setAttribute("style", "position: fixed;top: 0;left: 0;");
        if (option && option.hasOwnProperty("onClick")) {
            if (typeof option.onClick == "function") {
                canvas.onclick = function() {
                    option.onClick();
                };
            }
        } else {
            if (option && option.hasOwnProperty("href")) {
                canvas.classList.add("has-cursor-pointer");
                canvas.onclick = function() {
                    window.location.href = option.href;
                };
            }
        }

        window.onload = gameLoop();
        return canvas;
    },

    createCoinFall: function(option) {
        var container = option.container;

        // var exists = document.getElementsByClassName('coinContainer')[0];
        // if (exists) {
        // exists.parentNode.removeChild(exists);
        // return false;
        // }

        var element = document.createElement("div");
        element.setAttribute("style", "position: fixed;");
        container.appendChild(element);
        var canvas = document.createElement("canvas"),
            ctx = canvas.getContext("2d"),
            focused = false;

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        canvas.id = "gimmick";

        var coin = new Image();
        coin.src = option.hasOwnProperty("imageSrc") ? option.imageSrc : "http://i.imgur.com/5ZW2MT3.png";
        // 440 wide, 40 high, 10 states
        coin.onload = function() {
            element.appendChild(canvas);
            focused = true;
            drawloop();
        };
        var coins = [];

        function drawloop() {
            if (focused) {
                requestAnimationFrame(drawloop);
            }

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (Math.random() < 0.3) {
                coins.push({
                    x: (Math.random() * canvas.width) | 0,
                    y: -50,
                    dy: 3,
                    s: 0.5 + Math.random(),
                    state: (Math.random() * 10) | 0,
                });
            }
            var i = coins.length;
            while (i--) {
                var x = coins[i].x;
                var y = coins[i].y;
                var s = coins[i].s;
                var state = coins[i].state;
                coins[i].state = state > 9 ? 0 : state + 0.1;
                coins[i].dy += 0.3;
                coins[i].y += coins[i].dy;

                ctx.drawImage(coin, 44 * Math.floor(state), 0, 44, 40, x, y, 44 * s, 40 * s);

                if (y > canvas.height) {
                    coins.splice(i, 1);
                }
            }
        }

        return element;
    },
    renderListPost: function(id, typepost = "news") {
        var dataList = null;
        if (id) {
            var parentID = id;
            var url = shinobi.coreapi.blogOverviewApi + "findDataList";
            var request = {
                recordPerPage: shinobi.util.getRecordNumber(parentID),
            };

            // shinobi.newspagerender.dataList = new
            // shinobi.datalist(parentID);
            // shinobi.newspagerender.dataList.staticfilters = [{ "colname":
            // "posttype", "operator": "like", "value": typepost }];
            // shinobi.newspagerender.dataList.staticsorts = [{ "colname":
            // "id", "value": "desc" }];
            // shinobi.newspagerender.dataList.initLoadApi(url, request);
            dataList = new shinobi.datalist(parentID);
            dataList.staticfilters = [{ colname: "posttype", operator: "like", value: typepost }];
            dataList.staticsorts = [{ colname: "id", value: "desc" }];
            dataList.initLoadApi(url, request);
        }
        return dataList;
    },
};shinobi.xhradapter = {
	'getResource' : function(url, callback) {
		this.accessResource("GET", url, callback);
	},
	'accessResource' : function(method, url, callback) {
		var xhttp = new XMLHttpRequest();
		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				callback(xhttp.responseText);
			}
		};
		xhttp.open(method, url, true);
		xhttp.send();
	},
	'login' : function(username, password, callback) {
		var xhttp = new XMLHttpRequest();

		xhttp.onreadystatechange = function() {
			if (this.readyState == 4 && this.status == 200) {
				callback(xhttp.responseText);
			}
		};

		xhttp.open("POST", "/login", true);
		xhttp.setRequestHeader('username', username);
		xhttp.setRequestHeader('password', password);
		xhttp.send();
	}
};
shinobi.fileuploadconfig = {
  uploadDomainProcess: function () {
    var hostname = window.location.hostname;
    var uploadFileUrl;
    switch (hostname) {
      case "golddemo.hanzo.finance":
        uploadFileUrl = "https://golddemouploadfile.hanzo.finance/";
        break;
      case "gold.hanzo.finance":
        uploadFileUrl = "https://golduploadfile.hanzo.finance/";
        break;
      case "localhost":
      default:
        uploadFileUrl = "http://localhost:10000/";
        break;
    }
    return uploadFileUrl;
  },
};
shinobi.notificationconfig = {
  config: {
    modalSize: "is-medium",
    modalFontSize: "is-size-4",
  },
  init: function () {
    shinobi.notification.config = shinobi.notificationconfig.config;
  },
};
shinobi.config = {
  current: {
    imserver: "ws://localhost:8081/authensocket",
    publicWebSocketUrl: "ws://localhost:8182/publicwebsocket",
  },
  getConfig: function () {
    var hostname = window.location.hostname;
    switch (hostname) {
      case "golddemo.hanzo.finance":
        shinobi.config.current.imserver =
          "wss://golddemoprivatesocket.hanzo.finance/authensocket";
        shinobi.config.current.publicWebSocketUrl =
          "wss://golddemopublicsocket.hanzo.finance/publicwebsocket";
        break;
      case "gold.hanzo.finance":
        shinobi.config.current.imserver =
          "wss://goldprivatesocket.hanzo.finance/authensocket";
        shinobi.config.current.publicWebSocketUrl =
          "wss://goldpublicsocket.hanzo.finance/publicwebsocket";
        break;
      case "localhost":
      default:
        shinobi.config.current.imserver = "ws://localhost:8081/authensocket";
        shinobi.config.current.publicWebSocketUrl =
          "ws://localhost:8182/publicwebsocket";
        // shinobi.config.current.publicWebSocketUrl =
        // "wss://golddemopublicsocket.hanzo.finance/publicwebsocket";
        break;
    }
  },
};
shinobi.accountefficiencyuserrender = {
    build: function (systemsubaccount) {
        var object = this;
        object.renderAccountEfficiencyUser(systemsubaccount);
    },

    renderAccountEfficiencyUser: function (valueAccount) {
        var datalistId = "tableaccountefficiency";

        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        if (!shinobi.accountefficiencyuserrender.tableaccountefficiency) {
            shinobi.accountefficiencyuserrender.tableaccountefficiency = new shinobi.table(datalistId);
        }

        var url = '/authenapi/SystemUserApi/getInvestmentEfficiency';
        var request = { "allocationaccount": valueAccount };

        shinobi.notification.notification.loading();
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            shinobi.notification.notification.loaded();
            shinobi.accountefficiencyuserrender.tableaccountefficiency.clear();
            data = JSON.parse(res);
            shinobi.accountefficiencyuserrender.tableaccountefficiency.renderTable(colNames, data, renders);
        });
    },
};shinobi.accountmanagementdetailrender = {
    table: '',
    build: function () {
        var object = this;
        object.createStruct(function (search) {
            object.getinfoUserAccount(search);
            object.loadData(search);
        });
        shinobi.selfemployedaccountrender.createMultivalueStructure();
    },
    loadData: function (systemsubaccount) {
        var object = this;
        var datalistId = 'linkedpmaccounttable';
        var url = "/authenapi/ClientAccountDetailApi/findDataList";
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        }
        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        object.table = new shinobi.table(datalistId);
        object.table.staticfilters = [{
            'colname': 'systemsubaccount',
            'operator': '=',
            'value': systemsubaccount
        }];
        object.table.initLoadApi(url, request, colNames, renders);

        if (!systemsubaccount) {
            object.openModalWarning(object.configSystemSubAccount, "Người dùng chưa cấu hình tài khoản giao dịch.", "");
        }
    },
    createStruct: function (callback) {
        var search = shinobi.util.getAllSearchInPath();
        var systemSubaccount = search.systemsubaccount;
        document.getElementById('accountmanagement').classList.add('is-active');
        if (callback) {
            callback(systemSubaccount);
        }
    },
    getinfoUserAccount: function (subAccount) {
        var url = '/authenapi/StockComAccountApi/getStockComAccountInfo';
        var request = {
            "recordPerPage": "10", "pageNum": 1,
            systemsubaccount: subAccount,
        };
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            console.log("getinfoUserAccount", res);
            var elem = document.getElementById('nameuser');
            shinobi.mapping.renderElement(elem, res);
        });
    },

    checkConfigClientAccount: function (cell, row, col, all) {
        var object = shinobi.accountmanagementdetailrender;
        var value = cell.innerHTML;
        // if (!all[row].hasOwnProperty("systemsubaccount")) {
        //     var config = object.configSystemSubAccount;
        //     var warning = `Tài khoản ${all[row].fullname} chưa cấu hình tài khoản giao dịch.`

        //     shinobi.accountmanagementdetailrender.openModalWarning(config, warning, all[row]);
        // } else {
        if (!all[row].hasOwnProperty("enddate")) {
            var config = object.configAllocationCustomer;
            var warning = `Tài khoản ${all[row].fullname} chưa được phân bổ.`
            shinobi.accountmanagementdetailrender.openModalWarning(config, warning, all[row]);
        }
        // }
    },

    openModalWarning: function (configModal, warningNotification, data) {
        var warningContainer = document.getElementById("warningNotification");
        warningContainer.innerHTML = `
            <div>
                <div class="has-text-danger is-italic">${warningNotification}</div>
                <div class="has-text-danger has-text-weight-bold">Vui lòng cấu hình tài khoản</div>
            </div>
        `

        var modal = document.getElementById("warningConfigModal");
        modal.classList.add("is-active");
        button = modal.querySelector(".confirmConfig");
        button.onclick = function () {
            modal.classList.remove("is-active");
            configModal(data);
        }
    },

    configSystemSubAccount: function (data) {
        console.log("configSystemSubAccount");

        var systemaccountDomain = shinobi.util.getAllSearchInPath().systemaccount;

        shinobi.accountmanagementdetailrender.getInfoClientAccount(function (clientInfoList) {
            console.log("clientInfoList", clientInfoList);
            clientInfoList.forEach(clientInfo => {
                console.log("clientInfo", clientInfo);
                if (clientInfo.systemaccount == systemaccountDomain) {
                    shinobi.selfemployedaccountrender.checkChildAccount(systemaccountDomain, clientInfo, function (systemsubaccount) {
                        setTimeout(function () {
                            window.onbeforeunload = null;
                            window.location.href = '/private/accountmanagementdetail?' + 'systemsubaccount='
                                + systemsubaccount + "&systemaccount=" + systemaccountDomain;
                        }, 500);
                    }
                        , 'disableReload');
                }
            })
        });


    },

    getInfoClientAccount: function (callback) {
        var url = "/authenapi/ClientStockComAccountManagementApi/findDataList";
        var request = {}
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            data = res.data;

            if (callback) {
                callback(data);
            }
        });
    },

    configAllocationCustomer: function (data) {
        console.log("configAllocationCustomer");
        shinobi.accountmanagementrender.activeThirdModel('', data.systemsubaccount);
    },

    renderUpdateVolumeStock: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.classList.add('has-text-right');
        cell.innerHTML = `
            ${shinobi.util.formatNumber(value)} 
            <p class="icon has-text-link confirm" data-tooltip="Xác nhận tiền về">
            <i class="fal fa-search-dollar"></i>
        `;

        var button = cell.querySelector('.confirm');

        button.onclick = function () {
            var username = value;
            var fullname = all[row].fullname;
            var stock = all[row].stock;
            stock = "TTF";
            shinobi.accountmanagementdetailrender.updateVolumeBuy(username, fullname, stock, all[row]);
        };

    },

    updateVolumeBuy: function (username, fullname, stock, fulldata) {
        var url = '';
        shinobi.notification.confirm(function () {
            shinobi.mapping.getValue("#modalFlexible", function (data) {
                console.log('data send', data, 'username', username);
                var request = data;
                // shinobi.api.request(url, JSON.stringify(request), function () {
                //     setTimeout(function () {
                //         shinobi.accountmanagementdetailrender.table.reloadApi();
                //     }, 2000);
                // })

            });
        }, {
            title: "Xác nhận tiền về",
            content: `
            <div  class="level is-size-6 mb-2">
                <div class="level-item">
                    <span>Tên KH: </span> <span class="font-weight-bold">${fullname} </span>
                </div>
            <div class="level-item">
                <span class"pl-4">Mã CK: </span> <span class="font-weight-bold">${stock} </span>    
            </div>
           
            </div>
            <div class="field">
             <label for="" class="label">Số tiền: ${fulldata.cash}</label>
        </div>
            `,
        });
    },

    renderOtherOptionsLinkedPMTable: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.innerHTML = `
        <div class="has-text-centered">       
            <div class="dropdown is-up is-right more-button">
                <div class="dropdown-trigger">
                    <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                        <span><i class="fas fa-ellipsis-v"></i></span>
                    </button>
                </div>
                <div class="dropdown-menu" id="dropdown-menu" role="menu">
                    <div class="dropdown-content">
                        <a class="dropdown-item pr-4">
                            Tạm ngắt kết nối
                        </a>
                        <a class="dropdown-item pr-4">
                            Ngắt kết nối và tất toán
                        </a>
                    </div>
                </div>
            </div>
        </div>`

        var dropdown = cell.querySelector('.dropdown');
        dropdown.onclick = function () {
            dropdown.classList.toggle('is-active');
        }
    },
};shinobi.accountmanagementrender = {
  build: function () {
    var object = this;
    object.changeNameCreateButton();
    object.addEventActiveModal();
    shinobi.fragmentfindandaddaccountmanagementrender.build();

    object.renderDataCustomerTable();
    object.activeFirstModal();

    shinobi.selfemployedaccountrender.createMultivalueStructure();
  },
  stopReload: function () {
    window.onbeforeunload = function (event) {
      event.returnValue = "";
    };
  },
  addEventActiveModal: function () {
    var object = this;
    var buttonAddUser = document.getElementById('addAccountButton');
    buttonAddUser.onclick = function () {
      var firstModal = document.getElementById('addAccountUserModal');
      firstModal.classList.add('is-active');
      object.activeFirstModal();
    };
  },
  setupPassword: function () {
    var inputLoginPassword = document.querySelector("#addAccountUserModal #loginPassword input");
    var inputOrderPassword = document.querySelector("#addAccountUserModal #orderPassword input");
    var buttonLoginPassword = document.querySelector("#addAccountUserModal #loginPassword .button");
    var buttonOrderPassword = document.querySelector("#addAccountUserModal #orderPassword .button");
    shinobi.fragmentfindandaddaccountmanagementrender.showPassword(buttonLoginPassword, inputLoginPassword);
    shinobi.fragmentfindandaddaccountmanagementrender.showPassword(buttonOrderPassword, inputOrderPassword);
  },
  activeFirstModal: function () {
    var object = this;
    var firstModal = document.getElementById('addAccountUserModal');
    var buttonCreate = firstModal.querySelector('.button.create');
    shinobi.selfemployedaccountrender.renderCompanySelect('companyNameaccount');

    shinobi.accountmanagementrender.setupPassword();
    var callback = function (request) {
      var urlCreate = "/authenapi/StockComAccountRegistrationApi/createStockComAccount";
      console.log("request client", request);
      shinobi.api.request(urlCreate, JSON.stringify(request), function (res) {
        res = JSON.parse(res);
        console.log("create json", res);
        setTimeout(function () {
          shinobi.notification.notification.loaded();
          if (firstModal.classList.contains('is-active')) {
            firstModal.classList.remove('is-active');
          }
          object.stopReload();
          shinobi.selfemployedaccountrender.checkChildAccount(res, request, function (systemsubaccount) {
            console.log("request", request)
            setTimeout(function () {
              object.activeThirdModel(res, systemsubaccount);
            }, 1000);

          }, 'disableReload');
        }, 2000);

      });
    };
    buttonCreate.onclick = function () {
      shinobi.notification.notification.loading();
      shinobi.mapping.getValueElement(firstModal, function (json) {
        var request = {
          "stockcom": json.stockcom,
          "account": json.usernameaccount,
          "username": json.usernameaccount,
          "password": json.password,
          "pincode": json.pincode,
          "name": json.name
        }
        var requestMachine = request;
        delete requestMachine['pincode'];
        console.log(json, requestMachine);
        !Object.values(requestMachine).includes("") ? callback(request) : shinobi.util.fillInputMessage();
      }, {
        checkEmpty: true
      });
    }


  },
  activeThirdModel: function (account, systemsubaccount) {
    var object = this;
    var urlSubmit = "/authenapi/AllocationManagementApi/setClientAllocation";
    var thirdModal = document.getElementById('addAccountAllocationModal');
    var selectPm = 'listpmusernameallocation';
    var subAccount = shinobi.selfemployedaccountrender.systemsubaccount;
    var systemSubAccount = subAccount;
    if (!subAccount) {
      systemSubAccount = systemsubaccount;
    }

    if (window.onbeforeunload == null) {
      object.stopReload();
    }

    var buttonCreate = thirdModal.querySelector('.button.create');

    thirdModal.classList.add('is-active');
    shinobi.selfemployedaccountrender.stopOutModal(thirdModal);
    shinobi.fragmentfindandaddaccountmanagementrender.getListPMAllotment(selectPm);
    buttonCreate.onclick = function () {

      shinobi.mapping.getValueElement(thirdModal, function (json) {
        var request = {};
        request.systemsubaccount = systemSubAccount;
        request.startdate = json.startdate;
        request.enddate = json.enddate;
        request.profitcommisionratio = Number(json.profitcommisionratio) / 100;
        request.managementfeeratio = Number(json.managementfeeratio) / 100;
        if (json.pmusername != 'admin') {
          request.pmusername = json.pmusername;
          request.allocationratio = Number(json.allocationratio) / 100;
        }
        console.log(request);
        shinobi.api.request(urlSubmit, JSON.stringify(request), function (res) {
          shinobi.notification.notification.info('Cập nhật thành công !');
          window.onbeforeunload = null;
          setTimeout(function () {
            window.location.reload();
          }, 2000)
        })
      })
    }


  },

  renderMoreButton: function (cell, row, col, all) {
    var value = cell.innerHTML;

    cell.innerHTML = `
      <div class="has-text-centered">       
        <div class="dropdown is-up is-right more-button">
          <div class="dropdown-trigger">
            <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
              <span><i class="fas fa-ellipsis-v"></i></span>
            </button>
          </div>
          <div class="dropdown-menu" id="dropdown-menu" role="menu">
            <div class="dropdown-content">
              <a class="dropdown-item pr-4">
                Gia hạn đầu tư
              </a>
              <a  class="dropdown-item pr-4 select-value" >
                Xem chi tiết
              </a>
              <a class="dropdown-item pr-4">
                Xoá
              </a>
            </div>
          </div>
        </div>
      </div>`
    var select = cell.querySelector('.select-value');
    shinobi.accountmanagementrender.sethrefSeeDetailAccount(select, value, all[row]);
    var dropdown = cell.querySelector('.dropdown');
    dropdown.onclick = function () {
      dropdown.classList.toggle('is-active');
    }
  },
  sethrefSeeDetailAccount: function (elem, systemsubaccount, all) {
    var href = '/private/accountmanagementdetail?' + 'systemsubaccount=' + systemsubaccount + "&systemaccount=" + all.systemaccount;
    elem.setAttribute('href', href);
  },

  changeNameCreateButton: function () {
    var createButton = document.querySelector("#addAccountButton");
    createButton.innerText = "Thêm tài khoản KH";
  },

  renderDataCustomerTable: function (systemsubaccount) {
    var datalistId = "dataCustomerTable";
    var url = "/authenapi/ClientStockComAccountManagementApi/findDataList";

    var colNames = shinobi.tableHelper.getColname(datalistId);
    var renders = shinobi.tableHelper.getRender(datalistId);

    if (!shinobi.accountmanagementrender.dataCustomerTable) {
      var datalist = new shinobi.table(datalistId);
      shinobi.accountmanagementrender.dataCustomerTable = datalist;
    }

    // datalist.staticsorts = sortDefault;
    // datalist.staticfilters = filterDefault;

    var request = {
      recordPerPage: shinobi.util.getRecordNumber(datalistId),
    }

    shinobi.accountmanagementrender.dataCustomerTable.initLoadApi(url, request, colNames, renders);
  },

  createMultivalueStructure: function () {
    shinobi.selfemployedaccountrender.multivalueinput = new shinobi.multivalueinput(
      'input[snb-key="bancode"]', {
      buildSearch: function (object) {
        object.inputSearch.setAttribute('placeholder', 'Thêm mã');
        object.inputSearch.setAttribute('type', 'text');
        new shinobi.autocomplete('#selectorInputSearch', {
          onSearch: (input, resolve) => {
            input = input.toUpperCase();
            var inputContainer = document.getElementById("selectorInputSearch");
            inputContainer.value = inputContainer.value.toUpperCase();

            if (input.length < 1) { resolve([]) }
            var url = "/api/PriceBoardApi/findDataList";
            var request = {
              "recordPerPage": "20",
              "pageNum": 1,
              "filters": [{ 'colname': 'stocksymbol', 'operator': 'like', 'value': input }]
            }

            shinobi.api.request(url, JSON.stringify(request), function (res) {
              var array = JSON.parse(res).data;
              resolve(array);
            });


          },
          autoSelect: true,
          getResultValue: result => {
            return result.stocksymbol.toUpperCase();
          },
          onSubmit: (result) => {
            object.appendChildItem(result, object);
            object.inputSearch.value = '';
          },
          renderResult: (result, props) => {
            return `
                      <li ${props}>
                          <div class="title has-text-primary is-size-5">
                         ${result.stocksymbol}
                          </div>
                          <div class="subtitle">${result.securityname}</div>
                      </li>`
          },
        });
      },
      renderItem: function (result) {
        result = JSON.parse(result).stocksymbol;
        return result;
      },
    });
  },

  appendChildItem: function (object) {
    var result = object.inputSearch.value.trim();
    if (result.length >= 3) {
      object.appendChildItem(result, object);
      object.inputSearch.value = '';
    }
  },

  getStockList: function (input) {
    if (input.trim() == '') {
      return [];
    } else {
      var list = input.split(',');
      list.forEach(function (item, index) {
        list[index] = item.substring(1, item.length - 1);
      })
      return list;
    }
  },

  renderListInput: function (elem, value, all) {
    var object = shinobi.selfemployedaccountrender.multivalueinput;
    elem.value = value;
    var listItem = value;
    shinobi.selfemployedaccountrender.resetElemMultivalue();

    listItem.forEach(result => {
      shinobi.selfemployedaccountrender.multivalueinput.appendChildItem(result, object);
    });
  },

  getBanCode: function () {
    var arrayResult = [];
    var result = shinobi.selfemployedaccountrender.multivalueinput.result;
    result.forEach(elem => {
      try {
        elem = JSON.parse(elem);
        elem = elem.stocksymbol
        arrayResult.push(elem);
      } catch (e) { }
    });
    return arrayResult;
  },

  checkConfigClientAccount: function (cell, row, col, all) {
    if (!all[row].hasOwnProperty("systemsubaccount")) {
      cell.innerHTML = `
      <div class="">
        <span class="has-text-danger has-text-weight-bold is-italic">Chưa cấu hình TK giao dịch</span> 
      </div>
      `
    } else if (!all[row].hasOwnProperty("enddate")) {
      cell.innerHTML = `
        <div class="">
          <span class="has-text-danger has-text-weight-bold is-italic">Chưa phân bổ TK</span> 
        </div>
        `
    } else {
      cell.innerHTML = `
      <div class="">
        <span class="has-text-success is-italic">Đã thiết lập</span> 
      </div>
      `
    }
  },
};
shinobi.admindividendstockmanagementrender = {
    table: '',
    build: function () {
        var object = this;
        object.loadTable();
    },
    renderListStock: function (cell, row, col, all) {
        var username = cell.innerHTML;
        var idTable = `tablestockcom${row}${col}`;
        cell.innerHTML = "";
        // var listStock = all[row].liststock;
        var listStock = ['ACB', 'VNM', 'TTF', 'ANV'];
        cell.innerHTML = listStock.toString();
        var dropdown = document.createElement('div');
        dropdown.setAttribute('class', 'button-eye-fixed');
        dropdown.innerHTML = `  
        <div class="dropdown ">
        <div class="dropdown-trigger">
            <button class="button  is-borderless" aria-haspopup="true"
                aria-controls="dropdown-menu3">
                <p class="icon " data-tooltip="Xem chi tiết">
                    <i class="far fa-eye"></i>

                </p>
            </button>
        </div>
        <div class="dropdown-menu min-width-table">
            <div class="dropdown-content">
                <table id="${idTable}" class="table is-fullwidth">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th> Mã CP </th>
                            <th>KL</th>
                            <th>Ngày phát sinh</th>
                        </tr>
                    </thead>
                    <tr>
                        <td>1</td>
                        <td>ACB</td>
                        <td>10,000</td>
                        <td>29-12-2022 13:59</td>
                    </tr>
                </table>
            </div>
        </div>`
        cell.appendChild(dropdown);
        shinobi.initbulma.addEventDropdown();
    },
    loadTable: function (systemsubaccount) {
        var object = this;
        var datalistId = 'tablestockmanagement';
        var url = "/authenapi/ClientAccountDetailApi/findDataList";
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        }
        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        object.table = new shinobi.table(datalistId);
        object.table.staticfilters = [];
        object.table.initLoadApi(url, request, colNames, renders);
    },
    renderButtonExecute: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.innerHTML = `
            <div>
                <button class="button is-small is-link">Xử lý</button>
            </div>
        `
    }
};shinobi.adminlistuserreceivedividendsrender = {
    table: '',
    build: function () {
        var object = this;
        object.activeTabs();
        object.activeFullFilters();
        object.loadData();
        object.setUpCalenderDate();
        getListStockSymbol('#autocomplete');
        object.filterDividendsStock();
    },
    activeFullFilters: function () {
        var container = document.getElementById("searchingByFilter");
        var accountSearch = container.querySelector("#searchByAccount");
        accountSearch.classList.remove("is-hidden");
    },
    activeTabs: function () {
        var tab = document.getElementById('adminlistuserreceivedividends');
        tab.classList.add('is-active');
        document.querySelector('[href="/private/dividendmanagement"]').classList.add('is-active');
    },
    renderUpdateVolumeStock: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.classList.add('has-text-right');
        cell.innerHTML = `
        ${shinobi.util.formatNumber(value)} <p class="icon has-text-link update" data-tooltip="Cập nhật"><i
                                class="fal fa-sync"></i></p>`;
        var button = cell.querySelector('.update');

        button.onclick = function () {
            var username = value;
            var fullname = all[row].fullname;
            var stock = all[row].stock;
            stock = "TTF";
            shinobi.adminlistuserreceivedividendsrender.updateVolumeBuy(username, fullname, stock);
        };

    },
    updateVolumeBuy: function (username, fullname, stock) {
        var url = '';
        shinobi.notification.confirm(function () {
            shinobi.mapping.getValue("#modalFlexible", function (data) {
                console.log('data send', data, 'username', username);
                var request = data;
                // shinobi.api.request(url, JSON.stringify(request), function () {
                //     setTimeout(function () {
                //         shinobi.adminlistuserreceivedividendsrender.table.reloadApi();
                //     }, 2000);
                // })

            });
        }, {
            title: "Cập nhật CP thực hiện quyền",
            content: `
            <div  class="level is-size-6 mb-2">
                <div class="level-item">
                    <span>Tên KH: </span> <span class="font-weight-bold">${fullname} </span>
                </div>
            <div class="level-item">
                <span class"pl-4">Mã CK: </span> <span class="font-weight-bold">${stock} </span>    
            </div>
           
           
            </div>
            <div id="modalFlexible" class="field">
             <label for="" class="label">Số cổ phiếu:</label>
             <div class="control">
                <input snb-key="volume" value="0" type="text" class="input" snb-preprocess="shinobi.render.getNumberCleaveInput">
             </div>
        </div>
            `,
        });
        shinobi.util.createNumberCleaveInput("#modalFlexible input");
    },
    loadData: function (systemsubaccount) {
        var object = this;
        var datalistId = 'tabledividend';
        var url = "/authenapi/ClientAccountDetailApi/findDataList";
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        }
        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        object.table = new shinobi.table(datalistId);
        object.table.staticfilters = [];
        object.table.initLoadApi(url, request, colNames, renders);
    },

    setUpCalenderDate: function () {
        var object = this;
        object.setLabelCalendarPicker("#searchingByFilter #searchinghistory input")
    },

    setLabelCalendarPicker: function (selector) {
        var object = this;
        var data = {
            start: `2000/1/1`,
            end: `${new Date().getFullYear()}/${new Date().getMonth() + 1}/${new Date().getDate()}`
        };
        object.calendar = bulmaCalendar.attach(selector,
            {
                'dateFormat': 'DD/MM/YYYY',
                'displayMode': 'dialog',
                closeOnOverlayClick: false,
                'startDate': new Date(data.start),
                'endDate': new Date(data.end),
            });

        // shinobi.util.setRangeCalendar('[snb-key="date"]', new Date(data.start), new Date(data.end));
    },

    filterDividendsStock: function () {
        var idContainer = '#searchingByFilter';
        var buttonFilter = document.getElementById('searchOrderCommand');
        buttonFilter.onclick = function () {
            shinobi.mapping.getValue(idContainer, function (data) {
                console.log('data', data);
                var dataFilters = [];
                if (data.stocksymbol) {
                    dataFilters.push({
                        "colname": "stockcode", "operator": "=", "value": data.stocksymbol
                    });

                    if (data.date.beginDate) {
                        dataFilters.push({
                            "colname": "detectdate", "operator": ">=", "value": data.date.beginDate
                        });
                        if (data.date.endDate != 'NaN-NaN-NaN') {
                            dataFilters.push({
                                "colname": "detectdate", "operator": "<=", "value": data.date.endDate
                            });
                        }
                    }
                    if (data.account) {
                        dataFilters.push({
                            "colname": "fullname", "operator": "=", "value": data.account
                        });
                    }
                    console.log('dataFilters', dataFilters);
                    shinobi.dividendmanagementrender.filterAndReloadTwoTable(dataFilters);
                    shinobi.operationsmanagementrender.renderFilterButton(true);
                } else {
                    shinobi.notification.notification.error("Vui lòng nhập mã cần tìm kiếm!");
                }
            })
        }
    },

    reloadApiFilterButton: function () {
        var cancelFilter = document.getElementById("cancelfilter");
        cancelFilter.onclick = function () {
            var dataFilters = [];
            shinobi.dividendmanagementrender.filterAndReloadTwoTable(dataFilters);

            shinobi.operationsmanagementrender.renderFilterButton(false);
        };
    },

    filterAndReloadTwoTable: function (dataFilters) {
        shinobi.dividendmanagementrender.configgedTable.staticfilters = dataFilters;
        shinobi.dividendmanagementrender.nonConfigTable.staticfilters = dataFilters;

        shinobi.dividendmanagementrender.configgedTable.reloadApi();
        shinobi.dividendmanagementrender.nonConfigTable.reloadApi();
    },
};shinobi.assetuserrender = {
    portfolioTable: '',
    build: function (systemsubaccount) {
        var object = this;
        shinobi.assetuserrender.renderTableAssetUser(systemsubaccount);
        object.getAssetUser(systemsubaccount);
        object.addEventReloadAssetButton(systemsubaccount);

    },

    addEventReloadAssetButton(allocationAccount) {
        let button = document.getElementById('updateAllocationAccountAssetButton');
        button.onclick = function () {
            allocationAccount = document.getElementById("selectPM").value;
            shinobi.assetuserrender.getAssetUser(allocationAccount);
            shinobi.assetuserrender.renderTableAssetUser(allocationAccount);
        }
    },
    getAssetUser: function (value) {
        var url = '/authenapi/SystemUserApi/getAssetInfo';
        var asset = '#assetvalue'
        var request = { "allocationaccount": value };
        shinobi.notification.notification.loading();
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            shinobi.mapping.clear(asset);
            shinobi.notification.notification.loaded();
            shinobi.mapping.render(asset, res);

        });
    },

    renderTableAssetUser: function (valueAccount) {
        var datalistId = "tableassetorder";
        // var url = "/authenapi/SystemUserApi/getUserStockProfolio";

        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        if (!shinobi.assetuserrender.portfolioTable.hasOwnProperty('reloadApi')) {
            shinobi.assetuserrender.portfolioTable = new shinobi.table(datalistId);
        }
        // datalist.staticsorts = sortDefault;
        // datalist.staticfilters = filterDefault;

        // var request = {
        //     "account": valueAccount,
        //     recordPerPage: shinobi.util.getRecordNumber(datalistId),
        // }
        // datalist.initLoadApi(url, request, colNames, renders);

        var url = '/authenapi/SystemUserApi/getAssetInfo';
        var request = { "allocationaccount": valueAccount };

        shinobi.notification.notification.loading();
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            shinobi.notification.notification.loaded();
            shinobi.assetuserrender.portfolioTable.clear();
            let portfolio = JSON.parse(res)['portfolio'];
            shinobi.assetuserrender.portfolioTable.renderTable(colNames, portfolio, renders);
        });
    },

    snbRenderButton: function (cell, row, col, all) {

        cell.innerHTML = `
        <div class="has-text-centered">
            <div class="buttons are-small is-centered">
                <div class="button is-danger has-bsd is-borderless is-size-7">Bán</div>
            </div>
        </div>
        `
    },
};shinobi.cashmanagementrender = {
    build: function () {
        var object = this;

    },

    renderTable: function () {
        var tableId = "tablestockmanagement"
        var url = "";

        var colNames = shinobi.tableHelper.getColname(tableId);
        var renders = shinobi.tableHelper.getRender(tableId);

        if (!shinobi.cashmanagementrender.cashManagementTable) {
            shinobi.cashmanagementrender.cashManagementTable = new shinobi.table(tableId);
        }

        var request = {
            recordPerPage: shinobi.util.getRecordNumber(tableId),
        }

        shinobi.cashmanagementrender.cashManagementTable.initLoadApi(url, request, colNames, renders);
    },

    renderOptionsButton: function (cell, row, col, all) {
        cell.innerHTML = `
        <div class="has-text-centered">
            <div class="button is-secondary addCash">Nạp tiền</div>
            <div class="button is-primary cashDividend">Cổ tức tiền mặt</div>
        </div>
        `;

        var buttonCashDividend = cell.querySelector(".cashDividend");
        buttonCashDividend.onclick = function () {
            console.log("switch url transfer page");
            window.location.href =
                `/private/accountmanagementdetail?systemsubaccount=${all[row].systemsubaccount}&systemaccount=${all[row].systemaccount}`;
        };
    },
};shinobi.confirmemailregistrationrender = {
  build: function () {
    shinobi.confirmemailregistrationrender.sendRequestConfirmRegistration();
  },

  sendRequestConfirmRegistration: function () {
    var pathName = window.location.pathname;

    var pathNameSplit = pathName.split("/");

    var validationcode = pathNameSplit[pathNameSplit.length - 1];
    var requestid = pathNameSplit[pathNameSplit.length - 2];

    var request = {};
    request.requestid = requestid;
    request.validationcode = validationcode;

    shinobi.api.request(
      shinobi.coreapi.userApi + "validateAccount",
      JSON.stringify(request),
      function (response) {
        console.log(response);
        if (response == "update success") {
          var confirmPanel = document.getElementById("confirmPanel");
          shinobi.util.modalEventListener(confirmPanel);

          confirmPanel.getElementsByClassName("modal-card-title")[0].innerHTML =
            "Thông báo";
          confirmPanel.getElementsByClassName("modal-card-body")[0].innerHTML =
            "Xác nhận email <b>thành công</b>.<br>Yêu cầu tạo tài khoản đang được xử lý và CFV sẽ liên hệ lại để cung cấp tài khoản.";
          confirmPanel
            .getElementsByClassName("yes")[0]
            .classList.add("is-primary");
          confirmPanel.getElementsByClassName("yes")[0].innerHTML =
            "Về trang chủ";

          confirmPanel.classList.remove("is-medium");
          confirmPanel.classList.remove("is-large");

          confirmPanel
            .getElementsByClassName("modal-card-foot")[0]
            .classList.remove("is-hidden");

          var yes = confirmPanel.getElementsByClassName("yes")[0];
          var cancel = confirmPanel.getElementsByClassName("cancel")[0];
          cancel.classList.add("is-hidden");

          confirmPanel.classList.add("is-active");

          yes.focus();
          yes.onclick = function () {
            // shinobi.loginrender.gotoLoginPage();
            window.location.href = "/";
          };
        }
      }
    );
  },
};
shinobi.dividendmanagementrender = {
    build: function () {
        var object = this;
        object.activeTab();
        object.setUpCalenderDate();
        object.renderAutocompleteStockSearchingBar();
        // object.renderAutocompleteAccountSearchingBar();
        object.filterDividendsStock();
        object.reloadApiFilterButton();

        object.getValueConfigOnModal();
        object.renderShowOrHiddenCheckBox();
        object.renderTableNonConfig();
        object.renderTableConfigged();
    },

    activeTab: function () {
        var pathname = window.location.pathname;
        var tab = document.querySelector(`.tabs-portfolio [href="${pathname}"]`);
        tab.parentNode.classList.add("is-active");

        document.querySelector("#searchingByFilter").setAttribute("style", "border-top-left-radius: 0;");
    },

    openConfigStockModal: function (data) {
        var modal = document.getElementById("configStockModal");
        modal.classList.add("is-active");

        var header = modal.querySelector(".modal-card-title");
        header.innerHTML = `Cấu hình mã cổ phiếu ${data.stockcode}`
        header.setAttribute("value", data.stockcode);
    },

    openConfigAgainStockModal: function (data) {
        var modal = document.getElementById("configStockModal");
        modal.classList.add("is-active");

        var header = modal.querySelector(".modal-card-title");
        header.innerHTML = `Cấu hình lại mã cổ phiếu ${data.stockcode}`
        header.setAttribute("value", data.stockcode);
    },

    renderConfigButtonForNotConfigTable: function (cell, row, col, all) {
        cell.classList.add("has-text-right");
        cell.innerHTML = `
            <div class="button has-bsd  is-small is-link mr-5">Cấu hình</div>
        `;

        var button = cell.querySelector(".button");
        button.onclick = function () {
            shinobi.dividendmanagementrender.openConfigStockModal(all[row]);
        };
    },

    renderConfigButtonForConfiggedTable: function (cell, row, col, all) {
        cell.classList.add("has-text-centered");
        cell.innerHTML = `
            <div class="button has-bsd  is-small is-link">Cấu hình lại</div>
        `;

        var button = cell.querySelector(".button");
        button.onclick = function () {
            shinobi.dividendmanagementrender.openConfigAgainStockModal(all[row]);
        };
    },

    setUpCalenderDate: function () {
        var object = this;
        object.setLabelCalendarPicker("#dividendConfig #searchinghistory input")
    },

    setLabelCalendarPicker: function (selector) {
        var object = this;
        var data = {
            start: `2000/1/1`,
            end: `${new Date().getFullYear()}/${new Date().getMonth() + 1}/${new Date().getDate()}`
        };
        object.calendar = bulmaCalendar.attach(selector,
            {
                'dateFormat': 'DD/MM/YYYY',
                'displayMode': 'dialog',
                closeOnOverlayClick: false,
                'startDate': new Date(data.start),
                'endDate': new Date(data.end),
            });

        // shinobi.util.setRangeCalendar('[snb-key="date"]', new Date(data.start), new Date(data.end));
    },

    renderAutocompleteStockSearchingBar: function () {
        new shinobi.autocomplete('#stockListSearch #autocomplete', {
            onSearch: (input, resolve) => {
                input = input.toUpperCase();

                if (input.length < 1) { resolve([]) }
                var url = "/api/PriceBoardApi/findDataList";
                var request = {
                    "filters": [{ 'colname': 'stocksymbol', 'operator': 'like', 'value': input }]
                }

                shinobi.api.request(url, JSON.stringify(request), function (res) {
                    var array = JSON.parse(res).data;
                    resolve(array);
                });
            },
            autoSelect: true,
            getResultValue: result => {
                return result.stocksymbol
            },
            onSubmit: (result) => {
                document.querySelector("#stockListSearch #autocomplete").value = result.stocksymbol;
            },
            renderResult: (result, props) => {
                return `
                      <li ${props}>
                          <div class="title has-text-primary is-size-5">
                         ${result.stocksymbol}
                          </div>
                          <div class="subtitle">${result.securityname}</div>
                      </li>`
            },
        });
    },

    getValueConfigOnModal: function () {
        var url = "/authenapi/DividendApi/configDividend";
        var request = {};

        var button = document.querySelector("#configStockModal #saveConfigModal");
        button.onclick = function () {
            var jsonCheckbox = shinobi.dividendmanagementrender.checkConfigCheckBox();
            if (Object.keys(jsonCheckbox).length) {
                shinobi.dividendmanagementrender.getValueConfig("#configStockModal #requiredContent", function (json) {
                    shinobi.notification.notification.loading();
                    var configData = Object.assign({}, jsonCheckbox, json);
                    var valueStockCode = document.querySelector("#configStockModal .modal-card-title").getAttribute("value");
                    configData.stockcode = valueStockCode;

                    //SET DEFAULT 
                    configData.cashratio = "1";

                    console.log("configData", configData);
                    request = configData;

                    shinobi.api.request(url, JSON.stringify(request), function (res) {
                        if (res == "update success") {
                            shinobi.notification.notification.info("Cấu hình thành công!");
                            setTimeout(function () {
                                window.location.reload();
                            }, 2000)
                        } else {
                            shinobi.notification.notification.error("Cấu hình thất bại!");
                        }
                    })
                });
            } else {
                shinobi.notification.notification.error("Vui lòng chọn Loại sự kiện!");
            };
        };
    },

    checkConfigCheckBox: function () {
        var returnJson = {};
        var list = document.querySelectorAll(".checkbox.configdividend input");
        list.forEach(elem => {
            if (elem.checked) {
                var value = elem.getAttribute("value");
                var parent = document.querySelector(`.${value}`);
                returnJson[`${value}`] = true;

                var inputChildList = parent.querySelectorAll("[snb-key]");
                inputChildList.forEach(input => {
                    var key = input.getAttribute("snb-key");
                    var valueInput = input.value;
                    returnJson[`${key}`] = valueInput;
                });
            };
        });
        console.log("returnJson", returnJson);
        return returnJson;
    },

    getValueConfig: function (selector, callback) {
        shinobi.mapping.getValue(selector, function (request) {
            !Object.values(request).includes("") ? callback(request) : shinobi.util.fillInputMessage();
        }, {
            checkEmpty: true,
        })
    },

    renderShowOrHiddenCheckBox: function () {
        var list = document.querySelectorAll(".checkbox.configdividend input");
        list.forEach(elem => {
            elem.onclick = function () {
                var value = elem.getAttribute("value");
                if (elem.checked) {
                    var listInputContainer = document.querySelectorAll(`.input${value}`);
                    listInputContainer.forEach(elemInput => {
                        elemInput.classList.remove("is-hidden");
                    });
                } else {
                    var listInputContainer = document.querySelectorAll(`.input${value}`);
                    listInputContainer.forEach(elemInput => {
                        elemInput.classList.add("is-hidden");
                    });
                }
            }
        });
    },

    renderTableNonConfig: function () {
        var tableId = "dividendNotConfigTable"
        var url = "/authenapi/DividendApi/getNoneConfiguredList";

        var colNames = shinobi.tableHelper.getColname(tableId);
        var renders = shinobi.tableHelper.getRender(tableId);

        if (!shinobi.dividendmanagementrender.nonConfigTable) {
            shinobi.dividendmanagementrender.nonConfigTable = new shinobi.table(tableId);
        }

        var request = {
            recordPerPage: shinobi.util.getRecordNumber(tableId),
        }

        shinobi.dividendmanagementrender.nonConfigTable.initLoadApi(url, request, colNames, renders);
    },

    renderTableConfigged: function () {
        var tableId = "dividendConfiggedTable"
        var url = "/authenapi/DividendApi/getAlreadyConfigList";

        var colNames = shinobi.tableHelper.getColname(tableId);
        var renders = shinobi.tableHelper.getRender(tableId);

        if (!shinobi.dividendmanagementrender.configgedTable) {
            shinobi.dividendmanagementrender.configgedTable = new shinobi.table(tableId);
        }

        var request = {
            recordPerPage: shinobi.util.getRecordNumber(tableId),
        }

        shinobi.dividendmanagementrender.configgedTable.initLoadApi(url, request, colNames, renders);
    },

    renderCashDividendDescription: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.classList.add("has-text-right");

        if (all[row].cashdividend || all[row].cashdividend == "true") {
            cell.innerHTML = `${JSON.parse(value).ratio}`;
        }
    },

    renderStockdividendDescription: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.classList.add("has-text-right");

        if (all[row].stockdividend || all[row].stockdividend == "true") {
            cell.innerHTML = `${JSON.parse(value).stockDividendBasis} Cổ : ${JSON.parse(value).stockDividendReward} Cổ`;
        }
    },

    renderCallOptiondDescription: function (cell, row, col, all) {
        var value = cell.innerHTML;
        cell.classList.add("has-text-right");

        if (all[row].calloption || all[row].calloption == "true") {
            cell.innerHTML = `${JSON.parse(value).callOptionsBasis} Cổ : ${JSON.parse(value).callOptionsReward} Cổ`;
        }
    },

    filterDividendsStock: function () {
        var idContainer = '#searchingByFilter';
        var buttonFilter = document.getElementById('searchOrderCommand');
        buttonFilter.onclick = function () {
            shinobi.mapping.getValue(idContainer, function (data) {
                console.log('data', data);
                var dataFilters = [];
                if (data.stocksymbol) {
                    dataFilters.push({
                        "colname": "stockcode", "operator": "=", "value": data.stocksymbol
                    });

                    if (data.date.beginDate) {
                        dataFilters.push({
                            "colname": "detectdate", "operator": ">=", "value": data.date.beginDate
                        });
                        if (data.date.endDate != 'NaN-NaN-NaN') {
                            dataFilters.push({
                                "colname": "detectdate", "operator": "<=", "value": data.date.endDate
                            });
                        }
                    }
                    console.log('dataFilters', dataFilters);
                    shinobi.dividendmanagementrender.filterAndReloadTwoTable(dataFilters);
                    shinobi.operationsmanagementrender.renderFilterButton(true);
                } else {
                    shinobi.notification.notification.error("Vui lòng nhập mã cần tìm kiếm!");
                }
            })
        }
    },

    reloadApiFilterButton: function () {
        var cancelFilter = document.getElementById("cancelfilter");
        cancelFilter.onclick = function () {
            var dataFilters = [];
            shinobi.dividendmanagementrender.filterAndReloadTwoTable(dataFilters);

            shinobi.operationsmanagementrender.renderFilterButton(false);
        };
    },

    filterAndReloadTwoTable: function (dataFilters) {
        shinobi.dividendmanagementrender.configgedTable.staticfilters = dataFilters;
        shinobi.dividendmanagementrender.nonConfigTable.staticfilters = dataFilters;

        shinobi.dividendmanagementrender.configgedTable.reloadApi();
        shinobi.dividendmanagementrender.nonConfigTable.reloadApi();
    },
};shinobi.exportexcelrender = {
	containerId : 'adminDepositRequestContainer',
	title:'DEPOSIT',
	exportExcelApi : shinobi.coreapi.systemDepositApi + 'exportExcel',
	/*exportCurrentApi : shinobi.coreapi.depositRequestReportToExcelReportApi + 'doRenderDepositRequestReport',
	exportAllApi : shinobi.coreapi.depositRequestReportToExcelReportApi + 'doRenderDepositRequestReportAll',*/
	
	'init' : function() {
		/*shinobi.exportexceldepositrequestrender.addExportExcelCurrentPage();
		shinobi.exportexcelrender.addExportExcelAllPages();*/
		shinobi.exportexcelrender.addExportExcel();
		
	},
	addExportExcel : function(){
		var container = document.getElementById(shinobi.exportexcelrender.containerId);
		var button = container.querySelector('.export-excel');
		
		button.addEventListener("click", function(){			
			var excelUrl = shinobi.exportexcelrender.exportExcelApi;
			
			console.log(excelUrl);
			
			shinobi.exportfile.exportFile(excelUrl, {}, {});
			
		});
		
	},
	/*addExportExcelCurrentPage : function(callback) {
		var container = document.getElementById(shinobi.exportexcelrender.containerId);
		var button = container.querySelector('.export-current-page');
		var excelUrl = shinobi.exportexcelrender.exportCurrentApi;
		
		var activeTab = container.querySelector('.tabs').querySelector('.is-active');
		
		button.onclick = function() {
			
			var request = {
				tabname : shinobi.exportexcelrender.title + '_' + shinobi.util.getSearchParam('status'),
				tabcode : shinobi.util.getSearchParam('status')
			};
			
			shinobi.exportfile.exportFile(excelUrl, request, {});
		}
	},
	
	addExportExcelAllPages : function(callback){
		var container = document.getElementById(shinobi.exportexcelrender.containerId);
		var button = container.querySelector('.export-all-page');
		var excelUrl = shinobi.exportexcelrender.exportAllApi;
		
		var tabs = container.querySelector('.tabs').querySelectorAll('li');
		
		var reportRequestList = [];
		for (var i = 0 ; i < tabs.length; i++){
			var tab = tabs[i];
			
			var href = window.location.origin + tab.querySelector('a').getAttribute('href');
			var url = new URL(href);
			var tabCode = url.searchParams.get("status");
			
			if (JSON.stringify(tabCode) !== ''){
				var tabInfo = {
						tabname : shinobi.exportexcelrender.title + "_" +tabCode,
						tabcode : tabCode
					};
				reportRequestList.push(tabInfo);
			}
		}
		var request = {reportRequestList};
		
		button.onclick = function() {
			shinobi.exportfile.exportFile(excelUrl, request, {});
		}
	},*/
	
};shinobi.forgotpasswordrender = {
	
	submitButtonSelector : '#submit',
	containerSelector : '.is-forgot-password',
	
	'init' : function(){
		shinobi.forgotpasswordrender.addEventSubmit();
	},	
	
	'addEventSubmit' : function() {
		var submitButton = document.querySelector(shinobi.forgotpasswordrender.submitButtonSelector);
		shinobi.forgotpasswordrender.addEventWhenClick(submitButton);
		shinobi.forgotpasswordrender.addEventWhenEnter(submitButton);
	},

	'addEventWhenClick' : function(elem) {
		elem.onclick = function() {
			shinobi.forgotpasswordrender.request();
		}
	},

	'addEventWhenEnter' : function(elem) {
		elem.addEventListener('keypress', function(e) {
			var key = e.which || e.keyCode;
			if (key === 13) {
				shinobi.forgotpasswordrender.request();
			}
		});
	},

	'request' : function() {
		var emailInput = document.querySelector('input[snb-key="email"]');
		if (emailInput.value.trim() == "") {
			shinobi.notification.notification.error("Nhập đầy đủ thông tin!");
			return;
		} else {
			var request = {};
			request.email = emailInput.value.trim();
			shinobi.notification.notification.loading();
			shinobi.api.request(shinobi.coreapi.userApi
					+ 'sendForGetPasswordEmail', JSON.stringify(request),
					function(data) {
						if (data == "update success") {
							shinobi.notification.notification.loaded();
							shinobi.mapping.renderElement(document
									.querySelector(shinobi.forgotpasswordrender.containerSelector),
									request);
						}
					});
		}
	},
	
	'showNoteField' : function(elem, value, all) {
		elem.classList.remove('is-hidden');
	},

	'disableInputAndButton' : function(elem, value, all) {
		elem.setAttribute('disabled', true);
		var submitButton = document.querySelector(shinobi.forgotpasswordrender.submitButtonSelector);
		submitButton.setAttribute('disabled', true);
	},
};shinobi.fragmentfindandaddaccountmanagementrender = {
    build: function () {
        // shinobi.fragmentfindandaddaccountmanagementrender.activeModal();
        shinobi.fragmentfindandaddaccountmanagementrender.activeTab();
        shinobi.fragmentfindandaddaccountmanagementrender.activeMenu();
        shinobi.fragmentfindandaddaccountmanagementrender.renderEventCreateButton();
        shinobi.fragmentfindandaddaccountmanagementrender.renderEventSaveButton();
        shinobi.fragmentfindandaddaccountmanagementrender.renderAutocompleteSearchingBar();
    }, getListPMAllotment: function (id = 'listpmusername') {
        var url = "/authenapi/PmManagementApi/findDataList";
        var idDatalist = id;
        var request = {
            recordPerPage: getRecordNumber(idDatalist),
        }
        var datalist = new shinobi.datalist(idDatalist);
        // datalist.staticfilters = [
        //     {
        //         "colname": "systemsubaccount", "operator": "=", "value": allocationaccount
        //     }]
        datalist.initLoadApi(url, request, function () {
            var select = document.getElementById(idDatalist);
            var option = document.createElement('option');
            option.setAttribute('value', 'admin');
            option.innerHTML = "Không có";
            option.selected = true;
            select.insertBefore(option, select.firstChild);
        });
    },
    renderFullnameAllocation: function (elem, value, all) {
        elem.setAttribute("value", value);
        elem.innerHTML = all.firstname + " " + all.lastname
    },

    activeModal: function () {
        var button = document.querySelector("#addAccountButton");
        button.onclick = function () {
            shinobi.selfemployedaccountrender.renderCompanySelect();
            var modal = document.querySelector("#addAccountModal");
            modal.classList.add("is-active");
            shinobi.fragmentfindandaddaccountmanagementrender.getListPMAllotment();
            shinobi.fragmentfindandaddaccountmanagementrender.settingCreateAccountModal();
            shinobi.fragmentfindandaddaccountmanagementrender.setUpPasswordInput();
        }
    },

    settingCreateAccountModal: function () {
        var buttonCreate = document.querySelector("#addAccountModal #createModal");
        var buttonSave = document.querySelector("#addAccountModal #saveModal");

        buttonCreate.style.display = "block";
        buttonSave.style.display = "none";

        var title = document.querySelector("#addAccountModal .modal-card-title");
        title.innerText = "Thêm tài khoản Khách hàng";
    },

    activeTab: function () {
        var pathname = window.location.pathname;
        var tab = document.querySelector(`.tabs-portfolio [href="${pathname}"]`);
        tab.parentNode.classList.add("is-active");
    },

    activeMenu: function () {
        var menu = document.querySelector(".menu-left .menu-list .is-active");
        if (menu) {
            menu.classList.remove("is-active");
        }

        var activeMenu = document.querySelector(`.menu-left .menu-list [href="/private/accountmanagement"]`);
        activeMenu.classList.add("is-active");
    },

    setUpPasswordInput: function () {
        var inputLoginPassword = document.querySelector("#addAccountModal #loginPassword input");
        var inputOrderPassword = document.querySelector("#addAccountModal #orderPassword input");
        var buttonLoginPassword = document.querySelector("#addAccountModal #loginPassword .button");
        var buttonOrderPassword = document.querySelector("#addAccountModal #orderPassword .button");

        shinobi.fragmentfindandaddaccountmanagementrender.showPassword(buttonLoginPassword, inputLoginPassword);
        shinobi.fragmentfindandaddaccountmanagementrender.showPassword(buttonOrderPassword, inputOrderPassword);
    },

    showPassword: function (showButton, input) {
        input.setAttribute("type", "password");
        showButton.innerHTML = `<i class="fas fa-eye-slash"></i>`;

        showButton.onclick = function () {
            var value = input.getAttribute("type");
            if (value == "password") {
                input.setAttribute("type", "text");
                showButton.innerHTML = `<i class="fas fa-eye"></i>`;
            } else {
                input.setAttribute("type", "password");
                showButton.innerHTML = `<i class="fas fa-eye-slash"></i>`;
            }
        };
    },

    getValue: function (selector, callback) {

        shinobi.mapping.getValue(selector, function (request) {
            console.log('allocationratio', request);
            var json = request;
            delete json['pincode'];
            delete json['allocationratio'];

            !Object.values(json).includes("") ? callback(request) : shinobi.util.fillInputMessage();
        }, {
            checkEmpty: true,
        })
    },

    renderEventCreateButton: function () {
        var object = this;
        var create = document.querySelector("#addAccountModal #createModal");
        create.onclick = function () {
            object.getValue("#addAccountModal", function (json) {
                console.log(json);
                object.createAccount(json, function () {
                    object.addAllocationAccount(json);
                });

            });
        };
    },
    createAccount: function (json, callback) {
        var url = "/authenapi/StockComAccountRegistrationApi/createStockComAccount";
        var request = {
            "stockcom": json.stockcom,
            "account": json.usernameaccount,
            "username": json.usernameaccount,
            "password": json.password,
            "pincode": json.pincode,
            // "userid": json.stockcom,
            "name": json.name,
            "identitynumber": json.identitynumber,
            "email": json.email,
            "phonenumber": json.phonenumber,
        };
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            if (callback) {
                // callback();
                console.log('callback')
            }
        })
    },
    addAllocationAccount: function (json) {
        var url = "/authenapi/StockComAccountRegistrationApi/createStockComAccount";
        var request = {
            "stockcom": json.stockcom,
            "account": json.username,
            "username": json.username,
            "password": json.password,
            "pincode": json.pincode,
            // "userid": json.stockcom,
            "name": json.name,
            "identitynumber": json.identitynumber,
            "email": json.email,
            "phonenumber": json.phonenumber,
        }
        console.log(request);
    },

    renderEventSaveButton: function () {
        var create = document.querySelector("#addAccountModal #saveModal");
        create.onclick = function () {
            shinobi.fragmentfindandaddaccountmanagementrender.getValue("#addAccountModal", function (json) {
                console.log(json);
            });
        };
    },

    renderAutocompleteSearchingBar: function () {
        // var accounts = [
        //     { id: '1333', username: 'PM1', createddate: '10/02/2022' },
        //     { id: '1222', username: 'PM2', createddate: '10/02/2022' },
        //     { id: '3111', username: 'PM3', createddate: '10/02/2022' },
        // ];

        new shinobi.autocomplete('#searchpmuser', {
            onSearch: (input, resolve) => {

                console.log('search');
                if (input.length < 1) { return [] }

                var request = {
                    "filters": [{
                        "colname": "account",
                        "operator": "like",
                        "value": input,
                    }],
                    "sorts": [],
                }
                shinobi.api.request("/authenapi/ClientStockComAccountManagementApi/findDataList", JSON.stringify(request), function (res) {
                    console.log(JSON.parse(res));
                    data = JSON.parse(res).data;
                    resolve(data);
                });
                // var arr = [];
                // accounts.forEach(item => {
                //     if ((item.username.toLowerCase().startsWith(input.toLowerCase()))
                //         || ((item.id.toLowerCase().startsWith(input.toLowerCase())))) {
                //         arr.push(item);
                //     }
                // })
                // resolve(arr);
            },
            renderResult: (result, props) => {
                return `
                <li ${props}>
                    <div class="is-flex">
                        <div>#${result.account}</div>
                    </div>
                </li>`
            },
            onSubmit: (result) => {
                var input = document.getElementById("searchpmuser");
                input.value = result.account;

                shinobi.accountmanagementrender.dataCustomerTable.staticfilters = [{
                    "colname": "account",
                    "operator": "=",
                    "value": result.account,
                }];

                shinobi.accountmanagementrender.dataCustomerTable.reloadApi();
            },
        });
    },
};
shinobi.fragmentfindandaddpmmanagementrender = {
    build: function () {
        shinobi.fragmentfindandaddpmmanagementrender.activeModal();
        shinobi.fragmentfindandaddpmmanagementrender.activeTab();
        shinobi.fragmentfindandaddpmmanagementrender.activeMenu();
        shinobi.fragmentfindandaddpmmanagementrender.renderEventCreateButton();
        shinobi.fragmentfindandaddpmmanagementrender.renderEventSaveButton();
        shinobi.fragmentfindandaddpmmanagementrender.renderAutocompleteSearchingBar();

        var inputLoginPassword = document.querySelector("#addAccountModal #loginPassword input");
        var buttonLoginPassword = document.querySelector("#addAccountModal #loginPassword .button");
        shinobi.fragmentfindandaddaccountmanagementrender.showPassword(buttonLoginPassword, inputLoginPassword);
    },

    activeModal: function () {
        var button = document.querySelector("#addAccountButton");
        button.onclick = function () {
            var modal = document.querySelector("#addAccountModal");
            modal.classList.add("is-active");
            shinobi.fragmentfindandaddpmmanagementrender.settingCreateAccountModal();
        }
    },

    settingCreateAccountModal: function () {
        var buttonCreate = document.querySelector("#addAccountModal #createModal");
        var buttonSave = document.querySelector("#addAccountModal #saveModal");

        buttonCreate.style.display = "block";
        buttonSave.style.display = "none";

        var title = document.querySelector("#addAccountModal .modal-card-title");
        title.innerText = "Thêm tài khoản PM";
    },

    activeTab: function () {
        var pathname = window.location.pathname;
        var tab = document.querySelector(`.tabs-portfolio [href="${pathname}"]`);
        tab.parentNode.classList.add("is-active");
    },

    activeMenu: function () {
        var menu = document.querySelector(".menu-left .menu-list .is-active");
        if (menu) {
            menu.classList.remove("is-active");
        }

        var activeMenu = document.querySelector(`.menu-left .menu-list [href="/private/accountmanagement"]`);
        activeMenu.classList.add("is-active");
    },

    getValue: function (selector, callback) {
        shinobi.mapping.getValue(selector, function (request) {
            var invitedby = request.invitedby;
            // var json = request;
            delete request['invitedby'];
            var callbackFnc = function (data) {
                if (invitedby) {
                    data.invitedby = invitedby;
                }
                callback(data);
            };
            !Object.values(request).includes("") ? callbackFnc(request) : shinobi.util.fillInputMessage();

        }, {
            checkEmpty: true,
        })
    },

    renderEventCreateButton: function () {
        var object = this;
        var url = "/authenapi/PmManagementApi/createPmUser";
        var create = document.querySelector("#addAccountModal #createModal");
        create.onclick = function () {
            shinobi.fragmentfindandaddpmmanagementrender.getValue("#addAccountModal", function (json) {
                json.isvalidated = 'true';
                console.log(json);
                shinobi.api.request(url, JSON.stringify(json), function (res) {
                    shinobi.notification.notification.info('Tạo tài khoản PM thành công !');
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                });
            });
        };
    },


    renderEventSaveButton: function () {
        var create = document.querySelector("#addAccountModal #saveModal");
        create.onclick = function () {
            shinobi.fragmentfindandaddpmmanagementrender.getValue("#addAccountModal", function (json) {
                console.log(json);
            });
        };
    },

    renderAutocompleteSearchingBar: function () {
        new shinobi.autocomplete('#autocomplete', {
            onSearch: (input, resolve) => {

                console.log('search');
                if (input.length < 1) { return [] }

                var request = {
                    "filters": [{
                        "colname": "loginusername",
                        "operator": "like",
                        "value": input,
                    }],
                    "sorts": [],
                }
                shinobi.api.request("/authenapi/PmManagementApi/findDataList", JSON.stringify(request), function (res) {
                    data = JSON.parse(res).data;
                    resolve(data);

                });
            },
            renderResult: (result, props) => {
                return `
                <li ${props}>
                    <div class="is-flex">
                        <div>#${result.loginusername}</div>
                        <div><${result.firstname} ${result.lastname}></div>
                    </div>
                </li>`
            },
            onSubmit: (result) => {
                var input = document.getElementById("autocomplete");
                input.value = result.loginusername;

                shinobi.pmmanagementrender.pmmanagementboard.staticfilters = [{
                    "colname": "loginusername",
                    "operator": "=",
                    "value": result.loginusername,
                }];

                shinobi.pmmanagementrender.pmmanagementboard.reloadApi();
            },
        });
    },
};
shinobi.fragmentpermissionrender = {

	'build' : function() {

		var pathName = window.location.pathname;
		var pathNameSplit = pathName.split('/');

		console.log(pathNameSplit.length)

		if (pathNameSplit.length > 3) {

			var notificationContent = '';

			for (var i = 3; i < pathNameSplit.length; i++) {

				notificationContent += '/' + pathNameSplit[i];

				console.log(notificationContent)
			}

			var messageContent = document
					.getElementById('messageContentPermissionId');
			messageContent.innerHTML = ' ' + notificationContent;
		}
	}

};shinobi.holidaymanagementrender = {
    multivalueinput: '',
    init: function () {
        shinobi.holidaymanagementrender.createStructure(function () {
            shinobi.holidaymanagementrender.confirmOffDate();
            shinobi.holidaymanagementrender.activeTab();
        });
    },

    activeTab: function () {
        getUserInfo(function (response) {
            var infoUser = response;
            var usertype = infoUser.usertype;
            var tab = document.querySelector(`#menuleft [value="${usertype}"] a[href="/private/holidaymanagement"`);
            tab.classList.add("is-active");
        });
    },

    createStructure: function (callback) {
        shinobi.holidaymanagementrender.getDayoffList(function (response) {
            shinobi.holidaymanagementrender.multivalueinput = new shinobi.multivalueinput(
                'input[snb-key="datelist"]', {
                buildSearch: function (object) {

                    object.inputSearch.setAttribute('placeholder', 'Thêm ngày');
                    object.inputSearch.setAttribute('type', 'date');

                    shinobi.util.addEventEnter(object.inputSearch, function () {
                        shinobi.holidaymanagementrender.appendChildItem(object);
                    });
                    object.inputSearch.onblur = function () {
                        shinobi.holidaymanagementrender.appendChildItem(object);
                    };
                },
                renderItem: function (result) {
                    return shinobi.util.reverseFormatDate(result.substring(1, result.length - 1), {
                        format: 'dd/MM/yyyy',
                        reverseFormat: 'yyyy-MM-dd'
                    });
                },
                setListResult: function (input) {
                    var dateoffList = response;
                    return dateoffList;
                }
            });
        });

        if (callback) {
            callback();
        }
    },

    getDayoffList: function (callback) {
        shinobi.api.request("/authenapi/SystemConfigApi/getTradingOffDate", '{}', function (res) {
            res = JSON.parse(res);
            dateoff = JSON.parse(res).dateoff;

            if (callback) {
                callback(dateoff);
            }
        });
    },

    appendChildItem: function (object) {
        var result = object.inputSearch.value.trim();
        if (result.length >= 10) {
            object.appendChildItem(result, object);
            object.inputSearch.value = '';
        }
    },

    getDateList: function (input) {
        if (input.trim() == '') {
            return [];
        } else {
            var list = input.split(',');
            list.forEach(function (item, index) {
                console.log(item);
                list[index] = item.substring(1, item.length - 1);
            })
            return list;
        }
    },

    renderListInput: function (elem, value, all) {
        var object = shinobi.holidaymanagementrender.multivalueinput;
        elem.value = value;
        var listItem = value;
        shinobi.holidaymanagementrender.resetElemMultivalue();

        listItem.forEach(result => {
            shinobi.holidaymanagementrender.multivalueinput.appendChildItem(result, object);
        });

    },

    confirmOffDate: function () {
        var button = document.getElementById("confirm");
        button.onclick = function () {
            var result = shinobi.holidaymanagementrender.multivalueinput.result;
            var dateList = [];
            result.forEach(date => {
                date = JSON.parse(date);
                dateList.push(date);
            });

            var url = "/authenapi/SystemConfigApi/updateTradingOffDate";
            var request = {
                "tradingDateOffString": JSON.stringify(dateList),
            };

            shinobi.notification.notification.loading();
            if (request.tradingDateOffString != '[]') {
                shinobi.api.request(url, JSON.stringify(request), function (res) {
                    console.log(res);

                    if (res == 'update success') {
                        shinobi.notification.notification.loaded();
                        shinobi.notification.notification.info("Cập nhật thành công");
                        setTimeout(function () {
                            window.location.reload();
                        }, 1500)
                    }
                })
            } else {
                shinobi.notification.notification.error("Ngày không hợp lệ!");
            }
        }
    },
};shinobi.loginrender = {
	init : function() {
		shinobi.loginrender.redirectIndex();
	},
	redirectIndex : function(){
		window.location.href = '/';
	},
	gotoLoginPage : function(){
		window.location.href = '/page/login';
	},
};shinobi.logintemplate = {
    build: function () {
        // autoRedirectMobile();
        shinobi.logintemplate.redirectDashboardWhenLogged();
        // shinobi.logintemplate.redirectDownloadAppMobile();
        shinobi.logintemplate.checkHasNoti();
        var submit = document.getElementById("submit");

        submit.addEventListener("click", function () {
            shinobi.logintemplate.login();
        });

        shinobi.logintemplate.autoCompleteWhenNewAccount();
        shinobi.logintemplate.sendOTPCode();
        document.querySelector('#ipUsername').addEventListener('keypress',
            function (e) {
                var key = e.which || e.keyCode;
                if (key === 13) {
                    shinobi.logintemplate.login();
                }
            });
        document.querySelector('#ipPassword').addEventListener('keypress',
            function (e) {
                var key = e.which || e.keyCode;
                if (key === 13) {
                    shinobi.logintemplate.login();
                }
            });
        document.querySelector('#ipOtpCode').addEventListener('keypress',
            function (e) {
                var key = e.which || e.keyCode;
                if (key === 13) {
                    shinobi.logintemplate.login();
                }
            });



    },
    autoCompleteWhenNewAccount: function () {
        var search = shinobi.util.getAllSearchInPath();
        var username = document.getElementById('ipUsername');
        var password = document.getElementById('ipPassword');

        if (search.hasOwnProperty('loginname')) {

            username.value = search.loginname;

        }
    },
    'redirectDownloadAppMobile': function () {
        var userAgent = navigator.userAgent || navigator.vendor || window.opera;
        // Windows Phone must come first because its UA also contains
        // "Android"
        if (/android/i.test(userAgent)) {
            window.location.href = "https://play.google.com/store/apps/details?id=com.aladinmobile.aladin";
        }
        // iOS detection from: http://stackoverflow.com/a/9039885/177710
        if (/iPhone|iPod/.test(userAgent) && !window.MSStream) {
            window.location.href = "https://apps.apple.com/app/id1474783146";
        }
    },
    'checkHasNoti': function () {
        var search = window.location.search.split('?');
        for (var i = 0; i < search.length; i++) {
            var key = 'noti=';
            if (search[i].includes(key)) {
                var content = search[i].replace(key, '');
                if (content == 'registrationsuccess') {
                    shinobi.notification.notification
                        .info('Mở tài khoản thành công. Vui lòng đăng nhập lại. ');
                }
            }
        }
    },
    'redirectDashboardWhenLogged': function () {
        shinobi.coreapi
            .checkNotCacheAuthen(function (response) {
                // console.log(response);

                if (response) {
                    shinobi.logintemplate.redirectAffterLogin();
                }
            });
    },
    redirectAffterLogin: function () {
        getUserInfo(function (res) {
            if (res.usertype == "SUPERADMIN") {
                window.location.pathname = "/private/selfemployedaccount";
            } else {
                if (res.usertype == "PM") {
                    window.location.pathname = "/private/tradingsystem";
                } else {
                    if (res.usertype == "PMALADIN") {
                        window.location.pathname = "/private/tradingsystem";
                    }

                }

            }
        })
    },
    login: function () {
        var username = document.getElementById('ipUsername');
        var password = document.getElementById('ipPassword');
        var otpcode = document.getElementById('ipOtpCode');

        if (username.value.trim() == "" || password.value.trim() == "" || otpcode.value.trim() == "") {
            [
                {
                    input: username,
                    name: 'Tên đăng nhập'
                },
                {
                    input: password,
                    name: 'Mật khẩu'
                },
                {
                    input: otpcode,
                    name: 'OTP'
                },
            ].forEach((item) => {
                if (item.input.value.trim() == "") {
                    shinobi.notification.notification
                        .error(`Vui lòng nhập đầy đủ thông tin ${item.name}!!`);
                }
            })
            return;
        } else {
            var login = {};
            login.username = username.value.trim();
            login.password = shinobi.util.sha256(password.value.trim());
            login.secureinfo = otpcode.value.trim();
            shinobi.notification.notification.loading();
            shinobi.logintemplate.requestLogin(login, "/login");
        }
    },
    requestLogin: function (login, loginurl) {

        shinobi.api
            .request(
                loginurl,
                JSON.stringify(login),
                function (data) {
                    if (data == "authen success") {
                        var request = {};
                        shinobi.logintemplate.redirectAffterLogin();
                    } else {
                        shinobi.notification.notification
                            .error("Tài khoản hoặc mật khẩu sai!!!");
                        return;
                    }
                });

    },
    sendOTPCode: function () {
        var sendButton = document.getElementById("sendOTPLogin");
        sendButton.onclick = function () {
            var username = document.getElementById("ipUsername").value;
            if (username) {
                var url = "/api/AuthenLoginByOptEmailApi/sendOtp"
                var request = {
                    "username": username,
                }
                shinobi.api.request(url, JSON.stringify(request), function (res) {
                    console.log(res);
                    shinobi.notification.notification.info("Gửi thành công!")
                });
            } else {
                shinobi.notification.notification.error("Cần nhập tên đăng nhập để gửi mã OTP!")
            }
        };
    },
};shinobi.notificationdetailrender = {
    init: function() {
        shinobi.notificationdetailrender.renderNotiContent();
    },
    renderNotiContent: function() {
        console.log('render');

    }
};shinobi.operationsmanagementrender = {
    build: function () {
        var object = this;
        object.activeTab();
        object.renderOperationsList();
        object.renderTypeSelector();
        object.renderSearchingButton();
        object.setLabelCalendarPicker();
        object.reloadApiFilterButton();
    },

    activeTab: function () {
        getUserInfo(function (response) {
            var infoUser = response;
            var usertype = infoUser.usertype;
            var tab = document.querySelector(`#menuleft [value="${usertype}"] a[href="/private/operationsmanagement"`);
            tab.classList.add("is-active");
        });
    },

    renderOperationsList: function () {
        let idTable = "dataContainer";
        var url = "/authenapi/UserAcivityApi/findDataList";

        var colNames = shinobi.tableHelper.getColname(idTable);
        var renders = shinobi.tableHelper.getRender(idTable);

        var request = {
            recordPerPage: shinobi.util.getRecordNumber(idTable),
        };

        if (!shinobi.operationsmanagementrender.dataContainer) {
            shinobi.operationsmanagementrender.dataContainer = new shinobi.table(idTable);
        };

        shinobi.operationsmanagementrender.dataContainer.staticsorts = [{
            colname: "createddate",
            value: "desc",
        }];

        // shinobi.operationsmanagementrender.dataContainer.initLoadApi(url, request); // use for datalist
        shinobi.operationsmanagementrender.dataContainer.initLoadApi(url, request, colNames, renders);

        // shinobi.api.request(url, JSON.stringify(request), function (res) {
        //     res = JSON.parse(res);
        //     console.log(res);
        //     var data = res.data;

        //     // //CREATE VALUE TO FILTER DATE
        //     // var date = [];
        //     // var check;
        //     // data.forEach(elem => {
        //     //     var dayList = {
        //     //         createddate: `${new Date(elem.createddate).getDate()}/${new Date(elem.createddate).getMonth() + 1}/${new Date(elem.createddate).getFullYear()}`,
        //     //         outputdate: `${new Date(elem.createddate).getDate()} Tháng ${new Date(elem.createddate).getMonth() + 1}, ${new Date(elem.createddate).getFullYear()}`,
        //     //     };
        //     //     if (!check) {
        //     //         check = dayList.createddate;
        //     //         date.push(dayList);
        //     //     } else {
        //     //         if (check != dayList.createddate) {
        //     //             check = dayList.createddate;
        //     //             date.push(dayList);
        //     //         } else {

        //     //         };
        //     //     };
        //     // });
        //     // shinobi.operationsmanagementrender.dataContainer.renderTable(date);
        // });
    },

    renderNameOperations: function (cell, row, col, all) {
        value = cell.innerHTML;
        if (shinobi.operationsmanagementrender.titleOperation.hasOwnProperty(value)) {
            cell.innerHTML = shinobi.operationsmanagementrender.titleOperation[value];
        };

    },

    titleOperation: {
        "ALL": 'TẤT CẢ',
        "LOGIN": "ĐĂNG NHẬP",
        "LOGOUT": "ĐĂNG XUẤT",
        "SYSTEM_FORCE_LOGOUT_ALL": "ĐĂNG XUẤT TẤT CẢ",
        "CREATE_USER": "TẠO TÀI KHOẢN",
        "CREATE_STOCK_COM_ACCOUNT": "TẠO TÀI KHOẢN TỰ DOANH",
        "CONFIG_CLIENT_ALLOCATION": "CẤU HÌNH PHÂN BỔ KHÁCH HÀNG",
        "CONFIG_ORIGIN_ALLOCATION": "CẤU HÌNH PHÂN BỔ TỰ DOANH",
        "FOLLOW_TRADING": "THEO DÕI ĐẶT LỆNH",
        "UNFOLLOW_TRADING": "BỎ THEO DÕI ĐẶT LỆNH",
        "PLACE_ORIGINAL_SIGNAL": "ĐẶT LỆNH",
        "CANCEL_ORIGINAL_SIGNAL": "HỦY LỆNH",
        "FOLLOW_SIGNAL": "THEO TÍN HIỆU",
        "FOLLOW_CANCEL_SIGNAL": "THEO TÍN HIỆU HUỶ",
        "VPS_PAYMENT_AUDIT": "KIỂM TOÁN THANH TOÁN VPS",
        "CONFIG_INCREASE_ALLOCATION_AMOUNT_BY_CASH": "CẤU HÌNH TĂNG VỐN PHÂN BỔ CHO TIỂU KHOẢN",
        "INCREASE_ALLOCATION_AMOUNT_BY_CASH": "TĂNG VỐN PHÂN BỔ CHO TIỂU KHOẢN",
    },

    renderTypeSelector: function () {
        let datalistId = "titleoperationsselector";

        if (!shinobi.operationsmanagementrender.titleoperationsselector) {
            shinobi.operationsmanagementrender.titleoperationsselector = new shinobi.datalist(datalistId);
        };

        var listKeys = Object.entries(shinobi.operationsmanagementrender.titleOperation);
        for (var index = 0; index < listKeys.length; index++) {
            listKeys[index] = {
                value: listKeys[index][0],
                name: listKeys[index][1],
            };
        }

        shinobi.operationsmanagementrender.titleoperationsselector.renderTable(listKeys);
    },

    renderEachElemSelector: function (elem, value, all) {
        elem.innerHTML = all.name;
        elem.setAttribute('value', all.value);
    },

    renderSearchingButton: function () {
        var button = document.getElementById("searchingButton");
        button.onclick = function () {
            var selector = document.getElementById("titleoperationsselector").value;
            var historydate;

            if (selector) {
                try {
                    shinobi.mapping.getValue("#searchinghistory", function (res) {
                        historydate = res.date;
                        historydate.beginDate = shinobi.util.reverseFormatDate(historydate.beginDate, {
                            reverseFormat: "dd/MM/yyyy",
                            format: "yyyy-MM-dd",
                        });

                        historydate.endDate = shinobi.util.reverseFormatDate(historydate.endDate, {
                            reverseFormat: "dd/MM/yyyy",
                            format: "yyyy-MM-dd",
                        });
                    });
                } catch (e) {
                    historydate = {};
                }

                var dataFilters = [];
                if (selector != "ALL") {
                    dataFilters.push({
                        "colname": "name",
                        "operator": "=",
                        "value": selector,
                    });
                }
                if (historydate.beginDate) {
                    dataFilters.push({
                        "colname": "createddate",
                        "operator": ">=",
                        "value": historydate.beginDate,
                    });
                    if (historydate.endDate != 'NaN-NaN-NaN') {
                        dataFilters.push({
                            "colname": "createddate",
                            "operator": "<=",
                            "value": historydate.endDate,
                        });
                    };
                };
                console.log("dataFilters", dataFilters);
                shinobi.operationsmanagementrender.dataContainer.staticfilters = dataFilters;
                shinobi.operationsmanagementrender.dataContainer.reloadApi();
                shinobi.operationsmanagementrender.renderFilterButton(true);
            }
        };
    },

    setLabelCalendarPicker: function () {
        var object = this;
        var data = {
            start: `2000/1/1`,
            end: `${new Date().getFullYear()}/${new Date().getMonth() + 1}/${new Date().getDate()}`
        };
        object.calendar = bulmaCalendar.attach('[type="date"]',
            {
                'dateFormat': 'DD/MM/YYYY',
                'displayMode': 'dialog',
                closeOnOverlayClick: false,
                'startDate': new Date(data.start),
                'endDate': new Date(data.end),
            });

        // shinobi.util.setRangeCalendar('[snb-key="date"]', new Date(data.start), new Date(data.end));
    },


    renderFilterButton: function (show) {
        var cancelFilter = document.getElementById("cancelfilter");
        if (show) {
            cancelFilter.classList.remove("is-hidden");
        } else {
            cancelFilter.classList.add("is-hidden");
        }
    },

    reloadApiFilterButton: function () {
        var cancelFilter = document.getElementById("cancelfilter");
        cancelFilter.onclick = function () {
            shinobi.operationsmanagementrender.dataContainer.staticfilters = [];

            document.getElementById("titleoperationsselector").value = "ALL";

            shinobi.operationsmanagementrender.dataContainer.reloadApi();

            shinobi.operationsmanagementrender.renderFilterButton(false);
        };
    },
};shinobi.ordercommandmanagementrender = {
    calendar: '',
    build: function () {
        shinobi.ordercommandmanagementrender.activeTab();

        // erase 
        // shinobi.ordercommandmanagementrender.renderMoreButton();
        // shinobi.ordercommandmanagementrender.renderChildOrderCommand();
        shinobi.ordercommandmanagementrender.renderOrderCommandTable();
        shinobi.ordercommandmanagementrender.renderSelfEmployedSelector();
        // shinobi.ordercommandmanagementrender.renderPmSelector();
        shinobi.ordercommandmanagementrender.renderSearchingButton();
        shinobi.ordercommandmanagementrender.setLabelCalendarPicker();
        shinobi.ordercommandmanagementrender.renderAutocompleteSearchingBar();
        shinobi.ordercommandmanagementrender.reloadApiFilterButton();
    },

    activeTab: function () {
        getUserInfo(function (response) {
            var infoUser = response;
            var usertype = infoUser.usertype;
            var tab = document.querySelector(`#menuleft [value="${usertype}"] a[href="/private/ordercommandmanagement"`);
            tab.classList.add("is-active");
        });
    },

    renderMoreButton: function (cell, row, col, all) {
        var seeDetailOrderButton =
            `
        <a class="dropdown-item see-detail-order pr-4">
            Chi tiết lệnh
        </a>
        `

        cell.innerHTML = `
              <div class="has-text-centered">    
                <div class="dropdown is-right more-button">
                  <div class="dropdown-trigger">
                    <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                        <span><i class="fas fa-ellipsis-v"></i></span>
                    </button>
                </div>
                <div class="dropdown-menu" id="dropdown-menu" role="menu">
                    <div class="dropdown-content">
                        <a class="dropdown-item pr-4" onclick="shinobi.ordercommandmodal.openModalAddChildCommand()">
                            Thêm lệnh
                        </a>
                        ${seeDetailOrderButton}
                        <a class="dropdown-item pr-4">
                            Xoá
                        </a>
                    </div>
                  </div>
                </div>
            </div>`

        var button = cell.querySelector(".see-detail-order");
        button.onclick = function () {
            shinobi.ordercommandmanagementrender.modalSeeDetailOrderCommand(all[row]);
        };

        var dropdown = cell.querySelector('.dropdown');
        dropdown.onclick = function () {
            dropdown.classList.toggle('is-active');
        };
    },

    renderChildOrderCommand: function (cell, row, col, all) {
        cell.innerHTML = `
            <div class="button is-borderless has-background-transparent is-fullwidth level">
                <div class="has-margin-block-auto">${all[row].fullname}</div>
                <div class="has-margin-block-auto pl-2" value="closed">               
                    <i class="fal fa-angle-down"></i>
                </div>
            </div>
        `
        shinobi.ordercommandmanagementrender.renderChildDetailButton(cell, row, col, all);
    },

    renderSeeDetail: function (elem) {

    },

    renderOrderCommandTable: function () {
        var idTable = "linkedpmaccounttable";

        var colNames = shinobi.tableHelper.getColname(idTable);
        var renders = shinobi.tableHelper.getRender(idTable);

        url = "/authenapi/OriginalSignalHistoryApi/findDataList";
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(idTable),
        };

        if (!shinobi.ordercommandmanagementrender.ordercommandTable) {
            var table = new shinobi.table(idTable);
            shinobi.ordercommandmanagementrender.ordercommandTable = table;
        }

        shinobi.ordercommandmanagementrender.ordercommandTable.staticsorts = [{
            "colname": "createddate",
            "value": "desc"
        }];

        shinobi.ordercommandmanagementrender.ordercommandTable.initLoadApi(url, request, colNames, renders);
    },

    renderChildDetailButton: function (cell, row, col, all) {
        var button = cell.children[0];
        button.onclick = function () {
            var icon = button.children[1];
            var type = icon.getAttribute("value");
            if (type == 'closed') {
                icon.innerHTML = `<i class="fal fa-angle-up"></i>`;
                icon.setAttribute("value", "opened");

                var parent = cell.parentNode;
                parent.classList.add("is-active");

                shinobi.ordercommandmanagementrender.renderChildDetailBar(cell, row, col, all);
            } else {
                icon.innerHTML = `<i class="fal fa-angle-down"></i>`;
                icon.setAttribute("value", "closed");
                var parent = cell.parentNode;
                parent.classList.remove("is-active");
                shinobi.ordercommandmanagementrender.renderChildDetailBar(cell, row, col, all);
            };
        };
    },

    setValueForEachTrTable: function () {
        var trList = document.querySelectorAll("#linkedpmaccounttable tr");
        for (var n = 0; n < trList.length; n++) {
            trList[n].setAttribute("value", n);
        };
    },

    getDataForChildButton: function (cell, row, col, all, options) {
        var url = "/authenapi/SignalListApi/getSignalList";
        var request = {
            "filters": [{
                "colname": "originalsignalid",
                "operator": "=",
                "value": all[row].originalsignalid
            }],
            "sorts": [],
        }
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            var data = res.data;
            if (data.length) {
                if (options == "actived") {
                    shinobi.ordercommandmanagementrender.renderDataForChildTable(cell, cell.parentNode.parentNode, data);
                } else {
                    shinobi.ordercommandmanagementrender.deleteChildData(cell, data);
                };
            } else {
                console.log("Data is null");
            };
        });
    },

    renderChildDetailBar: function (cell, row, col, all) {
        var parent = cell.parentNode;
        var check = parent.classList.contains("is-active");
        if (check) {
            shinobi.ordercommandmanagementrender.getDataForChildButton(cell, row, col, all, "actived");
        } else {
            shinobi.ordercommandmanagementrender.getDataForChildButton(cell, row, col, all, "");
        };
    },

    renderDataForChildTable: function (cell, tbody, data) {
        for (var index = 0; index < data.length; index++) {
            var tr = document.createElement("tr");
            tr.setAttribute("class", "child-container");
            tr.innerHTML = `
                <td snb-key="fullname" snb-render="shinobi.ordercommandmanagementrender.renderChildChildFullName">                </td>
                <td snb-key="createddate" snb-render="shinobi.roottemplate.renderElemTextCentered">             </td>
                <td snb-key="allocationaccount" snb-render="shinobi.roottemplate.renderElemTextCentered">       </td>
                <td snb-key="allocationratio" snb-render="shinobi.roottemplate.renderElemTextCentered">         </td>
                <td snb-key="orderid" snb-render="shinobi.roottemplate.renderElemTextCentered">                 </td>
                <td snb-key="stockcode" snb-render="shinobi.roottemplate.renderElemTextCentered">               </td>
                <td snb-key="price" snb-render="shinobi.roottemplate.renderElemTextCentered">                   </td>
                <td snb-key="volume" snb-render="shinobi.roottemplate.renderElemTextCentered">                  </td>
                <td class="has-text-centered" snb-key="status" snb-render="shinobi.ordercommandmanagementrender.renderStatusChildSetting">                  </td>
                <td snb-key="description" snb-render="shinobi.ordercommandmanagementrender.formatDescription">        </td>
                <td snb-key="allocationaccount" snb-render="shinobi.ordercommandmanagementrender.renderMoreChildButton"></td>`;
            tbody.appendChild(tr);
            shinobi.mapping.renderElement(tr, data[index]);
            cell.parentNode.parentNode.insertBefore(tr, cell.parentNode.nextSibling);
        };
    },

    renderChildChildFullName(elem, value, all) {
        elem.innerHTML = `<div class="button is-borderless has-background-transparent is-fullwidth level has-padding-left-2rem">
                        ${value}
                        </div>`
    },

    formatDescription: function (elem, value, all) {
        value = shinobi.ordercommandmanagementrender.renderNoticeSub(value);

        elem.innerHTML = `<div class="order-command-notice is-italic"> ${value} </div>`;
    },

    renderMoreChildButton: function (elem, value, all) {
        getUserInfo(function (response) {
            var infoUser = response;
            var usertype = infoUser.usertype;
            var seeDetail = `<a class="container-href is-hidden"></a>`;

            if (usertype == "PMALADIN") {
                seeDetail = `
                <a class="dropdown-item pr-4 container-href">
                    Xem thêm
                </a>`
            };

            var seeDetailOrderButton =
                `
            <a class="dropdown-item see-detail-order pr-4">
                Chi tiết lệnh
            </a>
            `;

            elem.innerHTML = `
            <div class="has-text-centered">    
              <div class="dropdown is-up is-right more-button">
                <div class="dropdown-trigger">
                  <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                      <span><i class="fas fa-ellipsis-v"></i></span>
                  </button>
              </div>
              <div class="dropdown-menu" id="dropdown-menu" role="menu">
                  <div class="dropdown-content">
                        <a class="dropdown-item pr-4" onclick="shinobi.ordercommandmodal.ModifyModalAddChildCommand()">
                          Chỉnh sửa
                        </a>
                        ${seeDetailOrderButton}
                        ${seeDetail}
                        <a class="dropdown-item pr-4">
                          Xoá
                        </a>
                    </div>
                </div>
              </div>
            </div>`

            var setHref = elem.querySelector(".container-href");
            console.log(setHref);

            var button = elem.querySelector(".see-detail-order");
            button.onclick = function () {
                shinobi.ordercommandmanagementrender.modalSeeDetailOrderCommand(all);
            };

            setHref.onclick = function () {
                shinobi.ordercommandmanagementrender.transferTradingPage(all.allocationaccount);
            };

            var dropdown = elem.querySelector('.dropdown');
            dropdown.onclick = function () {
                dropdown.classList.toggle('is-active');
            };

            console.log("usertype", usertype, "seeDetail", seeDetail);
        });
    },

    transferTradingPage: function (allocationaccount) {
        window.location.href = `/private/tradingsystem?allocationaccount=${allocationaccount}`;
    },

    deleteChildData: function (cell, data) {
        var parent = cell.parentNode;

        for (var index = 0; index < data.length; index++) {
            var nextRow = parent.nextSibling;
            var check = nextRow.classList.contains("child-container");
            if (check) {
                nextRow.remove();
            };
        };
    },

    renderSelfEmployedSelector: function () {
        var datalistId = "selfemplyedaccountselection";
        var url = "/authenapi/StockComAccountApi/getListOriginStockComAccount";
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        };
        var datalist = new shinobi.datalist(datalistId);

        shinobi.api.request(url, JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            datalist.renderTable(res);
        });
    },

    renderPmSelector: function () {
        var datalistId = "pmaccountselection";
        var url = "/authenapi/SystemUserApi/getUserInfo";
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        };
        var datalist = new shinobi.datalist(datalistId);

        shinobi.api.request(url, JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            datalist.renderTable(res.data);
        });
    },

    renderFullname: function (elem, value, all) {
        elem.setAttribute("value", value);
        elem.innerHTML = all.fullname;
    },

    renderName: function (elem, value, all) {
        elem.setAttribute("value", value);
        elem.innerHTML = all.name;
    },

    setLabelCalendarPicker: function () {
        var object = this;
        var data = {
            start: `2000/1/1`,
            end: `${new Date().getFullYear()}/${new Date().getMonth() + 1}/${new Date().getDate()}`
        };
        object.calendar = bulmaCalendar.attach('[type="date"]',
            {
                'dateFormat': 'DD/MM/YYYY',
                'displayMode': 'dialog',
                closeOnOverlayClick: false,
                'startDate': new Date(data.start),
                'endDate': new Date(data.end),
            });

        // shinobi.util.setRangeCalendar('[snb-key="date"]', new Date(data.start), new Date(data.end));
    },

    renderSearchingButton: function () {
        getUserInfo(function (response) {
            var infoUser = response;
            var usertype = infoUser.usertype;

            if (usertype == "PMALADIN") {
                shinobi.ordercommandmanagementrender.renderSearchingButtonPMAladin();
            } else if (usertype == "SUPERADMIN") {
                shinobi.ordercommandmanagementrender.renderSearchingButtonSuperAdmin();
            }
        });
    },

    renderSearchingButtonPMAladin: function () {
        document.getElementById("pmListSearch").classList.add("is-hidden");

        var button = document.getElementById("searchOrderCommand");
        button.onclick = function () {
            var selfemplyedaccount = document.getElementById("selfemplyedaccountselection").value;
            var historydate;

            if (selfemplyedaccount) {
                console.log("searched");
                try {
                    shinobi.mapping.getValue("#searchinghistory", function (res) {
                        historydate = res.date;
                        historydate.beginDate = shinobi.util.reverseFormatDate(historydate.beginDate, {
                            reverseFormat: "dd/MM/yyyy",
                            format: "yyyy-MM-dd",
                        });

                        historydate.endDate = shinobi.util.reverseFormatDate(historydate.endDate, {
                            reverseFormat: "dd/MM/yyyy",
                            format: "yyyy-MM-dd",
                        });
                    });
                } catch (e) {
                    historydate = {};
                }
                shinobi.ordercommandmanagementrender.reloadOrderCommandTable(null, selfemplyedaccount, historydate.beginDate, historydate.endDate, "PMALADIN")
            }
        };
    },

    renderSearchingButtonSuperAdmin: function () {
        var button = document.getElementById("searchOrderCommand");
        button.onclick = function () {
            var selfemplyedaccount = document.getElementById("selfemplyedaccountselection").value;
            var pmaccount = document.getElementById("autocomplete").getAttribute('value');
            var historydate;

            if (selfemplyedaccount) {
                console.log("searched");
                try {
                    shinobi.mapping.getValue("#searchinghistory", function (res) {
                        historydate = res.date;
                        historydate.beginDate = shinobi.util.reverseFormatDate(historydate.beginDate, {
                            reverseFormat: "dd/MM/yyyy",
                            format: "yyyy-MM-dd",
                        });

                        historydate.endDate = shinobi.util.reverseFormatDate(historydate.endDate, {
                            reverseFormat: "dd/MM/yyyy",
                            format: "yyyy-MM-dd",
                        });
                    });
                } catch (e) {
                    historydate = {};
                }
                shinobi.ordercommandmanagementrender.reloadOrderCommandTable(pmaccount, selfemplyedaccount, historydate.beginDate, historydate.endDate, "SUPERADMIN")
            }
        };
    },

    reloadOrderCommandTable: function (pmaccount, selfemplyedaccount, beginDate, endDate, type) {
        if (type == "SUPERADMIN") {
            shinobi.ordercommandmanagementrender.reloadOrderCommandTableAsSuperAdmin(pmaccount, selfemplyedaccount, beginDate, endDate);
        }
        if (type == "PMALADIN") {
            shinobi.ordercommandmanagementrender.reloadOrderCommandTableAsPMAladin(selfemplyedaccount, beginDate, endDate);
        }
    },

    reloadOrderCommandTableAsSuperAdmin(pmaccount, selfemplyedaccount, beginDate, endDate) {
        var dataFilters = [];

        dataFilters.push({
            "colname": "allocationaccount",
            "operator": "=",
            "value": selfemplyedaccount,
        });
        if (beginDate) {
            dataFilters.push({
                "colname": "createddate",
                "operator": ">=",
                "value": beginDate,
            });
            if (endDate) {
                dataFilters.push({
                    "colname": "createddate",
                    "operator": "<=",
                    "value": endDate,
                });
            }
        }
        if (pmaccount) {
            dataFilters.push({
                "colname": "placedby",
                "operator": "=",
                "value": pmaccount,
            });
        };
        shinobi.ordercommandmanagementrender.ordercommandTable.staticfilters = dataFilters;
        shinobi.ordercommandmanagementrender.ordercommandTable.reloadApi();
        shinobi.ordercommandmanagementrender.renderFilterButton(true);
    },

    reloadOrderCommandTableAsPMAladin(selfemplyedaccount, beginDate, endDate) {
        if (endDate) {
            shinobi.ordercommandmanagementrender.ordercommandTable.staticfilters = [{
                "colname": "allocationaccount",
                "operator": "like",
                "value": selfemplyedaccount,
            }, {
                "colname": "createddate",
                "operator": ">=",
                "value": beginDate,
            }, {
                "colname": "createddate",
                "operator": "<=",
                "value": endDate,
            }];
        } else {
            shinobi.ordercommandmanagementrender.ordercommandTable.staticfilters = [{
                "colname": "allocationaccount",
                "operator": "like",
                "value": selfemplyedaccount,
            }];
        }
        shinobi.ordercommandmanagementrender.ordercommandTable.reloadApi();
        shinobi.ordercommandmanagementrender.renderFilterButton(true);
    },

    renderAutocompleteSearchingBar: function () {
        // var accounts = [
        //     { id: '1333', username: 'PM1', createddate: '10/02/2022' },
        //     { id: '1222', username: 'PM2', createddate: '10/02/2022' },
        //     { id: '3111', username: 'PM3', createddate: '10/02/2022' },
        // ];

        new shinobi.autocomplete('#autocomplete', {
            onSearch: (input, resolve) => {
                if (input.length < 1) { return [] }

                var request = {
                    "filters": [{
                        "colname": "name",
                        "operator": "like",
                        "value": input,
                    }],
                    "sorts": [],
                }
                shinobi.api.request("/authenapi/SystemUserApi/getUserInfo", JSON.stringify(request), function (res) {
                    data = JSON.parse(res).data;
                    resolve(data);
                });
            },

            renderResult: (result, props) => {
                console.log(result)
                return `
                <li ${props}>
                    <div class="is-flex">
                        <div>${result.name}</div>
                    </div>
                </li>`
            },
            onSubmit: (result) => {
                var input = document.getElementById("autocomplete");
                input.value = result.name;
                input.setAttribute('value', result.username)
            },
        });
    },

    renderStatusSetting: function (cell, row, col, all) {
        switch (all[row].status) {
            case 'EXECUTED':
                all[row].status = "Đã xử lý";
                break;
            case 'INVALID':
                all[row].status = "Không hợp lệ";
                break;
            case 'INPROCESS':
                all[row].status = "Đang xử lý";
                break;


        };
        cell.innerHTML = `<div class="has-text-centered">${all[row].status}</div>`;
    },

    childStatusOrder: {
        "SUCCESS": "Thành công",
        "ERROR": "Thất bại",
        "PENDING": "Chưa xử lý",
        "CANCELED": "Đã huỷ",
    },

    renderStatusChildSetting: function (elem, value, all) {
        if (shinobi.ordercommandmanagementrender.childStatusOrder[`${value}`]) {
            value = shinobi.ordercommandmanagementrender.childStatusOrder[`${value}`];
        };

        if (value == "Thành công") {
            elem.innerHTML = `<div class="has-text-success">${value}</div>`;
        } else if (value == "Thất bại") {
            elem.innerHTML = `<div class="has-text-danger">${value}</div>`;
        } else {
            elem.innerHTML = `<div class="">${value}</div>`;
        }
    },

    noticeOrder: {
        'INVALID_ORIGINAL_SIGNAL': "Tín hiệu gốc không hợp lệ",
        'INVALID_SIGNAL_TYPE': "Loại tín hiệu không hợp lệ",
        'INVALID_USER_PLACING_SIGNAL': "User không được phép đặt lệnh",
        'INVALID_STOCK_CODE': "Mã chứng khoán không hợp lệ",
        'INVALID_PRICE': "Giá không hợp lệ",
        'INVALID_PRICE_STEP': "Bước gía không hợp lệ",
        'ORDER_VOLUME_MUST_BE_GREATER_THAN_MIN_VOLUME': "Khối lượng lệnh phải lớn hơn 100",
        'ORDER_PRICE_MUST_LIES_INSIDE_INTERVAL': "Giá đặt phải nằm trong khoảng giá",
        'ORDER_VOLUME_MUST_BE_GREATER_THAN_ZERO': "Khối lượng lệnh phải lớn hơn 0",
        'INVALID_VOLUME_STEP': "Bước khối lượng không hợp lệ - Khối lượng theo lô 100",
        'INVALID_ORDER_SIDE': "Side không hợp lệ - MUA / BÁN",
        'INVALID_ORDER_TYPE': "Loại không hợp lệ - MUA / BÁN",
        'TRADING_GROUP_NOT_FOUND': "Không tìm thấy nhóm lệnh",
        'STOCK_CODE_NOT_IN_PORTFOLIO': "Mã chứng khoán không có trong danh mục",
        'SIGNAL_VOLUME_MORE_THAN_PORTFOLIO': "Khối lượng lệnh lớn hơn khối lượng thực trong danh mục",
        'SIGNAL_VALUE_MORE_THAN_PURCHASING_POWER': "Sức mua không đủ",
        'CAN_NOT_FIND_ORIGINAL_SIGNAL': "Không tìm thấy tín hiệu gốc",
        'NOT_YOUR_SIGNAL': "Không phải tín hiệu của bạn",
        'CAN_NOT_FIND_ORDER': "Không tìm thấy lệnh",
        'DO_NOT_HAVE_SIGNAL_TO_CANCEL': "Không có lệnh để hủy",
        'CAN_NOT_CREATE_COPYTRADE_SIGNAL_TO_PM_BY_PMALADIN': "Không thể đánh copytrade trên tài khoản PM bằng PMAladin",
        'PLACE_VPS_NORMAL_ORDER_FAILURE': "Không thể đặt lệnh trên VPS",
        'CANCEL_VPS_ORDER_FAILURE': "Huỷ lệnh VPS thất bại",
        'THIS_STOCK_IS_RESTRICTED_FROM_TRADING_FOR_THIS_ACCOUNT': "Mã chứng khoán bị giới hạn giao dịch trên tài khoản này",
        'CALL_VPS_PROXY_API_FAILURE': "Không thể call API của VPS",
    },

    renderNoticeSub: function (value) {
        if (shinobi.ordercommandmanagementrender.noticeOrder[`${value}`]) {
            value = shinobi.ordercommandmanagementrender.noticeOrder[`${value}`];
        };

        return value;
    },

    renderFilterButton: function (show) {
        var cancelFilter = document.getElementById("cancelfilter");
        if (show) {
            cancelFilter.classList.remove("is-hidden");
        } else {
            cancelFilter.classList.add("is-hidden");
        }
    },

    reloadApiFilterButton: function () {
        var cancelFilter = document.getElementById("cancelfilter");
        cancelFilter.onclick = function () {
            shinobi.ordercommandmanagementrender.ordercommandTable.staticfilters = [];

            shinobi.ordercommandmanagementrender.ordercommandTable.reloadApi();

            shinobi.ordercommandmanagementrender.renderFilterButton(false);
        };
    },

    modalSeeDetailOrderCommand: function (data) {
        var modal = document.getElementById("seeDetailOrderModal");
        modal.classList.add("is-active");

        var listSnbkey = document.querySelectorAll("#seeDetailOrderModal [snb-key]");
        listSnbkey.forEach(function (elem) {
            elem.innerHTML = "";
        });

        shinobi.mapping.renderElement(modal, data);
    },

    subSideLeftDetailOrder: function (elem, value, all) {
        var mappingValue = {
            BUY: 'MUA',
            SELL: 'BÁN',
        };

        if (mappingValue[`${value}`]) {
            value = mappingValue[`${value}`];
        };

        elem.innerHTML = `
        <div class="has-text-left">${value}</div>
        `;

        if (value == "MUA") {
            elem.querySelector("div").style.color = "#48c78e";
        } else if (value == "BÁN") {
            elem.querySelector("div").style.color = "#f14668";
        }
    },
};shinobi.ordercommandmodal = {
    build: function () {

    },

    openModalAddChildCommand: function () {
        shinobi.ordercommandmodal.activeModal("addChildOrderCommand");
    },

    ModifyModalAddChildCommand: function () {
        shinobi.ordercommandmodal.activeModal("modifyChildOrderCommand");
    },

    activeModal: function (selector) {
        var modal = document.getElementById(selector);
        modal.classList.add("is-active");
    }
};  shinobi.ordermanagementrender = {
    table: '',
    build: function() {
        shinobi.ordermanagementrender.renderTable();
    },
    renderTable: function() {
        var idTable = 'dataContainer';

        var url = shinobi.coreapi.inprocessOrderApi + 'findDataList';
        var request = {};

        request.recordPerPage = shinobi.util.getRecordNumber(idTable);

        var colNames = shinobi.tableHelper.getColname(idTable);
        var renders = shinobi.tableHelper.getRender(idTable);

        shinobi.ordermanagementrender.table = new shinobi.table(idTable);

        shinobi.ordermanagementrender.table.staticfilters = [];

        var sorts = [];
        sorts[0] = { "colname": "createddate", "value": "desc" };
        shinobi.ordermanagementrender.table.staticsorts = sorts;

        shinobi.ordermanagementrender.table.initLoadApi(url, request, colNames, renders);

    },
    renderButtonCancelOrder: function(cell, row, col, all) {
        var value = cell.innerHTML;
        cell.innerHTML = '';

        var button = document.createElement('a');
        button.setAttribute('class', 'button is-small is-danger');
        button.innerHTML = 'Hủy';

        button.onclick = function() {
            shinobi.notification.notification.loading();
            var url = shinobi.coreapi.systemOrderManagement + 'forceCancelOrder';
            var request = {};
            request.orderid = value;

            shinobi.api.request(url, JSON.stringify(request), function(re) {

                shinobi.ordermanagementrender.table.reloadApi();

            });


        }

        cell.appendChild(button);
    }


};shinobi.pmmanagementrender = {
  build: function () {
    shinobi.pmmanagementrender.changeNameCreateButton();
    shinobi.pmmanagementrender.renderPMTableData();
  },
  shaPassword: function (value) {
    return shinobi.util.sha256(value);
  },

  renderMoreButton: function (cell, row, col, all) {
    cell.innerHTML = `
      <div class="has-text-centered">    
        <div class="dropdown is-up is-right more-button">
          <div class="dropdown-trigger">
            <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                <span><i class="fas fa-ellipsis-v"></i></span>
            </button>
        </div>
        <div class="dropdown-menu" id="dropdown-menu" role="menu">
            <div class="dropdown-content">
                <a class="dropdown-item pr-4 editPMAccount">
                    Chỉnh sửa thông tin
                </a>
                <a class="dropdown-item pr-4 editPMPassword">
                    Chỉnh sửa mật khẩu
                </a>
                <a class="dropdown-item pr-4">
                    Xoá
                </a>
            </div>
          </div>
        </div>
      </div>`


    var dropdown = cell.querySelector('.dropdown');
    dropdown.onclick = function () {
      dropdown.classList.toggle('is-active');
    }

    var editPMAccount = cell.querySelector(".editPMAccount")
    editPMAccount.onclick = function () {
      shinobi.pmmanagementrender.renderModifyButton(all[row]);
    }

    var editPMPassword = cell.querySelector(".editPMPassword")
    editPMPassword.onclick = function () {
      shinobi.pmmanagementrender.renderModifyPasswordButton(all[row]);
    }
  },
  renderModifyButton: function (data) {
    var modal = document.querySelector("#addAccountModal");
    modal.classList.add("is-active");

    shinobi.pmmanagementrender.settingModifyAccountModal(data);
  },

  renderModifyPasswordButton: function (data) {
    var modal = document.querySelector("#changePasswordPMModal");
    modal.classList.add("is-active");

    shinobi.pmmanagementrender.settingModifyPasswordModal(data);
  },

  settingModifyAccountModal: function (data) {
    console.log(data);
    var buttonCreate = document.querySelector("#addAccountModal #createModal");
    var buttonSave = document.querySelector("#addAccountModal #saveModal");

    buttonCreate.style.display = "none";
    buttonSave.style.display = "block";

    var title = document.querySelector("#addAccountModal .modal-card-title");
    title.innerText = "Chỉnh sửa tài khoản " + data.firstname + " " + data.lastname;

    var selector = document.getElementById("addAccountModal");
    shinobi.mapping.renderElement(selector, data);

    buttonSave.onclick = function () {
      shinobi.pmmanagementrender.modifyInfoPMUser(data);
    };
  },

  settingModifyPasswordModal: function (data) {
    var title = document.querySelector("#changePasswordPMModal .modal-card-title");
    title.innerText = "Chỉnh sửa mật khẩu cho " + data.firstname + " " + data.lastname;

    var inputOldPassword = document.querySelector("#changePasswordPMModal #loginOldPassword input");
    var inputNewPassword = document.querySelector("#changePasswordPMModal #loginNewPassword input");
    var buttonOldPassword = document.querySelector("#changePasswordPMModal #loginOldPassword .button");
    var buttonNewPassword = document.querySelector("#changePasswordPMModal #loginNewPassword .button");

    shinobi.fragmentfindandaddaccountmanagementrender.showPassword(buttonOldPassword, inputOldPassword);
    shinobi.fragmentfindandaddaccountmanagementrender.showPassword(buttonNewPassword, inputNewPassword);

    var buttonSave = document.querySelector("#changePasswordPMModal #changePassword");
    buttonSave.onclick = function () {
      shinobi.pmmanagementrender.modifyPasswordPMUser(data);
    };
  },

  modifyInfoPMUser: function (data) {
    var url = "/authenapi/PmManagementApi/modifyPMInfo";
    shinobi.pmmanagementrender.getValuePMUser("#addAccountModal", function (json) {
      json.username = data.username;
      shinobi.api.request(url, JSON.stringify(json), function (res) {
        shinobi.notification.notification.info('Chỉnh sửa tài khoản PM thành công!');
        setTimeout(function () {
          window.location.reload();
        }, 3000);
      });
    });
  },

  modifyPasswordPMUser: function (data) {
    var url = "/authenapi/PmManagementApi/changePassword";
    shinobi.pmmanagementrender.getValue("#changePasswordPMModal", function (json) {
      json.username = data.username;
      shinobi.api.request(url, JSON.stringify(json), function (res) {
        shinobi.notification.notification.info('Chỉnh sửa mật khẩu PM thành công!');
        setTimeout(function () {
          window.location.reload();
        }, 3000);
      });
    });
  },

  getValue: function (selector, callback) {
    shinobi.mapping.getValue(selector, function (request) {
      !Object.values(request).includes("") ? callback(request) : shinobi.util.fillInputMessage();
    }, {
      checkEmpty: true,
    })
  },

  getValuePMUser: function (selector, callback) {
    shinobi.mapping.getValue(selector, function (request) {
      var json = {
        // "username": username,
        "firstname": request.firstname,
        "lastname": request.lastname,
        "identitynumber": request.identitynumber,
        "phonenumber": request.phonenumber,
      };
      console.log(json);
      !Object.values(json).includes("") ? callback(json) : shinobi.util.fillInputMessage();
    }, {
      checkEmpty: true,
    })
  },
  changeNameCreateButton: function () {
    var createButton = document.querySelector("#addAccountButton");
    createButton.innerText = "Thêm tài khoản PM";
  },

  renderPMTableData: function () {
    var datalistId = "pmmanagementboard";
    var url = "/authenapi/PmManagementApi/findDataList";

    var colNames = shinobi.tableHelper.getColname(datalistId);
    var renders = shinobi.tableHelper.getRender(datalistId);

    if (!shinobi.pmmanagementrender.pmmanagementboard) {
      var datalist = new shinobi.table(datalistId);
      shinobi.pmmanagementrender.pmmanagementboard = datalist;
    }

    shinobi.pmmanagementrender.pmmanagementboard.staticsorts = [{
      "colname": "createddate",
      "value": "desc"
    }];
    // datalist.staticfilters = filterDefault;

    var request = {
      recordPerPage: shinobi.util.getRecordNumber(datalistId),
    }
    shinobi.pmmanagementrender.pmmanagementboard.initLoadApi(url, request, colNames, renders);
  },
  renderFullname: function (cell, row, col, all) {
    console.log(all);
    cell.innerHTML = `${all[row].firstname} ${all[row].lastname}`;
  },
};
shinobi.portfoliousermenurender = {
    build: function () {
        var Object = this;
        shinobi.portfoliousermenurender.activeMenu();
        // shinobi.portfoliousermenurender.renderTables();
        shinobi.portfoliousermenurender.renderHiddenTable("#portfoliousermenu ul li");
        shinobi.portfoliousermenurender.renderHiddenTable("#tabsmatchingorder ul li");
    },


    activeMenu: function () {
        shinobi.portfoliousermenurender.renderActiveTab("#portfoliousermenu ul li");
        shinobi.portfoliousermenurender.renderActiveTab("#tabsmatchingorder ul li");

    },

    renderActiveTab: function (selector) {
        var listMenu = document.querySelectorAll(selector);
        var refreshBtn = document.getElementById('refreshportfolio');

        listMenu.forEach(elem => {
            elem.onclick = function () {
                listMenu.forEach(item => {
                    item.classList.remove("is-active");
                });
                elem.classList.add("is-active");
                shinobi.portfoliousermenurender.renderHiddenTable(selector);

                if (document.querySelector('#tabsmatchingorder [value="tablematchingorderhistory"]').classList.contains("is-active") == false) {
                    document.getElementById("searchinghistory").classList.add("is-hidden");
                    refreshBtn.classList.remove('is-hidden');

                } else {
                    document.getElementById("searchinghistory").classList.remove("is-hidden");
                    refreshBtn.classList.add('is-hidden');
                }
            };
        });
    },

    renderHiddenTable: function (selector) {
        var listMenu = document.querySelectorAll(selector);
        listMenu.forEach(elem => {
            var value = elem.getAttribute("value");
            var table = document.querySelector(`table#${value}`);
            table.parentNode.classList.add("is-hidden");
        });
        shinobi.portfoliousermenurender.renderVisibleTable(selector);
    },

    renderVisibleTable: function (selector) {
        var listTable = document.querySelectorAll(selector);
        listTable.forEach(elem => {
            if (elem.classList.contains("is-active") == true) {
                var value = elem.getAttribute("value");
                var table = document.querySelector(`table#${value}`);
                table.parentNode.classList.remove("is-hidden");

                shinobi.portfoliousermenurender.renderTables(value);
            }
        });
    },

    renderTables: function (value) {
        shinobi.portfoliousermenurender.renderPortFolioUser(value);
        shinobi.portfoliousermenurender.renderAssetUser(value);
        shinobi.portfoliousermenurender.renderAccountEfficiencyUser(value);
        shinobi.portfoliousermenurender.renderTableOrderSignal(value);
    },

    renderPortFolioUser: function (value) {
        if (value == "tablematchingorderdate") {
            console.log("Load Bảng Sổ lệnh Trong Ngày");
            // shinobi.portfoliouserrender.reloadPortfolioUser();
        };

        if (value == "tablematchingorderhistory") {
            console.log("Load Bảng Sổ lệnh Lịch Sử");
            // shinobi.portfoliouserrender.reloadPortfolioUser();
        };
    },

    renderAssetUser: function (value) {
        if (value == "tableassetorder") {
            console.log("Load Bảng Tài Sản");
            shinobi.assetuserrender.getAssetUser(shinobi.tradingsystemrender.getCurrentAllocationAccount());
        };
    },

    renderAccountEfficiencyUser: function (value) {
        if (value == "tableaccountefficiency") {
            console.log("Load Bảng Hiệu quả TK");
        };
    },

    renderTableOrderSignal: function (value) {
        if (value == "tableordersignal") {
            console.log("Load Bảng Tín Hiệu");
        };
    },
};shinobi.portfoliouserrender = {
    table: '',
    tableHistory: '',
    build: function (value) {
        shinobi.portfoliouserrender.renderTableAssetUser(value);
        shinobi.portfoliouserrender.renderTableAssetUserHistory(value);
    },

    rebuildOnChangeSelect: function (value) {

    },

    reloadPortfolioUser() {
        if (shinobi.portfoliouserrender.table.hasOwnProperty('reloadApi')) {
            shinobi.portfoliouserrender.table.reloadApi();
        }

    },

    renderTableAssetUser: function (valueAccount) {
        console.log("valueAccount", valueAccount);
        var object = this;
        var datalistId = "tablematchingorderdate";
        var url = "/authenapi/StockComOrderApi/findDataList";

        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        // if (!object.table) {
        shinobi.portfoliouserrender.table = new shinobi.table(datalistId);
        // datalist.staticsorts = sortDefault;
        // datalist.staticfilters = filterDefault;

        var request = {
            "allocationaccount": valueAccount,
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        };

        shinobi.portfoliouserrender.table.initLoadApi(url, request, colNames, renders, {
            callback: function () {
                var refreshBtn = document.getElementById('refreshportfolio');
                refreshBtn.onclick = function () {
                    shinobi.portfoliouserrender.table.paramsRequestList = { "allocationaccount": valueAccount };
                    shinobi.portfoliouserrender.table.reloadApi(1, { loading: false });
                };
            },
        });

    },

    renderTableAssetUserHistory: function (valueAccount) {
        var object = this;
        var datalistId = "tablematchingorderhistory";
        var url = "/authenapi/StockComOrderHistoryApi/findDataList";

        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        // if (!object.table) {
        shinobi.portfoliouserrender.tableHistory = new shinobi.table(datalistId);
        // datalist.staticsorts = sortDefault;
        // datalist.staticfilters = filterDefault;

        console.log(valueAccount);
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        };

        shinobi.portfoliouserrender.tableHistory.staticfilters = [
            {
                "colname": "allocationaccount",
                "operator": "=",
                "value": valueAccount
            },
        ];


        shinobi.portfoliouserrender.tableHistory.initLoadApi(url, request, colNames, renders, {
            // callback: function () {
            //     var refreshBtn = document.getElementById('refreshportfolio');
            //     refreshBtn.onclick = function () {
            //         shinobi.portfoliouserrender.table.paramsRequestList = { "allocationaccount": valueAccount };
            //         shinobi.portfoliouserrender.table.reloadApi(1, { loading: false });
            //     };
            // },
        });

    },

    snbRenderButton: function (cell, row, col, all) {
        if (all[row].status == "PENDING" || all[row].status == "PARTIAL_MATCHED") {
            value = cell.innerHTML;
            cell.innerHTML = `
            <div class="is-flex is-justify-content-space-between">
                <div class="has-text-left">    
                    <button class="cancel-button is-danger has-bsd button is-small">
                        Huỷ
                    </button>
                </div>
                <div class="has-text-right">    
                    <button class="see-detail button is-small">
                        <span><i class="fas fa-ellipsis-v"></i></span>
                    </button>
                </div>
            </div>`
            console.log(all[row].status);
            var detailButton = cell.querySelector(".see-detail");
            detailButton.onclick = function () {
                shinobi.portfoliouserrender.openModalDetail(value, all[row])
            };

            var cancelButton = cell.querySelector(".cancel-button");
            cancelButton.onclick = function () {
                shinobi.notification.confirm(function () {
                    shinobi.portfoliouserrender.cancelOrder(all[row].systemorderid);
                }, {
                    title: 'Xác nhận',
                    content: "Bạn muốn xác nhận hủy lệnh?",
                    yesConent: "Xác nhận",
                })
            };
        } else {
            value = cell.innerHTML;
            cell.innerHTML = `
                <div class="has-text-right">    
                    <button class="see-detail button is-small">
                        <span><i class="fas fa-ellipsis-v"></i></span>
                    </button>
                </div>`
            console.log(all[row].status);
            var button = cell.querySelector(".see-detail");
            button.onclick = function () {
                shinobi.portfoliouserrender.openModalDetail(value, all[row])
            };
        }
    },

    cancelOrder: function(array) {
        var url = "/authenapi/CreateSignalApi/cancelSignal";
        var selectSubAccount = document.getElementById('selectPM').value;
        var cancelArray = [
            array
        ]
        var request = {
            allocationaccount: selectSubAccount,
            ordertype: "CANCEL",
            signaltype: "COPYTRADE",
            orderlist: cancelArray,
        }
        console.log("console", request, "->", cancelArray);
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            shinobi.notification.notification.info('Hủy lệnh thành công !');
            shinobi.portfoliouserrender.build(selectSubAccount);
        })
    },

    openModalDetail: function (value, data) {
        var modal = document.getElementById("modalOrderDate");
        modal.classList.add("is-active");

        shinobi.mapping.renderElement(modal, data);
    },
};shinobi.roottemplate = {
  config: "",
  init: function () {
    var object = this;
    shinobi.initbulma.build();
    shinobi.util.addEventInternetConnection();
    object.renderDevelopingTooltip();
    object.activeMenuType();
    object.activeTab();
  },
  activeMenuType: function () {
    var menuleft = document.getElementById('menuleft');
    var menuPm = menuleft.querySelector('.pm-menu');
    var menuSupadmin = menuleft.querySelector('.superadmin-menu');
    var menuAladinAdmin = menuleft.querySelector('.aladin-admin-menu');
    getUserInfo(function (res) {
      if (res.usertype == "PM") {
        menuPm.classList.remove('is-hidden');
        menuSupadmin.classList.add('is-hidden');
      } else {
        if ((res.usertype == "SUPERADMIN")) {
          menuPm.classList.add('is-hidden');
          menuSupadmin.classList.remove('is-hidden');
        } else {
          if (res.usertype == "PMALADIN") {
            menuAladinAdmin.classList.remove('is-hidden');
            menuSupadmin.classList.add('is-hidden');
          }
        }
      }

    })

  },
  renderMobileNavigatorNavbar: function () {
    shinobi.coreapi.checkAuthen(function (username) {
      if (username) {
        shinobi.usernotificationrender.updateNotificationBadge();
        //hidden burger logged usermenu
        // document.querySelector('.navbar .navbar-end .user-navbar-header-menu-container').classList.add('is-hidden')
      }
    });
  },
  renderDevelopingTooltip: function () {
    var listDevelopingItem = document.querySelectorAll(".is-developing");
    listDevelopingItem.forEach(item => {
      item.classList.add('has-tooltip-bottom', 'has-tooltip-multiline');
      item.setAttribute("data-tooltip", "Đang phát triển");
    });
  },
  renderCellTextCentered: function (cell, row, col, all) {
    value = cell.innerHTML;
    cell.innerHTML = `
      <div class="has-text-centered">
        ${value}
      </div>
  `
  },
  renderCellTextBoldCentered: function (cell, row, col, all) {
    value = cell.innerHTML;
    cell.innerHTML = `
      <div class="has-text-centered has-text-weight-bold">
        ${value}
      </div>
  `
  },
  renderElemTextCentered: function (elem, value, all) {
    elem.innerHTML = `
      <div class="has-text-centered">
        ${value}
      </div>
  `
  },
  renderCellTextRight: function (cell, row, col, all) {
    value = cell.innerHTML;
    cell.innerHTML = `
      <div class="has-text-right">
        ${value}
      </div>
  `
  },
  renderElemTextRight: function (elem, value, all) {
    elem.innerHTML = `
      <div class="has-text-right">
        ${value}
      </div>
  `
  },

  renderFirstNameLastName(cell, row, col, all) {
    let data = all[row];
    cell.innerHTML = `<div class="has-text-centered">${data.firstname} ${data.lastname}</div>`
  },

  renderProfitPercent(cell, row, col, all) {
    let data = all[row];
    let value = cell.innerHTML;
    cell.innerHTML = `<div class="has-text-right">${value * 100}%</div>`
  },

  activeTab: function () {
    getUserInfo(function (response) {
      var infoUser = response;
      var usertype = infoUser.usertype;
      var tab = document.querySelector(`#menuleft [value="${usertype}"] a[href="${window.location.pathname}"`);
      if (tab) {
        tab.classList.add("is-active");

      }
    });
  },
};
shinobi.roottemplaterender = {
  init: function () {
    // shinobi.socketmanager.init();
    shinobi.roottemplaterender.changeLoggedState(shinobi.roottemplaterender.showLoginSignUpButton);
    shinobi.roottemplate.init();
  },

  changeLoggedState: function (callback) {
    shinobi.coreapi.reCheckAuthen(function (username) {
      if (username) {
        document.body.classList.add("has-logged");
        document.body.classList.remove("not-logged");
      } else {
        document.body.classList.remove("has-logged");
        document.body.classList.add("not-logged");
      }

      if (typeof callback == "function") {
        callback();
      }
    });
  },

  showLoginSignUpButton: function () {
    if (JSON.stringify(document.body.classList).includes("not-logged")) {
      var signupButtons = document.querySelectorAll(".is-signup-button");
      for (let signupButton of signupButtons) {
        signupButton.classList.remove("is-hidden");
      }

      var loginButtons = document.querySelectorAll(".is-login-button");
      for (let loginButton of loginButtons) {
        loginButton.classList.remove("is-hidden");
      }
    }
  },
};
shinobi.selfemployedaccountrender = {
    systemsubaccount: '',
    colNames: '',
    build: function () {
        shinobi.selfemployedaccountrender.activeTab();
        shinobi.selfemployedaccountrender.renderCreateActiveModal();
        shinobi.selfemployedaccountrender.renderModalButtons();
        shinobi.selfemployedaccountrender.createFirstAccount();

        shinobi.selfemployedaccountrender.renderSelfEmployedAccountSelect(
            function () {
                shinobi.selfemployedaccountrender.checkSeflEmployedAccountData();
                shinobi.selfemployedaccountrender.renderForTable();
                shinobi.selfemployedaccountrender.getUnallocatedPercent();
                shinobi.selfemployedaccountrender.addEventCheckAccountSelect();
            }
        );

        shinobi.selfemployedaccountrender.createMultivalueStructure();
    },

    activeTab: function () {
        getUserInfo(function (response) {
            var infoUser = response;
            var usertype = infoUser.usertype;
            var tab = document.querySelector(`#menuleft [value="${usertype}"] a[href="/private/selfemployedaccount"`);
            tab.classList.add("is-active");
        });
    },

    renderMoreButton: function (cell, row, col, all) {
        cell.innerHTML = `
          <div class="has-text-centered">    
            <div class="dropdown is-up is-right more-button">
              <div class="dropdown-trigger">
                <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                    <span><i class="fas fa-ellipsis-v"></i></span>
                </button>
            </div>
            <div class="dropdown-menu" id="dropdown-menu" role="menu">
                <div class="dropdown-content">
                    <a class="dropdown-item pr-4" onclick="shinobi.selfemployedaccountrender.renderModifyButton()">
                        Chỉnh sửa
                    </a>
                    <a class="dropdown-item pr-4">
                        Xoá
                    </a>
                </div>
              </div>
            </div>
          </div>`

        var dropdown = cell.querySelector('.dropdown');
        dropdown.onclick = function () {
            dropdown.classList.toggle('is-active');
        };
    },

    renderCreateActiveModal: function () {
        shinobi.selfemployedaccountrender.activeModal("#allocateAccount", "#addAccountModal", "Phân bổ tài khoản");
        shinobi.selfemployedaccountrender.activeModal("#allocateFirstAccount", "#addAccountModal", "Phân bổ tài khoản");
        shinobi.selfemployedaccountrender.activeModal("#addAccountButton", "#addSelfEmployedAccountModal", "Thêm tài khoản tự doanh");
    },

    activeModal: function (activeButton, activeModal, titleModal) {
        var object = this;
        var button = document.querySelector(activeButton);
        button.onclick = function () {
            object.getListPm1NotAllotment();
            shinobi.mapping.clear(activeModal)

            var modal = document.querySelector(activeModal);
            modal.classList.add("is-active");
            shinobi.selfemployedaccountrender.settingCreateAccountModal(activeModal, titleModal);
            shinobi.selfemployedaccountrender.setUpPasswordInput(activeModal);
        }
    },

    settingCreateAccountModal: function (activeModal, titleModal) {
        var buttonCreate = document.querySelector(activeModal + " #createModal");
        var buttonSave = document.querySelector(activeModal + " #saveModal");

        buttonCreate.style.display = "block";
        buttonSave.style.display = "none";

        var title = document.querySelector(activeModal + " .modal-card-title");
        title.innerText = titleModal;
    },

    renderModifyButton: function () {
        shinobi.selfemployedaccountrender.getListPm1NotAllotment();
        var modal = document.querySelector("#addAccountModal");
        modal.classList.add("is-active");

        modal = "#addAccountModal";
        shinobi.selfemployedaccountrender.settingModifyAccountModal(modal);
        shinobi.selfemployedaccountrender.setUpPasswordInput(modal);
    },

    settingModifyAccountModal: function (modal) {
        var buttonCreate = document.querySelector(modal + " #createModal");
        var buttonSave = document.querySelector(modal + " #saveModal");

        buttonCreate.style.display = "none";
        buttonSave.style.display = "block";

        var title = document.querySelector(modal + " .modal-card-title");
        title.innerText = "username";
    },

    setUpPasswordInput: function (activeModal) {
        var inputLoginPassword = document.querySelector(activeModal + " #loginPassword input");
        var inputOrderPassword = document.querySelector(activeModal + " #orderPassword input");
        var buttonLoginPassword = document.querySelector(activeModal + " #loginPassword .button");
        var buttonOrderPassword = document.querySelector(activeModal + " #orderPassword .button");

        if (inputLoginPassword && inputOrderPassword) {
            shinobi.selfemployedaccountrender.showPassword(buttonLoginPassword, inputLoginPassword);
        }
        if (buttonLoginPassword && buttonOrderPassword) {
            shinobi.selfemployedaccountrender.showPassword(buttonOrderPassword, inputOrderPassword);
        }
    },

    showPassword: function (showButton, input) {
        input.setAttribute("type", "password");
        showButton.innerHTML = `<i class="fas fa-eye-slash"></i>`;

        showButton.onclick = function () {
            var value = input.getAttribute("type");
            if (value == "password") {
                input.setAttribute("type", "text");
                showButton.innerHTML = `<i class="fas fa-eye"></i>`;
            } else {
                input.setAttribute("type", "password");
                showButton.innerHTML = `<i class="fas fa-eye-slash"></i>`;
            }
        };
    },

    getListPm1NotAllotment: function () {
        var url = "/authenapi/PmManagementApi/findDataList";
        var allocationaccount = document.getElementById('selfemplyedaccountselection').value;
        var idDatalist = "listpmusername";
        var request = {
            recordPerPage: getRecordNumber(idDatalist),
        }
        if (!shinobi.selfemployedaccountrender.listPMUserName) {
            var datalist = new shinobi.datalist(idDatalist);
            shinobi.selfemployedaccountrender.listPMUserName = datalist
        };

        // datalist.staticfilters = [
        //     {
        //         "colname": "systemsubaccount", "operator": "=", "value": allocationaccount
        //     }]
        shinobi.selfemployedaccountrender.listPMUserName.initLoadApi(url, request);
    },
    renderFullnameAllocation: function (elem, value, all) {
        elem.setAttribute("value", value);
        elem.innerHTML = all.firstname + " " + all.lastname
    },
    renderModalButtons: function () {
        shinobi.selfemployedaccountrender.renderModelAllotment("#addAccountModal");
        shinobi.selfemployedaccountrender.renderModalEvent("#addSelfEmployedAccountModal");
    },


    renderModalEvent: function (modal) {
        shinobi.selfemployedaccountrender.renderEventCreateButton(modal);
        shinobi.selfemployedaccountrender.renderEventSaveButton(modal);
    },
    renderEventCreateButton: function (modal, json) {
        var url = "/authenapi/StockComAccountRegistrationApi/createAdminUser";
        var create = document.querySelector(modal + " #createModal");
        create.onclick = function () {
            shinobi.selfemployedaccountrender.getValueUser(modal, function (json) {
                listJson = {
                    "stockcom": json.stockcom,
                    "account": json.account,
                    "username": json.account,
                    "password": json.password,
                    "pincode": json.pincode,
                    "userid": "",
                    "name": json.name,
                };

                shinobi.notification.notification.loading();
                shinobi.api.request(url, JSON.stringify(listJson), function (res) {
                    shinobi.notification.notification.loaded();
                    shinobi.notification.notification.info('Thêm tài khoản thành công!');
                    setTimeout(function () {
                        window.location.reload();
                    }, 100)
                });
            });
        };
    },

    renderEventSaveButton: function (modal) {
        var create = document.querySelector(modal + " #saveModal");
        create.onclick = function () {
            shinobi.fragmentfindandaddaccountmanagementrender.getValue(modal, function (json) {
                console.log(json);
            });
        };
    },
    renderModelAllotment: function (modal) {
        var object = this;
        shinobi.selfemployedaccountrender.renderEventSaveAllotmentButton(modal);
        shinobi.selfemployedaccountrender.renderEventCreateAllotmentButton(modal);

    },
    renderEventSaveAllotmentButton: function (modal, json) {
        var object = this;
        var url = "/authenapi/AllocationManagementApi/setOriginSubAccountAllocation";
        var create = document.querySelector(modal + " #createModal");
        create.onclick = function () {
            shinobi.selfemployedaccountrender.getValue(modal, function (json) {

                var select = document.getElementById('selfemplyedaccountselection');
                var value = select.value;
                var optionChild = select.querySelector(`[value="${value}"]`);
                var subValue = optionChild.getAttribute('sub-value');
                var systemSubaccount = subValue;
                listJson = {
                    'systemsubaccount': systemSubaccount,
                    "startdate": json.startdate,
                    "enddate": json.enddate,
                    "profitcommisionratio": Number(json.profitcommisionratio) / 100,
                    "pmusername": json.pmusername,
                    "allocationratio": Number(json.allocationratio) / 100,

                };
                shinobi.notification.notification.loading();
                shinobi.api.request(url, JSON.stringify(listJson), function (res) {
                    shinobi.notification.notification.loaded();
                    shinobi.notification.notification.info('Thêm tài khoản thành công!');
                    setTimeout(function () {
                        window.location.reload();
                    }, 100)
                });
            });

        };
    },

    renderEventCreateAllotmentButton: function (modal) {
        var create = document.querySelector(modal + " #saveModal");
        create.onclick = function () {
            shinobi.fragmentfindandaddaccountmanagementrender.getValue(modal, function (json) {
                console.log(json);
            });
        };
    },


    getValue: function (selector, callback) {
        shinobi.mapping.getValue(selector, function (request) {
            !Object.values(request).includes("") ? callback(request) : shinobi.util.fillInputMessage();
        }, {
            checkEmpty: true,
        })
    },

    getValueUser: function (selector, callback) {
        shinobi.mapping.getValue(selector, function (request) {
            listJson = {
                "stockcom": request.stockcom,
                "account": request.account,
                "username": request.account,
                "password": request.password,
                "pincode": request.pincode,
                "name": request.name,
            };
            var json = listJson;

            delete json['pincode'];
            !Object.values(json).includes("") ? callback(listJson) : shinobi.util.fillInputMessage();
        }, {
            checkEmpty: true,
        })
    },

    createFirstAccount: function () {
        var button = document.querySelector("#addFirstAccountButton");
        button.onclick = function () {
            var modal = document.querySelector("#addSelfEmployedAccountModal");
            modal.classList.add("is-active");

            modal = "#addSelfEmployedAccountModal";
            shinobi.selfemployedaccountrender.settingCreateAccountModal(modal, "Thêm tài khoản tự doanh");
            shinobi.selfemployedaccountrender.setUpPasswordInput(modal);
        }
    },

    checkSeflEmployedAccountData: function () {
        shinobi.api.request("/authenapi/StockComAccountApi/getListOriginStockComAccount", '{}', function (res) {
            var data = JSON.parse(res);

            var table = document.querySelector("#selfEmployedTable");
            var noTable = document.querySelector("#noSelfEmployedAccount");
            shinobi.selfemployedaccountrender.checkDataRenderTable(data, table, noTable, true);
        });
    },

    checkAllotmentAccountData: function () {
        shinobi.selfemployedaccountrender.listDataLinkedPM(function (elem) {
            var request = {
                "recordPerPage": "5",
                "pageNum": 1,
                "filters": [
                    {
                        "colname": "systemsubaccount",
                        "operator": "=",
                        "value": elem.systemsubaccount,
                    }, {
                        "colname": "isactive",
                        "operator": "=",
                        "value": "true"
                    }
                ],
                "sorts": [],
            };
            var url = "/authenapi/OriginStockComAccountManagementApi/findDataList";

            shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
                res = JSON.parse(res);

                var table = document.querySelector("#allotmentTable");
                var noTable = document.querySelector("#noAccountPMTable");

                shinobi.selfemployedaccountrender.checkDataRenderTable(res.data, table, noTable, false);
            });
        });
    },

    listDataLinkedPM: function (callback) {
        var select = document.getElementById("selfemplyedaccountselection");
        var valueSelect = select.value;
        var request = {
            "systemaccount": valueSelect,
        };
        shinobi.cacheapi.request("/authenapi/StockComSubAccountApi/getListSubAccount", JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            res.forEach(elem => {
                if (valueSelect == elem.systemaccount) {
                    callback(elem);
                    return;
                }
            });
        });
    },

    checkDataRenderTable: function (data, dataTable, nullTable, options) {
        console.log(data, data.length, (data.length));
        if (data.length) {

            if (data.length != 0) {
                dataTable.classList.remove("is-hidden");
                if (options) {
                    shinobi.selfemployedaccountrender.checkAllotmentAccountData();
                }
            }
        } else {
            nullTable.classList.remove("is-hidden");
        }
    },

    renderForTable: function () {
        var object = this;
        object.renderCompanySelect();
    },

    renderCompanySelect: function (idSelect = 'companyName') {
        var datalistId = idSelect;
        var url = "/api/StockComInfoApi/findDataList";

        var datalist = new shinobi.datalist(datalistId);

        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
            pageNum: 1,
        }
        datalist.initLoadApi(url, request);

        // shinobi.api.request(url, JSON.stringify(request), function (res) {
        //     res = JSON.parse(res);
        //     datalist.renderTable(res.data);
        // });
    },

    renderFullname: function (elem, value, all) {
        elem.setAttribute("value", value);
        elem.innerHTML = all.fullname
        elem.setAttribute('sub-value', all.tradingsubaccount)
    },

    renderFullnameStockCompany: function (elem, value, all) {
        elem.setAttribute("value", value);
        elem.innerHTML = all.fullname
        // elem.setAttribute('sub-value', all.tradingsubaccount);
        console.log('all', all, 'VALUE', value);
    },
    renderSelfEmployedAccountSelect: function (callback) {
        var datalistId = "selfemplyedaccountselection";
        var url = "/authenapi/StockComAccountApi/getListOriginStockComAccount";

        if (!shinobi.selfemployedaccountrender.dataSelfEmplyedAccountSelection) {
            var datalist = new shinobi.datalist(datalistId);
            shinobi.selfemployedaccountrender.dataSelfEmplyedAccountSelection = datalist;
        }

        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
            pageNum: 1,
        }
        // datalist.initLoadApi(url, request);

        shinobi.api.request(url, JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            datalist.renderTable(res);

            let interval = setInterval(() => {
                (!shinobi.selfemployedaccountrender.dataSelfEmplyedAccountSelection.tableContainerNode) && clearInterval(interval);
                let optionList = datalist.tableNode.querySelectorAll('option');
                if (optionList.length >= res.length) {
                    shinobi.selfemployedaccountrender.selectLocalStorage();
                    res.forEach(item => {
                        if (document.querySelector("#selfemplyedaccountselection").value == item.systemaccount) {
                            shinobi.selfemployedaccountrender.checkChildAccount(item.systemaccount, item);
                            console.log('item account', item);
                            if (item.tradingsubaccount) {
                                shinobi.selfemployedaccountrender.renderLinkedPMTable(item.tradingsubaccount);
                            }
                            if (item.tradingsubaccount) {
                                shinobi.selfemployedaccountrender.checkPMAccount(true, item.tradingsubaccount);
                                shinobi.selfemployedaccountrender.getUnallocatedPercent();
                                shinobi.selfemployedaccountrender.getinfoUserAccount(item.tradingsubaccount)
                            } else {
                                shinobi.selfemployedaccountrender.checkPMAccount(false, "NoItem");
                            }
                        };
                    });

                    clearInterval(interval);
                }

            }, 100);

            if (callback) {
                callback();
            }
        });
    },

    checkChildAccount: function (requestValue, item, callback, disableReload) {
        console.log("requestValue", requestValue, "item", item);
        var url = "/authenapi/StockComAccountApi/checkHasConfigTradingSubAccount"
        var request = {
            "systemaccount": requestValue
        };
        console.log('requestValue', requestValue);
        window.localStorage.valueSelfEmployedAccountSelect = requestValue;
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            var bool = JSON.parse(res);

            if (!bool) {
                shinobi.selfemployedaccountrender.loadListChildAccount(requestValue, item, callback, disableReload);
            } else {
                if (callback) {
                    callback();
                };
            }
        });
    },

    loadListChildAccount: function (requestValue, item, callback, disableReload) {
        var object = this;
        var tableId = "checkAccountUserModal";

        if (!object.colNames) {
            var colNames = shinobi.tableHelper.getColname(tableId);
        }
        var renders = shinobi.tableHelper.getRender(tableId);

        var url = '/authenapi/StockComSubAccountApi/getListSubAccount';
        var request = {
            "systemaccount": requestValue,
        };

        if (!shinobi.selfemployedaccountrender.checkaccountusermodal) {
            shinobi.selfemployedaccountrender.checkaccountusermodal = new shinobi.table(tableId);
        }

        shinobi.api.request(url, JSON.stringify(request), function (res) {
            shinobi.selfemployedaccountrender.checkaccountusermodal.renderTable(colNames, JSON.parse(res), renders);
        })

        var titleModal = document.querySelector("#confirmDealAccountModal header .has-fullname");
        var notiModal = document.querySelector("#confirmDealAccountModal section .has-fullname");
        if (item.fullname) {
            titleModal.innerHTML = `Cấu hình tài khoản ${item.fullname}`
            notiModal.innerHTML = `*Xác định tài khoản giao dịch của ${item.fullname}`
        } else {
            titleModal.innerHTML = `Cấu hình tài khoản ${item.name}`
            notiModal.innerHTML = `*Xác định tài khoản giao dịch của ${item.name}`
        }


        var confirmDealAccountModal = document.getElementById("confirmDealAccountModal");
        confirmDealAccountModal.classList.add("is-active");
        shinobi.selfemployedaccountrender.stopOutModal(confirmDealAccountModal);
        shinobi.selfemployedaccountrender.submitChildAccount(requestValue, item, disableReload, callback);
    },

    stopOutModal: function (modalSelector) {
        console.log(modalSelector);
        var background = modalSelector.querySelector(".modal-background")
        if (modalSelector.classList.contains("is-active")) {
            background.onclick = function () {
                shinobi.notification.notification.error("Vui lòng cấu hình trước khi tắt cửa sổ");
            }
        }
    },

    chooseDealAccount: function (cell, row, col, all) {
        value = cell.innerHTML;
        if (row == 0) {
            cell.innerHTML = `
            <div class="has-text-centered">
                <label class="radio">
                    <input type="radio" name="dealAccount" snb-key="systemsubaccount" radio-value="${value}" checked>
                </label>
            </div>`
        } else {
            cell.innerHTML = `
            <div class="has-text-centered">
                <label class="radio">
                    <input type="radio" name="dealAccount" snb-key="systemsubaccount" radio-value="${value}">
                </label>
            </div>`
        }
    },

    inputFeeForDealAccount: function (cell, row, col, all) {
        cell.innerHTML =
            `
        <input class="input is-small has-text-right feeDealAccountInput" snb-key="feeInput">
        `
    },

    inputTaxForDealAccount: function (cell, row, col, all) {
        cell.innerHTML =
            `
        <input class="input is-small has-text-right taxDealAccountInput" snb-key="taxInput">
        `
    },

    getValueDealAccountModal: function (selector, callback) {
        shinobi.mapping.getValue(selector, function (request) {
            var modal = document.querySelector(selector);
            console.log("selector", selector, modal);
            var json = request;
            // delete json['feeInput'];
            // delete json['taxInput'];

            !Object.values(json).includes("") ? callback(request) : shinobi.util.fillInputMessage();
        }, {
            checkEmpty: true,
        })
    },

    submitChildAccount: function (requestValue, item, disableReload, callback) {
        var button = document.querySelector("#confirmDealAccount");
        button.onclick = function () {
            shinobi.selfemployedaccountrender.getValueDealAccountModal("#confirmDealAccountModal", function (json) {

                var request = shinobi.selfemployedaccountrender.getRequestRowSelectedTableSubAccount(requestValue, json);
                shinobi.selfemployedaccountrender.getRequestAllRowTableSubAccount(requestValue, json, item, function (requestAll) {

                    shinobi.selfemployedaccountrender.systemsubaccount = request.systemsubaccount;
                    if (json.systemsubaccount) {
                        shinobi.selfemployedaccountrender.getUpdatePersonalTradingConfig(request, requestAll, disableReload, callback);
                    } else {
                        shinobi.notification.notification.error('Vui lòng chọn tài khoản giao dịch!');
                    }
                });


            });
        }
    },

    getRequestRowSelectedTableSubAccount: function (requestValue, json) {
        var request = {
            "systemaccount": requestValue,
            "systemsubaccount": json.systemsubaccount,
        };
        return request;
    },

    getRequestAllRowTableSubAccount: function (requestValue, json, item, callback) {
        console.log('item item', item);
        shinobi.selfemployedaccountrender.getinfoUserAccount(item.tradingsubaccount, function (info) {
            // console.log('info', info, info.account);
            var jsonList = [];
            for (var index = 0; index < index + 1; index++) {
                var array = [];
                var snbList = document.querySelectorAll(`#checkAccountUserModal [rowid="${index}"] [snb-key]`)
                if (snbList.length) {
                    snbList.forEach(snb => {
                        var radioV = snb.getAttribute("radio-value");
                        if (radioV) {
                            array.push(radioV);
                        } else {
                            array.push(snb.value);
                        };
                    });
                    var stringBancode = {
                        "bancode": JSON.stringify(shinobi.selfemployedaccountrender.getBanCode()),
                    }

                    if (isNaN(Number(array[1]))) {
                        jsonList = [];
                        break;
                    }

                    if (isNaN(Number(array[2]))) {
                        jsonList = [];
                        break;
                    }

                    if (!item.stockcompany) {
                        item.stockcompany = item.stockcom;
                    }

                    // if (!item.account) {

                    // }

                    console.log("requestValue list", requestValue);

                    var request = {
                        "account": item.account,
                        "systemaccount": requestValue,
                        "systemsubaccount": array[0],
                        "stockcom": item.stockcompany,
                        "fee": Number(array[1]) / 100,
                        "tax": Number(array[2]) / 100,
                        "bancode": JSON.stringify(stringBancode),
                    };

                    console.log(request);

                    jsonList.push(request);
                } else { break; }
            }
            if (callback) {
                callback(jsonList)
            }
        });

    },

    getUpdatePersonalTradingConfig: function (request, requestAll, disableReload, callback) {
        console.log("rq updatePersonalTradingConfig", requestAll);

        if (requestAll.length) {
            requestAll = {
                "subaccountlist": requestAll,
            }

            shinobi.api.request("/authenapi/StockComAccountApi/updatePersonalTradingConfig", JSON.stringify(requestAll), function (res) {
                shinobi.notification.notification.loaded();
                console.log("Cập nhật thuế phí", res);
                if (res == "update success") {
                    shinobi.notification.notification.info('Cập nhật thuế phí thành công!');
                    setTimeout(function () {
                        shinobi.selfemployedaccountrender.getInfoConfigTradingSubAccount(request, disableReload, callback);
                    }, 1000)
                } else {
                    shinobi.notification.notification.error('Cập nhật thuế phí thất bại!');
                }
            });
        } else {
            shinobi.notification.notification.error('Giá trị nhập chưa đúng!');
        }
    },

    getInfoConfigTradingSubAccount: function (request, disableReload, callback) {
        console.log("rq configTradingSubAccount", request);

        shinobi.api.request("/authenapi/StockComAccountApi/configTradingSubAccount", JSON.stringify(request), function (res) {
            shinobi.notification.notification.loaded();
            shinobi.notification.notification.info('Cấu hình tài khoản thành công!');
            if (!disableReload) {
                setTimeout(function () {
                    window.location.reload();
                }, 2000)
            } else {
                document.getElementById('confirmDealAccountModal').classList.remove('is-active');
                if (callback) {
                    callback(request.systemsubaccount);
                }
            }
        });
    },

    addEventCheckAccountSelect: function () {
        var select = document.querySelector("#selfemplyedaccountselection");
        select.onchange = function () {
            var datalistId = "selfemplyedaccountselection";
            var url = "/authenapi/StockComAccountApi/getListOriginStockComAccount";

            var request = {
                recordPerPage: shinobi.util.getRecordNumber(datalistId),
            }

            shinobi.api.request(url, JSON.stringify(request), function (res) {
                res = JSON.parse(res);

                res.forEach(item => {
                    if (document.querySelector("#selfemplyedaccountselection").value == item.systemaccount) {
                        shinobi.selfemployedaccountrender.checkChildAccount(item.systemaccount, item);
                        if (item.tradingsubaccount) {
                            shinobi.selfemployedaccountrender.renderLinkedPMTable(item.tradingsubaccount);
                        }
                        if (item.tradingsubaccount) {
                            shinobi.selfemployedaccountrender.checkPMAccount(true, item.tradingsubaccount);
                            shinobi.selfemployedaccountrender.getUnallocatedPercent();
                            shinobi.selfemployedaccountrender.getinfoUserAccount(item.tradingsubaccount)
                        } else {
                            shinobi.selfemployedaccountrender.checkPMAccount(false, "NoItem");
                        }
                    };
                })
            });
        }
    },

    checkPMAccount: function (boolean, tradingsubaccount) {
        var nullTable = document.querySelector("#noAccountPMTable");
        var dataTable = document.querySelector("#allotmentTable");
        if (boolean) {
            var url = "/authenapi/OriginStockComAccountManagementApi/findDataList"
            var request = {
                "recordPerPage": "5",
                "pageNum": 1,
                "filters": [
                    {
                        "colname": "systemsubaccount",
                        "operator": "=",
                        "value": tradingsubaccount,
                    }, {
                        "colname": "isactive",
                        "operator": "=",
                        "value": "true"
                    }
                ],
                "sorts": []
            }

            shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
                json = JSON.parse(res);
                if ((json.data).length) {
                    nullTable.classList.add("is-hidden");
                    dataTable.classList.remove("is-hidden");
                } else {
                    nullTable.classList.remove("is-hidden");
                    dataTable.classList.add("is-hidden");
                }
            });
        } else {
            nullTable.classList.remove("is-hidden");
            dataTable.classList.add("is-hidden");
        }
    },

    renderLinkedPMTable: function (systemsubaccount) {
        var datalistId = "linkedpmaccounttable";
        var url = "/authenapi/OriginStockComAccountManagementApi/findDataList";

        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        var datalist = new shinobi.table(datalistId);
        shinobi.selfemployedaccountrender.table1 = datalist;
        // datalist.staticsorts = sortDefault;
        datalist.staticfilters = [
            {
                "colname": "systemsubaccount",
                "operator": "=",
                "value": systemsubaccount,
            }, {
                "colname": "isactive",
                "operator": "=",
                "value": "true",
            }
        ];

        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        }

        let hiddenWarningSection = (datalistInput) => {
            let section = document.getElementById('noAccountPMTable');
            setTimeout(
                function () {
                    (datalistInput.tableRows.length > 0) ?
                        section.classList.add('is-hidden')
                        :
                        section.classList.remove('is-hidden')
                }, 300);
        }

        datalist.initLoadApi(url, request, colNames, renders, {
            callback: () => hiddenWarningSection(datalist)
        });
    },

    selectLocalStorage: function () {
        var valueLocal = window.localStorage.valueSelfEmployedAccountSelect;
        var select = document.querySelector("#selfemplyedaccountselection");
        var optionList = select.querySelectorAll('option');
        optionList.forEach(elem => {
            if (valueLocal == elem.value) {
                select.value = valueLocal;
            }
        })

    },

    getUnallocatedPercent: function () {
        var unallocatedPercent = document.getElementById("unallocatedPercent");

        var selector = document.getElementById("selfemplyedaccountselection");
        var valueSelector = selector.value;

        var optionList = selector.querySelectorAll("option");
        optionList.forEach(item => {
            var value = item.getAttribute("value");
            var subValue = item.getAttribute("sub-value");

            if (value == valueSelector) {
                if (subValue == "undefined") {
                    subValue = "";
                }

                if (subValue) {
                    var url = "/authenapi/AllocationManagementApi/getTradingUnallocatedRatio"
                    var request = {
                        "systemsubaccount": subValue,
                    }
                    shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
                        var percent = Number(res) * 100;
                        unallocatedPercent.innerHTML = `${shinobi.util.formatNumber(percent)}%`;
                    });
                }
            }
        });
    },

    getinfoUserAccount: function (subAccount, callback) {
        var url = '/authenapi/StockComAccountApi/getStockComAccountInfo';
        var request = {
            "recordPerPage": "10", "pageNum": 1,
            systemsubaccount: subAccount,
        };
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            res = JSON.parse(res);
            console.log(res);
            var elem = document.getElementById('nameuser');
            shinobi.mapping.renderElement(elem, res);
            if (callback) {
                callback(res);
            }
        });
    },

    createMultivalueStructure: function () {
        shinobi.selfemployedaccountrender.multivalueinput = new shinobi.multivalueinput(
            'input[snb-key="bancode"]', {
            buildSearch: function (object) {
                object.inputSearch.setAttribute('placeholder', 'Thêm mã');
                object.inputSearch.setAttribute('type', 'text');
                new shinobi.autocomplete('#selectorInputSearch', {
                    onSearch: (input, resolve) => {
                        input = input.toUpperCase();
                        var inputContainer = document.getElementById("selectorInputSearch");
                        inputContainer.value = inputContainer.value.toUpperCase();

                        if (input.length < 1) { resolve([]) }
                        var url = "/api/PriceBoardApi/findDataList";
                        var request = {
                            "recordPerPage": "20",
                            "pageNum": 1,
                            "filters": [{ 'colname': 'stocksymbol', 'operator': 'like', 'value': input }]
                        }

                        shinobi.api.request(url, JSON.stringify(request), function (res) {
                            var array = JSON.parse(res).data;
                            resolve(array);
                        });


                    },
                    autoSelect: true,
                    getResultValue: result => {
                        return result.stocksymbol.toUpperCase();
                    },
                    onSubmit: (result) => {
                        object.appendChildItem(result, object);
                        object.inputSearch.value = '';
                    },
                    renderResult: (result, props) => {
                        return `
                          <li ${props}>
                              <div class="title has-text-primary is-size-5">
                             ${result.stocksymbol}
                              </div>
                              <div class="subtitle">${result.securityname}</div>
                          </li>`
                    },
                });
            },
            renderItem: function (result) {
                result = JSON.parse(result).stocksymbol;
                return result;
            },
        });
    },

    appendChildItem: function (object) {
        var result = object.inputSearch.value.trim();
        if (result.length >= 3) {
            object.appendChildItem(result, object);
            object.inputSearch.value = '';
        }
    },

    getStockList: function (input) {
        if (input.trim() == '') {
            return [];
        } else {
            var list = input.split(',');
            list.forEach(function (item, index) {
                list[index] = item.substring(1, item.length - 1);
            })
            return list;
        }
    },

    renderListInput: function (elem, value, all) {
        var object = shinobi.selfemployedaccountrender.multivalueinput;
        elem.value = value;
        var listItem = value;
        shinobi.selfemployedaccountrender.resetElemMultivalue();

        listItem.forEach(result => {
            shinobi.selfemployedaccountrender.multivalueinput.appendChildItem(result, object);
        });
    },

    getBanCode: function () {
        var arrayResult = [];
        var result = shinobi.selfemployedaccountrender.multivalueinput.result;
        result.forEach(elem => {
            try {
                elem = JSON.parse(elem);
                elem = elem.stocksymbol
                arrayResult.push(elem);
            } catch (e) { }
        });
        return arrayResult;
    },
};shinobi.setnewpasswordrender = {

	build: function () {

		var submitButton = document.getElementById("submitButton");

		document.querySelector('#ipRepassword').addEventListener('keypress',
			function (e) {
				var key = e.which || e.keyCode;
				if (key === 13) {
					shinobi.setnewpasswordrender.submit();

				}
			});

		submitButton.onclick = function () {
			shinobi.setnewpasswordrender.submit();
		}

	},

	submit: function () {

		var ipPassword = document.getElementById("ipPassword");
		var ipRepassword = document.getElementById("ipRepassword");

		var password = ipPassword.value.trim();
		var rePassword = ipRepassword.value.trim();

		if (password == "" || rePassword == "") {

			alert("Vui lòng nhập đầy đủ thông tin!");
			return;
		} else {

			var checkInput = shinobi.setnewpasswordrender.checkInput(password,
				rePassword);

			if (checkInput == false) {

				return;
			} else {

				var pathname = window.location.pathname;

				var listPathnameSplit = pathname.split("/");

				var id = listPathnameSplit[3];

				var setcode = listPathnameSplit[4];

				var request = {};

				request.password = shinobi.util.sha256(password);
				request.verifypassword = shinobi.util.sha256(rePassword);
				request.id = id;
				request.randomstring = setcode;

				shinobi.api
					.request(
						"/api/UserApi/sendRequestRecoveryPassword",
						JSON.stringify(request),
						function (response) {
							shinobi.notification.notification
								.info("Đặt lại mật khẩu thành công!");

							window.location.href = "/page/index";

						});
			}
		}
	},

	checkInput: function (password, rePassword) {

		if (password.trim() != rePassword.trim()) {

			alert("Mật khẩu và xác nhận mật khẩu không giống nhau!");

			return false;
		}

		if (password.trim().value < 4 || password.trim().value > 15
			|| rePassword.trim().value < 4 || rePassword.trim().value > 15) {

			alert("Độ dài mật khẩu không hợp lệ! Chiều dài từ 4 đến 15 kí tự tối thiểu 2 chữ cái và 2 con số!");

			return false;
		}

		var passwordString = password.toString();

		console.log(passwordString)
		var countNumberInPassword = shinobi.util
			.countNumberInInput(passwordString);
		var countTextCharacterInPassword = shinobi.util
			.countTextCharacterInInput(passwordString);

		if (countNumberInPassword < 2 || countTextCharacterInPassword < 2) {

			alert("Mật khẩu không hợp lệ! Tối thiểu 2 chữ cái và 2 con số!");

			return false;

		}

		return true;

	}
};shinobi.socketmanager = {
  publicWebSocket: "",
  privateWebSocket: "",
  closeNotice5MinuteTimeout: "",
  noticeRemainTimeSound: "",

  socketMessage: {
    public: [],
    private: [],
  },
  init: function () {
    shinobi.config.getConfig();
    /*shinobi.socketmanager.noticeRemainTimeSound = new Audio('/static/audio/lottery-sound.mp3');*/
    // if (shinobi.socketmanager.publicWebSocket == "") {
    //   shinobi.socketmanager.publicWebSocket = "loading";
    //   shinobi.socketmanager.createWebSocketPublic();
    // }
    // if (shinobi.socketmanager.privateWebSocket == "") {
    //   shinobi.socketmanager.privateWebSocket = "loading";
    //   shinobi.socketmanager.createWebSocketPrivate();
    // }
    // shinobi.socketmanager.addEventSocketPublicProcess();
    // shinobi.socketmanager.addEventSocketPrivateProcess();
  },

  addEventSocketPublicProcess: function () {
    setInterval(function () {
      if (shinobi.socketmanager.socketMessage.public.length > 0) {
        var item = shinobi.socketmanager.socketMessage.public.shift();
        switch (item.messagetype) {
          case "PRICEBOARD_DETAIL":
            shinobi.socketmanager.updatePriceBoardDetail(item);
            break;
          case "PRICEBOARD_OVERVIEW":
            shinobi.socketmanager.updatePriceBoardOverview(item);
            break;
          case "MARKET_STATUS":
            shinobi.socketmanager.updateMarketStatus(item);
            break;
          case "MARKET_DATE":
            shinobi.indexrender.renderMarketDateData(JSON.parse(item.data));
            break;
          case "SJC_PRICE":
            shinobi.indexrender.renderMarketSjcPriceData(JSON.parse(item.data));
            break;
          case "GOLD_SPOT":
            shinobi.indexrender.renderMarketGoldSpotData(JSON.parse(item.data));
            break;

          default:
            break;
        }
      }
    }, 100);
  },

  addEventSocketPrivateProcess: function () {
    setInterval(function () {
      if (shinobi.socketmanager.socketMessage.private.length > 0) {
        var item = shinobi.socketmanager.socketMessage.private.shift();
        var type = item.hasOwnProperty("messagetype") ? item.messagetype : item.type;
        switch (type) {
          case "USER_ONLINE_STATUS":
            shinobi.userstatus.updateUserStatusProcess(item);
            break;
          case "PRICEBOARD_PRIVATE_DETAIL":
            var data = JSON.parse(item.data);
            shinobi.priceboardcontrol.updateUserId(data);
            break;
          case "notification":
            shinobi.usernotificationrender.updateNotificationBadge();
            break;
          default:
            break;
        }
      }
    }, 10);
  },

  updatePriceBoardDetail: function (item) {
    var priceboardDetailMessageList = JSON.parse(item.data);
    shinobi.priceboardcontrol.socketQueue = shinobi.priceboardcontrol.socketQueue.concat(priceboardDetailMessageList);
  },

  updateMarketStatus: function (item) {
    shinobi.indexrender.renderMarketStatusData(item.data);
  },

  updatePriceBoardOverview: function (item) {
    var priceboardDetailMessageList = JSON.parse(item.data);
    shinobi.priceboardcontrol.socketQueue = shinobi.priceboardcontrol.socketQueue.concat(priceboardDetailMessageList);
  },

  createWebSocketPrivate: function () {
    shinobi.socketmanager.privateWebSocket = "loading";
    shinobi.util.checkAuthen(function (username) {

      if (username) {
        shinobi.message.connectSocketServer(function () {
          shinobi.message.connect(
            shinobi.config.current.imserver,
            function () {
              // shinobi.message.socket.send(requestMessage);
            },
            {
              onMessage: function (data) {
                shinobi.socketmanager.socketMessage.private = shinobi.socketmanager.socketMessage.private.concat(data);
              },
            }
          );
          shinobi.socketmanager.privateWebSocket = shinobi.message;
          shinobi.socketmanager.disconnectContainer = shinobi.util.addEventInternetConnection();
          shinobi.socketmanager.checkPrivateSocketDisconnect();
        });

      } else {
        shinobi.socketmanager.privateWebSocket = "";
      }
    });
  },
  createWebSocketPublic: function () {
    shinobi.socketmanager.publicWebSocket = new shinobi.socket({
      url: shinobi.config.current.publicWebSocketUrl,
      onMessage: function (data) {
        shinobi.socketmanager.socketMessage.public = shinobi.socketmanager.socketMessage.public.concat(data);
      },
    });
    shinobi.socketmanager.disconnectContainer = shinobi.util.addEventInternetConnection();
    shinobi.socketmanager.checkPublicSocketDisconnect();

  },
  checkPrivateSocketDisconnectCount: 0,
  checkPublicSocketDisconnectCount: 0,
  checkPrivateSocketDisconnect: function () {
    let currentSocket = shinobi.socketmanager.privateWebSocket.socket;
    setTimeout(function () {
      if (currentSocket.readyState == currentSocket.OPEN) {
        shinobi.socketmanager.checkPrivateSocketDisconnectCount = 0;
      } else {
        shinobi.socketmanager.checkPrivateSocketDisconnectCount += 1;
      }
      var internetConnection = shinobi.util.internetConnection;
      var socketConnection;
      if (shinobi.socketmanager.checkPrivateSocketDisconnectCount < 5
        && shinobi.socketmanager.checkPublicSocketDisconnectCount < 5) {
        socketConnection = true;
      } else {
        socketConnection = false;
      }
      if (internetConnection) {
        if (socketConnection) {
          shinobi.socketmanager.disconnectContainer.classList.remove('is-active');
        } else {
          shinobi.socketmanager.disconnectContainer.classList.add('is-active');
        }
      }
      shinobi.socketmanager.checkPrivateSocketDisconnect();
    }, 1000);
  },
  checkPublicSocketDisconnect: function () {
    setTimeout(function () {
      if (shinobi.socketmanager.publicWebSocket.socket.readyState == shinobi.socketmanager.publicWebSocket.socket.OPEN) {
        shinobi.socketmanager.checkPublicSocketDisconnectCount = 0;
      } else {
        shinobi.socketmanager.checkPublicSocketDisconnectCount += 1;
      }
      var internetConnection = shinobi.util.internetConnection;
      var socketConnection;
      if (shinobi.socketmanager.checkPublicSocketDisconnectCount < 5) {
        socketConnection = true;
      } else {
        socketConnection = false;
      }
      if (internetConnection) {
        if (socketConnection) {
          shinobi.socketmanager.disconnectContainer.classList.remove('is-active');
        } else {
          shinobi.socketmanager.disconnectContainer.classList.add('is-active');
        }
      }
      shinobi.socketmanager.checkPublicSocketDisconnect();
    }, 1000);
  },

};
shinobi.stocomorderrender = {
    build: function () {
        var object = this;
        object.toggerCheckboxOrder();
        object.addEventCancelOrder();
    },
    addEventCancelOrder: function () {
        var object = this;
        var buttonCancel = document.getElementById('cancelorderbutton');
        var array = [];
        buttonCancel.onclick = function () {
            shinobi.notification.confirm(function () {
                var checkALl = document.getElementById('tickallorder');

                var listCheckbox = document.querySelectorAll('[snb-key-checkbox]');
                if (checkALl.checked) {
                    array.push('ALL');
                } else {
                    listCheckbox.forEach(input => {
                        if (input.checked) {
                            var value = input.getAttribute('snb-key-checkbox');
                            array.push(value);
                        }
                    })
                }
                object.cancelOrder(array);
            }, {
                title: 'Xác nhận',
                content: "Bạn muốn xác nhận hủy lệnh?",
                yesConent: "Xác nhận",
            })


        };
    },
    cancelOrder: function (list) {
        var url = "/authenapi/CreateSignalApi/cancelSignal";
        var selectSubAccount = document.getElementById('selectPM').value;
        var request = {
            allocationaccount: selectSubAccount,
            ordertype: "CANCEL",
            signaltype: "COPYTRADE",
            orderlist: list
        }
        shinobi.api.request(url, JSON.stringify(request), function (res) {
            shinobi.notification.notification.info('Hủy lệnh thành công !');
            shinobi.portfoliouserrender.build(selectSubAccount);

        })
    },
    toggerCheckboxOrder: function () {
        var elem = document.getElementById('tickallorder');
        elem.onchange = function () {
            console.log('change');
            var listCheckbox = document.querySelectorAll('[snb-key-checkbox]');
            console.log(listCheckbox);
            listCheckbox.forEach(input => {
                if (elem.checked) {
                    input.checked = true
                } else {
                    input.checked = false

                }
            })

        };

    },
};shinobi.tableordersignalrender = {
    orderSignalTable: '',
    build: function (systemsubaccount) {
        var object = this;
        object.renderTableAssetUser(systemsubaccount);

    },

    renderTableAssetUser: function (valueAccount) {
        var datalistId = "tableordersignal";

        var colNames = shinobi.tableHelper.getColname(datalistId);
        var renders = shinobi.tableHelper.getRender(datalistId);

        if (!shinobi.tableordersignalrender.orderSignalTable) {
            shinobi.tableordersignalrender.orderSignalTable = new shinobi.table(datalistId);
        }

        var url = '/authenapi/SignalListApi/getSignalList';
        var request = {
            recordPerPage: shinobi.util.getRecordNumber(datalistId),
        };

        shinobi.tableordersignalrender.orderSignalTable.staticfilters = [
            {
                'colname': 'allocationaccount',
                'operator': '=',
                'value': `${valueAccount}`,

            }
        ];

        shinobi.tableordersignalrender.orderSignalTable.initLoadApi(url, request, colNames, renders);
    },

    renderStatusChildSetting: function (cell, row, col, all) {
        var value = cell.innerHTML;

        if (shinobi.ordercommandmanagementrender.childStatusOrder[`${value}`]) {
            value = shinobi.ordercommandmanagementrender.childStatusOrder[`${value}`];
        };

        if (value == "Thành công") {
            cell.innerHTML = `<div class="has-text-centered has-text-success">${value}</div>`;
        } else if (value == "Thất bại") {
            cell.innerHTML = `<div class="has-text-centered has-text-danger">${value}</div>`;
        } else {
            cell.innerHTML = `<div class="has-text-centered">${value}</div>`;
        }
    },

    formatDescription: function (cell, row, col, all) {
        var value = cell.innerHTML;
        value = shinobi.ordercommandmanagementrender.renderNoticeSub(value);

        cell.innerHTML = `<div class="order-command-notice is-italic"> ${value} </div>`;
    },

    formatFullname: function (cell, row, col, all) {
        var value = cell.innerHTML;

        cell.innerHTML = `<div class="has-text-centered" value="${value}"> ${all[row].fullname} </div>`;
    },
};shinobi.tradingsystemrender = {
  listOrder: [
    'LO',
    'ATO',
    'ATC',
    'MP'
  ],
  currentStock: "",
  tableStocComOrder: "",
  interval: '',
  currentPrice: '',
  classSell: 'is-active-sell',
  classBuy: 'is-active-buy',
  stepVolume: 100,
  contentOrderBuy: 'MUA',
  contentOrderSell: ' BÁN',
  init: function () {
    var object = this;
    var fieldSetVolume = '#setvolume';
    var fielSetPrice = '#setprice'

    object.addEventStepVolume(fieldSetVolume);
    object.addEventStepPrice(fielSetPrice);
    object.addDropdowMenu();
    shinobi.portfoliousermenurender.build();
    object.addEventActiveBuySell();
    object.addEventSearchUser();
    object.addEventSearchStock();
    // document.querySelector('#indexlink a').classList.add('is-active');
    object.activeTab();
    object.getAllVirtualSubaccount();
    object.initTradingviewStock('VNINDEX');
    shinobi.stocomorderrender.build();
    object.setUpOrderValueTab();
    object.activeSelectOptionCopytrade();
    object.renderRadioButtonEvent();

    object.createStruct(function () {

      object.submitOrderCommand();

    });
  },
  createStruct: function (callback) {
    var selectTypeCopyTrade = document.getElementById('selecttypeorder');
    getUserInfo(function (res) {
      if (res.usertype == "PM") {
        selectTypeCopyTrade.value = 'COPYTRADE';

      }
      if (callback) {
        callback();
      }
    })

  },
  activeSelectOptionCopytrade: function () {
    var selectCopytrade = document.getElementById('containerselectcompytrade');
    getUserInfo(function (res) {
      if (res.usertype == "PMALADIN") {
        selectCopytrade.classList.remove('is-hidden');
      }
    })
  },
  activeTab: function () {
    getUserInfo(function (response) {
      var infoUser = response;
      var usertype = infoUser.usertype;
      var tab = document.querySelector(`#menuleft [value="${usertype}"] a[href="/private/tradingsystem"`);
      tab.classList.add("is-active");
    });
  },
  setCurrentPrice: function (elem, value, all) {
    shinobi.tradingsystemrender.currentPrice = value;
  },
  getInput: function (callback) {
    var object = this;
    shinobi.mapping.getValue('#containertrading', function (json) {

      var request = {};
      var allocationaccount = document.getElementById('selectPM').value;
      var side = object.getOrderType();
      request.allocationaccount = allocationaccount;
      request.side = side;
      request.stockcode = json.stocksymbol;
      if (isNaN(json.currentprice)) {
        request.ordertype = json.currentprice;
        request.price = json.currentprice;
      } else {
        request.ordertype = "LO";
        request.price = json.currentprice;
      }
      request.volume = json.currentweight;
      request.signaltype = json.signaltype;
      if (request.stockcode == '') {
        shinobi.notification.notification.error('Vui lòng nhập mã chứng khoán !');
      } else {
        if (request.currentprice == '') {
          shinobi.notification.notification.error('Vui lòng nhập giá mua bán !');

        } else {
          if (request.volume == '') {
            shinobi.notification.notification.error('Vui lòng nhập khối lượng');
          } else {
            callback(request);
          }
        }
      }
    });
  },
  getOrderType: function () {
    var object = this;
    var container = document.getElementById('containertrading');

    if (container.classList.contains(object.classBuy)) {
      return 'BUY';
    } else {
      return "SELL"
    }

  },
  getAllVirtualSubaccount: function () {
    var object = this;

    var url = "/authenapi/SystemUserApi/getListAllocationAccount";
    var selectSubaccount = document.getElementById('selectPM');
    var request = {};
    shinobi.api.request(url, JSON.stringify(request), function (res) {
      res = JSON.parse(res).data;
      res.forEach(item => {
        var option = document.createElement('option');
        option.setAttribute('value', item.account);
        option.innerHTML = item.fullname;
        selectSubaccount.appendChild(option);
      });
      if (selectSubaccount.value) {
        var allocationaccount = shinobi.util.getAllSearchInPath().allocationaccount;
        if (allocationaccount) {
          document.getElementById('selectPM').value = allocationaccount;
          var jumpId = "portfoliousermenu";
          if (jumpId) {
            var elem = document.getElementById(jumpId);
            var newOffset = elem.offsetTop - Number(shinobi.util.getFontSize()) * 4;
            var offset = newOffset > 0 ? newOffset : 0;
            document.body.scrollTop = offset;
            document.documentElement.scrollTop = offset;
          }

          var orderSignal = document.querySelector('#portfoliousermenu [value="tableordersignal"]');
          orderSignal.click();
        };

        object.addEventSelectChange();
      }
    });
  },
  addEventSelectChange: function () {
    var object = this;
    var select = document.getElementById('selectPM');
    shinobi.tradingsystemrender.setCurrentAllocationAccount(select.value);
    setInterval(() => {
      var select = document.getElementById('selectPM');
      var value = select.value;
      if (value) {
        object.getValuePurchasingPower(select.value);
      };
    }, 1000);
    shinobi.portfoliouserrender.build(select.value);
    shinobi.tableordersignalrender.build(select.value);
    shinobi.assetuserrender.build(select.value);
    shinobi.accountefficiencyuserrender.build(select.value);
    shinobi.tradingsystemrender.updateAllocationAccountInfo(select.value);
    select.onchange = function () {
      object.updatePage(select.value);
    };
  },
  updatePage: function (value) {
    shinobi.tradingsystemrender.setCurrentAllocationAccount(value);
    shinobi.portfoliouserrender.table.paramsRequestList = { "allocationaccount": value };
    shinobi.portfoliouserrender.table.reloadApi(1, { loading: false });

    shinobi.portfoliouserrender.tableHistory.paramsRequestList = { "allocationaccount": value };
    shinobi.portfoliouserrender.tableHistory.staticfilters = [
      {
        "colname": "allocationaccount",
        "operator": "=",
        "value": value
      },
    ];
    shinobi.portfoliouserrender.tableHistory.reloadApi(1, { loading: false });

    shinobi.accountefficiencyuserrender.renderAccountEfficiencyUser(value);

    shinobi.tableordersignalrender.build(value);
    shinobi.tradingsystemrender.updateAllocationAccountInfo(value);

    document.getElementById('updateAllocationAccountAssetButton').click();
  },

  setCurrentAllocationAccount(value) {
    localStorage.setItem('currentAllocationAccount', value);
  },

  getCurrentAllocationAccount() {
    return localStorage.getItem('currentAllocationAccount');
  },

  updateAllocationAccountInfo(value) {
    shinobi.mapping.clear('#PMInfoPanel');
    shinobi.cacheapi.request('/authenapi/AllocationAccountRelatedInfoApi/getFollowingPMInfo',
      JSON.stringify({ "allocationaccount": value }),
      (res) => {
        let data = JSON.parse(res);
        shinobi.mapping.render('#PMInfoPanel', res);
      });

    shinobi.mapping.clear('#allocationAccountInfo');
    shinobi.cacheapi.request('/authenapi/AllocationAccountRelatedInfoApi/getStockComAccountAndAllocationInfo',
      JSON.stringify({ "allocationaccount": value }),
      (res) => {
        let data = JSON.parse(res);
        console.log(data);
        shinobi.mapping.render('#allocationAccountInfo', res);
      });
  },

  getValuePurchasingPower: function (account) {
    var elem = document.getElementById('couldbuy');
    var url = "/authenapi/SystemUserApi/getPuchasingPower";
    // account = 'VPS_318467_N_1';
    var request = { "account": account };
    shinobi.api.request(url, JSON.stringify(request), function (res) {
      elem.innerHTML = shinobi.util.formatNumber(res);
    });
  },
  getValueStocsympol: function () {
    var object = this;


    interval = setInterval(function () {
      if (object.currentStock) {
        var url = "/api/PriceBoardApi/findDataList";
        var request = {
          "recordPerPage": "20",
          "pageNum": 1,
          "filters": [{ 'colname': 'stocksymbol', 'operator': '=', 'value': object.currentStock }]
        };

        shinobi.api.request(url, JSON.stringify(request), function (res) {
          object.getInfoStocSympol(res);
          object.getInfo3PriceStock(res);
        });
      }
    },
      1000)

  },
  getInfoStocSympol: function (res) {
    var object = this;

    var infoStocksympol = document.getElementById('infostocsympol');
    var data = JSON.parse(res).data[0];
    shinobi.mapping.renderElement(infoStocksympol, data);

  },
  getInfo3PriceStock: function (res) {
    var object = this;

    var info3PriceStock = document.getElementById('pricestocksympol');
    var data = JSON.parse(res).data[0];
    shinobi.mapping.renderElement(info3PriceStock, data);
  },

  formatPrice: function (elem, value, all) {
    elem.innerHTML = value;
    if (value == all.ceiling) {
      elem.parentNode.classList.add('ceiling-value');
    } else {
      if (value == all.floor) {
        elem.parentNode.classList.add('floor-value');
      } else {
        if (value == all.priorcloseprice) {
          elem.parentNode.classList.add('reference-value');
        } else {
          if (Number(value) > Number(all.priorcloseprice)) {

            elem.parentNode.classList.add('up-value');
          } else {

            elem.parentNode.classList.add('down-value');
          }
        }
      }
    }
    var value = Number(value);

  },
  addTimeLoadAll: function (container, callback) {
    var url = '/authenapi/SystemReportApi/getInitDateFilter';
    // shinobi.api.request(url, '{}', function (response) {
    //   var data = JSON.parse(response);
    //   shinobi.util.setRangeCalendar('[snb-key="date"]', new Date(data.start), new Date(data.end));

    response = {
      "start": '2021-21-05 10:00',
      'end': '2021-21-06 10:00'
    };
    shinobi.util.setRangeCalendar('[snb-key="date"]', new Date(response.start), new Date(response.end));

    // shinobi.mapping.renderElement(container, json);
    if (callback) {
      callback();
    }

    // });
  },

  addEventSearchUser: function () {
    var object = this;
    var url = "/authenapi/SystemUserApi/getListAllocationAccount";
    var request = {};
    shinobi.api.request(url, JSON.stringify(request), function (res) {
      var data = JSON.parse(res).data;


      new shinobi.autocomplete('#autocompletesearchstocksymbol', {
        onSearch: (input, resolve) => {
          if (input.length < 1) { return [] }

          var arr = data.filter(item => item.fullname.toLowerCase().includes(input.toLowerCase()))
          resolve(arr);
        },

        onSubmit: result => {
          var select = document.getElementById('selectPM');
          var search = document.getElementById('autocompletesearchstocksymbol');
          search.value = '';
          select.value = result.account;
          object.updatePage(result.account);

        },
        renderResult: (result, props) => {
          return `
          <li ${props}>
              <div class="title has-text-primary is-size-6">
               ${result.fullname}
              </div>
          </li>`
        },
      });
    });

  },
  addEventSearchStock: function (selector) {
    var object = this;
    var selectorSearchStock = '#searchstocsympol';
    if (selector) {
      selectorSearchStock = selector;
    }
    var input = document.querySelector(selectorSearchStock + ' input');
    input.addEventListener('input', function () {
      input.value = input.value.toUpperCase();
    });
    input.addEventListener('focusout', function () {
      var value = input.value;
      object.initTradingviewStock(value);
      object.currentStock = value;
    });
    object.getValueStocsympol();

    input.onchange = function () {
      var stockInfoElem = document.getElementById('infostocsympol');
      if (this.value.trim() == "") {
        stockInfoElem.classList.add('is-hidden');
      } else {
        stockInfoElem.classList.remove('is-hidden');
      }
    }
    new Autocomplete(selectorSearchStock, {
      search: input => {
        if (input.length < 1) { return [] }
        var url = "/api/PriceBoardApi/findDataList";
        var request = {
          "recordPerPage": "20",
          "pageNum": 1,
          "filters": [{ 'colname': 'stocksymbol', 'operator': 'like', 'value': input }]
        }
        var list = new Promise(resolve => {
          shinobi.api.request(url, JSON.stringify(request), function (res) {
            var array = JSON.parse(res).data;

            resolve(array);
          });
        });

        return list;
      },
      autoSelect: true,

      getResultValue: result => {
        return result.stocksymbol.toUpperCase();
      },
      onSubmit: result => {
        object.currentStock = result.stocksymbol;
        object.initTradingviewStock(result.stocksymbol);
        // object.getValueStocsympol(result.stocksymbol);

        var stockInfoElem = document.getElementById('infostocsympol');
        if (result.stocksymbol == "") {
          stockInfoElem.classList.add('is-hidden');
        } else {
          stockInfoElem.classList.remove('is-hidden');
        }
      },
      renderResult: (result, props) => {
        return `
          <li ${props}>
              <div class="title has-text-primary is-size-5">
             ${result.stocksymbol}
              </div>
              <div class="subtitle">${result.securityname}</div>
          </li>`
      },
    });

  },
  initTradingviewStock: function (stocksymbol) {
    var embledTradingview = document.getElementById('tradingviewstock');
    var url = "https://chart.aladin.finance/web/index.html?symbol=" + stocksymbol;
    var src = embledTradingview.getAttribute('src');

    if (src != url) {
      embledTradingview.setAttribute('src', url);
    }
  },
  addDropdowMenu: function () {
    var object = this;
    object.currentPrice = 10;

    var dropdowMenuList = document.querySelector('#dropdown-menu .dropdown-content');
    var dropdown = document.querySelector('#dropdown-menu').parentNode;
    var valueCurrent = document.querySelector('#setprice .current-value');
    object.listOrder.forEach(value => {
      var item = document.createElement('a');
      item.setAttribute('class', 'dropdown-item');
      item.innerHTML = value;

      item.onclick = function () {
        if (value != 'LO') {
          valueCurrent.value = value;
        }
        else {
          valueCurrent.value = object.currentPrice;
        }
        dropdown.classList.remove('is-active');
      };
      dropdowMenuList.appendChild(item);
    });
  },
  submitOrderCommand: function () {
    var object = this;

    var buttonSubmit = document.getElementById('buttontrading');
    buttonSubmit.onclick = function () {
      object.getInput(function (request) {
        var modal = document.getElementById("orderCommandConfirmModal");
        shinobi.mapping.renderElement(modal, request);
        document.getElementById("orderCommandConfirmModal").classList.add("is-active");
        console.log(request);
        object.confirmOrderCommandConfirmModal(request);
        object.renderSourceSellFunction(request);
      }
      );
    };
  },
  confirmOrderCommandConfirmModal: function (request) {
    var confirm = document.getElementById("confirmOrderModal");
    var inputOther = document.getElementById("otherOptionInput");

    confirm.onclick = function () {
      if (document.getElementById("otherOptionSourceContainer")) {
        shinobi.mapping.getValue("#otherOptionSourceContainer", function (radioValue) {
          shinobi.cacheapi.request("/authenapi/AllocationAccountRelatedInfoApi/getStockComAccountAndAllocationInfo", `{allocationaccount: ${request.allocationaccount}}`, function (res) {
            var data = JSON.parse(res);
            console.log(data);
            getUserInfo(function (userinfores) {
              console.log("getUserInfo", userinfores);
              if (userinfores.usertype == "PMALADIN") {
                if (request.side == "SELL") {
                  if (radioValue.typeModal == "OTHER") {
                    request.beneficiary = {
                      beneficiary: radioValue.typeModal,
                      value: inputOther.value,
                    };
                  } else {
                    if (radioValue.typeModal == "PMALADIN") {
                      request.beneficiary = {
                        beneficiary: radioValue.typeModal,
                        value: userinfores.username,
                      };
                    } else {
                      request.beneficiary = {
                        beneficiary: radioValue.typeModal,
                        value: data.pm,
                      };
                    }
                    inputOther.value = "none";
                  }
                } else {
                  inputOther.value = "none";
                  if (request.beneficiary) {
                    delete request.beneficiary;
                  }
                }
              } else {
                inputOther.value = "none";
              }
              console.log("REQUEST", request);
              if (inputOther.value) {
                shinobi.tradingsystemrender.sendApiConfirmOrder(request);
              } else {
                shinobi.notification.notification.error('Vui lòng nhập giá trị nguồn!');
              }
            })
          });
        });
      }
    }
  },

  sendApiConfirmOrder: function (request) {
    var object = this;
    var url = "/authenapi/CreateSignalApi/createNormalSignal";

    shinobi.api.request(url, JSON.stringify(request), function (respone) {
      shinobi.notification.notification.info('Đặt lệnh thành công');
      object.clearPrice();

      document.getElementById("orderCommandConfirmModal").classList.remove("is-active");
    })
  },

  renderAccountName: function (elem, value, all) {
    var url = "/authenapi/AllocationAccountRelatedInfoApi/getStockComAccountAndAllocationInfo"
    shinobi.cacheapi.request(url, `{allocationaccount: ${value}}`, function (res) {
      var data = JSON.parse(res);
      elem.innerHTML = data.systemaccountname;
    });
  },
  renderPMAcountName: function (elem, value, all) {
    var url = "/authenapi/AllocationAccountRelatedInfoApi/getStockComAccountAndAllocationInfo"
    shinobi.cacheapi.request(url, `{allocationaccount: ${value}}`, function (res) {
      var data = JSON.parse(res);
      elem.innerHTML = `(Tải khoản ${data.pmfullname})`;
      elem.setAttribute("value", data.pm);
    });
  },
  renderRadioButtonEvent: function () {
    var radioOther = document.getElementById("otherOptionInput").parentNode;
    var listRadio = document.querySelectorAll('#otherOptionSourceContainer [snb-key="typeModal"]');

    listRadio.forEach(radioButton => {
      radioButton.onclick = function () {
        if (radioButton.checked) {
          if (radioButton.getAttribute("radio-value") == "OTHER") {
            radioOther.classList.remove("is-hidden");
            radioOther.querySelector("input").value = "";
          } else {
            radioOther.classList.add("is-hidden");
            radioOther.querySelector("input").value = "";
          }
        }
      }
    });
  },
  renderSourceSellFunction: function (request) {
    getUserInfo(function (res) {
      var source = document.querySelector("#orderCommandConfirmModal .field.is-flex");
      if (res.usertype == "PMALADIN") {
        if (request.side == "BUY") {
          if (!source.classList.contains("is-hidden")) {
            source.classList.add("is-hidden");
          }
        } else if (request.side == "SELL") {
          if (source.classList.contains("is-hidden")) {
            source.classList.remove("is-hidden");
          }
        }
      } else {
        if (source) {
          source.classList.add("is-hidden");
        }
      }
    })
  },
  renderSideColor: function (elem, value, all) {
    if (value == "BUY") {
      elem.innerHTML = `<span class="has-text-success">MUA</span>`
    } else if (value == "SELL") {
      elem.innerHTML = `<span class="has-text-danger">BÁN</span>`
    }
  },
  clearPrice: function () {
    var stock = document.querySelector('#searchstocsympol input');
    stock.value = '';
    var price = document.getElementById('orderPriceTab');
    price.value = "";
    var volume = document.getElementById('currentweight');
    volume.value = "";

  },
  addEventStepPrice: function (selector) {
    var object = this;
    object.currentPrice = 10;
    var selector = document.querySelector(selector);
    var buttonNext = selector.querySelector('.step-next-button');
    var buttonPre = selector.querySelector('.step-pre-button');
    var currentValue = selector.querySelector('.current-value');

    buttonNext.onclick = function () {
      var valueCurrent = currentValue.value;

      if (valueCurrent != 0) {

        valueCurrent = shinobi.render.removeFormatNumber(valueCurrent);
        valueCurrent = parseFloat(valueCurrent);
        if (!isNaN(valueCurrent)) {
          var step = object.getStepPrice(valueCurrent);
          var value = valueCurrent + step;
          value = Math.round(value * 100) / 100
          currentValue.value = value;
        }
      } else {
        currentValue.value = object.currentPrice;
      }
    }
    buttonPre.onclick = function () {
      var valueCurrent = currentValue.value;

      valueCurrent = shinobi.render.removeFormatNumber(valueCurrent);
      valueCurrent = Number(valueCurrent);
      if (valueCurrent >= 0 && !isNaN(valueCurrent)) {
        var step = object.getStepPrice(valueCurrent);
        var value = valueCurrent - step;
        value = Math.round(value * 100) / 100
        currentValue.value = value;
      }

    }
  },
  getStepPrice: function (value, stockExchange) {
    var step = '';
    if (stockExchange != "HOSE") {
      if (value >= 0 && value < 10) {
        step = 0.01;
      }
      else {
        if (value >= 10 && value <= 50) {
          step = 0.05;
        } else {
          step = 0.1;
        }
      }
    } else {
      step = 0.1;
    }
    return step;
  },
  addEventStepVolume: function (selector) {
    var object = this;
    var selector = document.querySelector(selector);
    var buttonNext = selector.querySelector('.step-next-button');
    var buttonPre = selector.querySelector('.step-pre-button');
    var currentValue = selector.querySelector('.current-value');

    buttonNext.onclick = function () {
      var valueCurrent = currentValue.value;

      valueCurrent = shinobi.render.removeFormatNumber(valueCurrent);
      valueCurrent = Number(valueCurrent);
      currentValue.value = shinobi.util.formatNumber(valueCurrent + object.stepVolume);

    }
    buttonPre.onclick = function () {
      var valueCurrent = currentValue.value;

      valueCurrent = shinobi.render.removeFormatNumber(valueCurrent);
      valueCurrent = Number(valueCurrent);
      if (valueCurrent >= object.stepVolume) {
        currentValue.value = shinobi.util.formatNumber(valueCurrent - object.stepVolume);
      }

    }
  },
  addEventActiveBuySell: function () {
    var object = this;
    var buttonBuy = document.querySelector('.button-outline .button.buy');
    var buttonSell = document.querySelector('.button-outline .button.sell');
    var containerTrading = document.getElementById('containertrading');
    var buttonSubmit = document.getElementById('buttontrading');

    buttonSubmit.innerHTML = object.contentOrderBuy;
    buttonBuy.onclick = function () {
      buttonBuy.parentNode.classList.add(object.classBuy);
      buttonSell.parentNode.classList.remove(object.classSell);

      buttonSubmit.classList.add('buy');
      buttonSubmit.classList.remove('sell');
      buttonSubmit.innerHTML = object.contentOrderBuy;

      containerTrading.classList.add(object.classBuy);
      containerTrading.classList.remove(object.classSell);
    };
    buttonSell.onclick = function () {
      buttonBuy.parentNode.classList.remove(object.classBuy);
      buttonSell.parentNode.classList.add(object.classSell);

      buttonSubmit.classList.remove('buy');
      buttonSubmit.classList.add('sell');
      buttonSubmit.innerHTML = object.contentOrderSell;


      containerTrading.classList.add(object.classSell);
      containerTrading.classList.remove(object.classBuy);
    };
  },
  setUpOrderValueTab: function () {
    var input = document.querySelector("#setprice #orderPriceTab");
    var output = document.querySelector("#setvolume #orderVolumeTab");
    input.addEventListener('input', function (inputValue) {
      var account = document.getElementById("selectPM").value;
      var url = "/authenapi/StockPriceInfoApi/getMaxVolumnOrder";
      var request = {
        "account": account,
        "price": inputValue.target.value,
      };

      if (inputValue.target.value > 0) {
        shinobi.api.request(url, JSON.stringify(request), function (res) {
          var orderValue = JSON.parse(res);

          var orderRenderedValue = shinobi.util.formatNumber(orderValue);
          output.innerText = orderRenderedValue;
        });
      } else {
        output.innerText = "";
      }
    });
  },

  getOrderSideInfo(json, orderSideKey) {
    let mappingValue = {
      BUY: { text: 'MUA', classList: ['order-side', 'buy-side'] },
      SELL: { text: 'BÁN', classList: ['order-side', 'sell-side'] },
    };
    let text = "";
    let classList = [];
    if (json.hasOwnProperty(orderSideKey)) {
      text = json[orderSideKey];
      if (mappingValue.hasOwnProperty(text)) {
        let currentMappingItem = mappingValue[text];
        text = currentMappingItem.text;
        classList = currentMappingItem.classList;
      }

    }
    return { text, classList };

  },

  renderOrderSide: function (cell, row, col, all) {
    let data = all[row];
    let orderSideKey = 'side';
    let orderSideInfo = shinobi.tradingsystemrender.getOrderSideInfo(data, orderSideKey);
    cell.innerHTML = orderSideInfo.text;
    cell.classList.add(...orderSideInfo.classList);
  },
  renderOrderSideDataList: function (elem, value, all) {
    let data = all;
    let orderSideKey = 'side';
    let orderSideInfo = shinobi.tradingsystemrender.getOrderSideInfo(data, orderSideKey);
    elem.innerHTML = orderSideInfo.text;
    elem.classList.add(...orderSideInfo.classList);
  },
  renderOrderStockCode(cell, row, col, all) {
    let data = all[row];
    let orderSideKey = 'side';
    let orderSideInfo = shinobi.tradingsystemrender.getOrderSideInfo(data, orderSideKey);
    cell.classList.add(...orderSideInfo.classList);
  },

  renderOrderTypeStatus(cell, row, col, all) {
    cell.classList.add('has-text-left');
    var value = cell.innerHTML;
    var listOrderType = {
      'NEW': { text: 'Mới', icon: '/static/image/pending.jpg' },
      'INPROCESS': { text: 'Đang xử lý', icon: '/static/image/pending.jpg' },
      'SUCCESS': { text: 'Thành công', icon: '/static/image/matched.jpg' },
      'PENDING': { text: 'Chờ khớp', icon: '/static/image/pending.jpg' },
      'MATCHED': { text: 'Đã khớp', icon: '/static/image/matched.jpg' },
      'EDITED': { text: 'Đã sửa', icon: '/static/image/pending.jpg' },
      'CANCELED': { text: 'Đã hủy', icon: '/static/image/cancel.jpg' },
      'ERROR': { text: 'Lỗi', icon: '/static/image/.jpg' },
      'PARTIAL_MATCHED': { text: 'Khớp một phần', icon: '/static/image/partialmatched.jpg' },
      'PARTIAL_MATCHED_REST_CANCELLED': { text: 'Khớp một phần, hủy phần còn lại', icon: '/static/image/partialmatchedpartialcancel.jpg' },
    };

    if (listOrderType.hasOwnProperty(value)) {
      let renderObject = listOrderType[value];
      cell.innerHTML = `<div class="level has-text-left" style="
                            justify-content: left;
                        ">
                          <span class="level-left"><img class="icon is-small" src="${renderObject.icon}"></span>
                          <span class="level-item is-narrow ml-1"> ${renderObject.text}</span>
                        </div>`;
    } else {
      cell.innerHTML = value;
    }
  },

  renderOrderTypeStatusDatalist(elem, value, all) {
    elem.classList.add('has-text-left');
    var listOrderType = {
      'NEW': { text: 'Mới', icon: '/static/image/pending.jpg' },
      'INPROCESS': { text: 'Đang xử lý', icon: '/static/image/pending.jpg' },
      'SUCCESS': { text: 'Thành công', icon: '/static/image/matched.jpg' },
      'PENDING': { text: 'Chờ khớp', icon: '/static/image/pending.jpg' },
      'MATCHED': { text: 'Đã khớp', icon: '/static/image/matched.jpg' },
      'EDITED': { text: 'Đã sửa', icon: '/static/image/pending.jpg' },
      'CANCELED': { text: 'Đã hủy', icon: '/static/image/cancel.jpg' },
      'ERROR': { text: 'Lỗi', icon: '/static/image/.jpg' },
      'PARTIAL_MATCHED': { text: 'Khớp một phần', icon: '/static/image/partialmatched.jpg' },
      'PARTIAL_MATCHED_REST_CANCELLED': { text: 'Khớp một phần, hủy phần còn lại', icon: '/static/image/partialmatchedpartialcancel.jpg' },
    };

    if (listOrderType.hasOwnProperty(value)) {
      let renderObject = listOrderType[value];
      elem.innerHTML = `<div class="level has-text-left" style="
                            justify-content: left;
                        ">&nbsp
                          <span class="level-left"><img class="icon is-small" src="${renderObject.icon}"></span>
                          <span class="level-item is-narrow ml-1"> ${renderObject.text}</span>
                        </div>`;
    } else {
      elem.innerHTML = value;
    }
  },

  titleDetailOrder: function (elem, value, all) {
    if (value) {
      elem.innerHTML = `Chi tiết lệnh (Đã huỷ lúc ${value})`;
    } else {
      elem.innerHTML = `Chi tiết lệnh`;
    }
  },

  showPriceConfirm: function (elem, value, all) {
    console.log("all", all);
    elem.innerHTML = format(value * 1000);
  },

  showVolumeConfirm: function (elem, value, all) {
    elem.innerHTML = format((all.price * 1000) * all.volume);
  },
};
shinobi.template_1 = {
    listBackground: ['staticpage-background1.jpg', 'staticpage-background2.jpg', 'staticpage-background3.jpg', 'staticpage-background4.jpg'],
    init: function () {
        var object = this;
        object.checkLogin();
        object.renderHeader();
    },

    checkLogin: function () {
        var object = this;
        shinobi.coreapi.checkAuthen(function () {
            object.getInfoLogin();
        })
    },
    getInfoLogin: function (callback) {
        var url = "/authenapi/SystemUserApi/getInfoLogin";
        var request = {};
        shinobi.cacheapi.request(url, JSON.stringify(request), function (res) {
            window.localStorage.infoUser = res;
            if (callback) {
                callback(window.localStorage.infoUser);
            }
        })
    },
    renderHeader: function () {
        var object = this;
        object.getInfoLogin(function (stringUser) {
            shinobi.mapping.render('#navbarBasicExample', stringUser);
        });
    },
};